This is gforth.info, produced by makeinfo version 6.8 from gforth.texi.

このマニュアルは、 標準 Forth 言語の高速で移植可能な実装である Gforth (バ
ージョン 0.7.9_20240418, April 18, 2024)用です。 これはリファレンス・マ
ニュアルとして機能しますが、 Forth の概要と Forth チュートリアルも含まれ
ています。

   Authors: Bernd Paysan, Anton Ertl, Gerald Wodni Copyright © 1995,
1996, 1997, 1998, 2000, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
2011, 2012, 2013, 2014,2015,2016,2017,2018,2019,2020,2021,2022,2023 Free
Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by the
     Free Software Foundation raise funds for GNU development.”
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Gforth: (gforth).          forth言語のための高速インタプリタ
END-INFO-DIR-ENTRY


File: gforth.info,  Node: Formatted numeric output,  Next: Floating-point output,  Prev: Simple numeric output,  Up: Other I/O

6.20.2 Formatted numeric output
-------------------------------

Forth は伝統的に、 整数の書式設定された出力に「表示数値出力」(“pictured
numeric Output”) と呼ばれる手法を使用しています。 この手法では、 数値か
ら数字桁(digits)が抽出され(‘base’ で定義された現在の出力基数を使用 *note
Number Conversion::)、 ASCII コードに変換され、 メモリのスクラッチパッド
領域(*note Implementation-defined options: core-idef.)に構築される文字列
の先頭に付加されます。 抽出プロセス中に、 文字列の先頭に任意の文字を追加
できます。 完成した文字列はアドレスと長さによって指定され、 プログラム制
御の下で操作(‘TYPE’ や、 コピーや、 変更)できます。

   前のセクションで説明したすべての整数出力ワード (*note Simple numeric
output::) は、 Gforth では表示数値出力(pictured numeric output)を使用し
て実装されています。

   表示数値出力(pictured numeric output)について覚えておくべき 3 つの重
要な点:

   • 常に2倍長整数を処理します。 1倍長整数を表示するには、 まず最初に2倍
     長に変換します (これを行う方法は *note Double precision::)。
   • 2倍長整数は常に符号無しであるかのように扱われます。 下記の例は、 符
     号付き数値を出力する方法を示しています。
   • 文字列は右から左に構築されます。 最下位桁が最初です。

   標準 Forth は、 ‘<#’ で空にして初期化し、 ‘#>’ で結果文字列を取得する
単一の出力バッファー(別名ホールド領域;hold area)をサポートします。

   Gforth はさらに、 このバッファーの入れ子になった使用をサポートしてお
り、 たとえば、 ホールド領域を処理するコード内でデバッグ・トレーサー
‘~~’ からの出力を入れ子にすることができます。 ‘<<#’ は新しい入れ子を開始
し、 ‘#>’ は結果文字列を生成し、 ‘#>>’ は入れ子を解除します。 入れ子のホ
ールド領域が再利用され、‘#>’ は次に外側の入れ子の文字列を生成します。
Gforth の高レベルの数値出力ワードはすべて ‘<<#’ ...  ‘#>’ ...  ‘#>>’ を
使用し、 ホールド領域の他のユーザー内に入れ子にできます。

‘<#’ ( –  ) core “less-number-sign”
   表示数値出力文字列を 初期化/クリア します(訳注: 表示数値出力用のポイ
ンタをホールド領域の末尾(初期値)に戻すだけ。 中身は消さない。)

‘<<#’ ( –  ) gforth-0.5 “less-less-number-sign”
   ‘#>>’ で終わるホールド領域を開始します。 相互に入れ子にすることも、
‘<#’ で入れ子にすることもできます。 注: ‘<<#’ と ‘#>>’ を一致させないと
、 最終的にホールド領域が不足します。 ‘<#’ を使用してホールド領域を空に
リセットできます。

‘#’ ( ud1 – ud2  ) core “number-sign”
   ‘<<#’ と ‘#>’ の間で使用されます。 UD1 の最下位桁(‘base’ による)を、
表示数値出力文字列の先頭に追加します。 UD2 は UD1/BASE、 つまり残りの桁
を表す数値です。

‘#s’ ( ud – 0 0  ) core “number-sign-s”
   ‘<<#’ と ‘#>’ の間で使用されます。 UD のすべての数字を表示数値出力文
字列の先頭に追加します。 ‘#s’ は少なくとも 1 つの数字を変換します。 した
がって、 UD が 0 の場合、 ‘#s’ は表示数値出力文字列の先頭に ‘0‘ を追加し
ます。

‘hold’ ( char –  ) core “hold”
   ‘<<#’ と ‘#>’ の間で使用されます。 表示数値出力文字列の前に文字 CHAR
を追加します。

‘holds’ ( addr u –  ) core-ext “holds”
   ‘<<#’ と ‘#>’ の間で使用されます。 表示数値出力文字列の前に文字列
‘addr u’ を追加します。

‘sign’ ( n –  ) core “sign”
   ‘<<#’ と ‘#>’ の間で使用されます。 N (1倍長整数) が負の場合、 表示数
値出力文字列の先頭に ‘-’ を追加します。

‘#>’ ( xd – addr u  ) core “number-sign-greater”
   変換対象(変換残りの)数値 XD を破棄し、 フォーマットされた文字列のアド
レスと長さを示す ADDR U を返すことで、 表示数値出力文字列を完成させます
。 標準のプログラムでは、 文字列内の文字を変更する場合があります。 ホー
ルド領域は解放されません。 ‘#>>’ を使用して ‘<<#’ で始まるホールド領域を
解放するか、 ‘<#’ を使用してすべてのホールド領域を解放します。

‘#>>’ ( –  ) gforth-0.5 “number-sign-greater-greater”
   ‘<<#’ で始まるホールド領域を解放します。

以下に、 表示数値出力の使用例をいくつか示します:

     : my-u. ( u -- )
       \ PNS(Pictured Number String)の最も単純な使用法。標準の u. のように振る舞います。
       0              \ 上記 u を 2倍長にする
       <<#            \ 変換開始
       #s             \ 全桁を変換
       #>             \ 変換終了
       TYPE SPACE     \ 表示、続けて空白1つ
       #>> ;          \ ホールド領域を開放

     : cents-only ( u -- )
       0              \ 上記 u を 2倍長整数に変換
       <<#            \ 変換開始
       # #            \ 最下位と最下位からの次の 2 桁のみ変換
       #>             \ 変換完了。他の桁は破棄
       TYPE SPACE     \ 表示、続けて空白1つ
       #>> ;          \ ホールド領域を開放

     : dollars-and-cents ( u -- )
       0              \ 上記 u を符号無し2倍長整数に変換
       <<#            \ 変換開始
       # #            \ 下位2桁を変換
       '.' hold       \ 小数点を打つ
       #s             \ 残りの桁を変換
       '$' hold       \ 通貨記号を打つ
       #>             \ 変換完了
       TYPE SPACE     \ 表示、続けて空白1つ
       #>> ;          \ ホールド領域を開放

     : my-. ( n -- )
       \ 負数も処理する標準の . のように振る舞う
       s>d            \ 符号付き2倍長整数に変換
       swap over dabs \ 符号バイトを別途保存して数値は符号無し2倍長に
       <<#            \ 変換開始
       #s             \ 全桁を変換
       rot sign       \ 符号チェック。必要なら "-" 付加
       #>             \ 変換完了
       TYPE SPACE     \ 表示、続けて空白1つ
       #>> ;          \ ホールド領域を開放

     : account. ( n -- )
       \ (会計風出力)会計士はマイナス記号が嫌いで、
       \ 負の数には括弧を使用します
       s>d            \ 符号付き2倍長整数に変換
       swap over dabs \ 符号バイトを別途保存して数値は符号無し2倍長に
       <<#            \ 変換開始
       2 pick         \ 符号バイトのコピーを得る
       0< IF ')' hold THEN \ これが(あれば)出力の右端の文字
       #s             \ 全桁を変換
       rot            \ 符号バイトを得る
       0< IF '(' hold THEN
       #>             \ 変換完了
       TYPE SPACE     \ 表示、続けて空白1つ
       #>> ;          \ ホールド領域を開放


   これらのワードの利用例をいくつか示します:

     1 my-u. 1  ok
     hex -1 my-u. decimal FFFFFFFFFFFFFFFF  ok
     1 cents-only 01  ok
     1234 cents-only 34  ok
     2 dollars-and-cents  $0.02  ok
     1234 dollars-and-cents  $12.34  ok
     123 my-. 123  ok
     -123 my-. -123  ok
     123 account. 123  ok
     -456 account. (456)  ok



File: gforth.info,  Node: Floating-point output,  Next: Miscellaneous output,  Prev: Formatted numeric output,  Up: Other I/O

6.20.3 Floating-point output
----------------------------

浮動小数点数出力は常に基数 10 を使用して表示されます。

‘f.’ ( r –  ) floating-ext “f-dot”
   (浮動小数点数) r を指数なしで表示し、 その後に空白1つ続けます。

‘fe.’ ( r –  ) floating-ext “f-e-dot”
   r を工学表記(3 で割り切れる指数) で表示し、 その後に空白1つ続けます。

‘fs.’ ( r –  ) floating-ext “f-s-dot”
   r を科学表記(指数付き)で表示し、 その後に空白1つ続けます。

‘fp.’ ( r –  ) floating-ext “f-p-dot”
   r を SI 接頭辞表記(3 で割れる指数を使用し、 可能な場合は SI 接頭辞に
変換)で表示し、 その後に空白1つ続けます。

   数値 1234.5678E23 をさまざまな浮動小数点数出力形式で出力する例を以下
に示します。

     1234.5678E23 f. 123456780000000000000000000.  ok
     1234.5678E23 fe. 123.456780000000E24  ok
     1234.5678E23 fs. 1.23456780000000E26  ok
     1234.5678E23 fp. 123.456780000000Y  ok

   出力桁幅は以下の影響を受けます:

‘precision’ ( – u  ) floating-ext “precision”
   u は、 ‘f.’ や ‘fe.’ や ‘fs.’ や ‘fp.’ で現在使用されている有効桁数で
す。

‘set-precision’ ( u –  ) floating-ext “set-precision”
   ‘f.’ や ‘fe.’ や ‘fs.’ や ‘fp.’ で現在使用されている有効桁数を u に設
定します。

   以下のコマンドを使用して、 出力をより詳細に制御できます:

‘f.rdp’ ( rf +nr +nd +np –  ) gforth-0.6 “f.rdp”
   浮動小数点数 rf を書式化して表示します。 出力の合計幅は nr です。 固
定小数点表記の場合、 小数点以下の桁数は +nd、 有効桁数の最小値は np です
。 ‘Set-precision’ は ‘f.rdp’ には影響しません。 固定小数点表記は、 有効
桁数が少なくとも np の場合で、 かつ、 小数点以下の桁数が収まる場合に、 使
用されます。 固定小数点表記が使用されない場合は指数表記が使用され、 それ
でも適合しない場合はアスタリスクが出力されます。 数値がまったく適合しな
いリスクを避けるために、 nr>=7 を使用することをお勧めします。 ‘f.rdp’ が
指数表記に切り替わるケースを避けるために、 nr>=np+5 をお勧めします。 ど
うしてかというと、 固定小数点表記でも有効桁数が少なすぎるのに、 指数表記
では有効桁数が更に少なくなるためです。 一部の数値を固定小数点表記しなけ
ればならない場合は、 nr>=nd+2 をお勧めします。 np の値が小さいほど、 よ
り多くの場合で固定小数点表記で表示されます (固定小数点表記に有効数字がほ
とんどまたはまったく残っていない場合)。 すべての数値を指数表記したい場合
は、np>nr をお勧めします。

   出力にどのような影響を与えるかをより直感的に理解できるように、 パラメ
ーターの組み合わせの例をいくつか示します。 各行内は同じ数値が出力されて
いて、 各列には同じパラメータの組み合わせが出力に使用されています:

         12 13 0    7 3 4   7 3 0   7 3 1   7 5 1   7 7 1   7 0 2  4 2 1
     |-1.234568E-6|-1.2E-6| -0.000|-1.2E-6|-1.2E-6|-1.2E-6|-1.2E-6|****|
     |-1.234568E-5|-1.2E-5| -0.000|-1.2E-5|-.00001|-1.2E-5|-1.2E-5|****|
     |-1.234568E-4|-1.2E-4| -0.000|-1.2E-4|-.00012|-1.2E-4|-1.2E-4|****|
     |-1.234568E-3|-1.2E-3| -0.001| -0.001|-.00123|-1.2E-3|-1.2E-3|****|
     |-1.234568E-2|-1.2E-2| -0.012| -0.012|-.01235|-1.2E-2|-1.2E-2|-.01|
     |-1.234568E-1|-1.2E-1| -0.123| -0.123|-.12346|-1.2E-1|-1.2E-1|-.12|
     |-1.2345679E0| -1.235| -1.235| -1.235|-1.23E0|-1.23E0|-1.23E0|-1E0|
     |-1.2345679E1|-12.346|-12.346|-12.346|-1.23E1|-1.23E1|   -12.|-1E1|
     |-1.2345679E2|-1.23E2|-1.23E2|-1.23E2|-1.23E2|-1.23E2|  -123.|-1E2|
     |-1.2345679E3|-1.23E3|-1.23E3|-1.23E3|-1.23E3|-1.23E3| -1235.|-1E3|
     |-1.2345679E4|-1.23E4|-1.23E4|-1.23E4|-1.23E4|-1.23E4|-12346.|-1E4|
     |-1.2345679E5|-1.23E5|-1.23E5|-1.23E5|-1.23E5|-1.23E5|-1.23E5|-1E5|

   以下を使用して、 数値を表示する代わりに文字列を生成できます:

‘f>str-rdp’ ( rf +nr +nd +np – c-addr nr  ) gforth-0.6 “f>str-rdp”
   rf を c-addr nr の文字列に変換します。 nr +nd np の変換規則と意味は
‘f.rdp’ と同じです。 結果は表示数値出力(pictured numeric output)バッファ
ーに格納され、 そのバッファを破壊するものによって破壊されます(訳注: この
バッファーは、 他の 表示数値出力(pictured numeric output) と共用であると
いうこと)。

‘f>buf-rdp’ ( rf c-addr +nr +nd +np –  ) gforth-0.6 “f>buf-rdp”
   rf を c-addr nr の文字列に変換します。 nr nd np の変換規則と意味は
‘f.rdp’ と同じです。

   以下のような、 高レベルの FP-to-string ワードを実装するために使用され
るプリミティブもあります:

‘represent’ ( r c-addr u – n f1 f2 ) floating “represent”
   r の 10 進仮数部(別名 mantissa)をバッファ c-addr u 内の文字列に変換し
ます。 n は指数で、r が負の場合は f1 が true、 r が有効(Gforth の有限数
)の場合は f2 が true です(訳注: 仮数部が u の桁数になるようそれ以下を四
捨五入するっぽい)。


File: gforth.info,  Node: Miscellaneous output,  Next: Displaying characters and strings,  Prev: Floating-point output,  Up: Other I/O

6.20.4 Miscellaneous output
---------------------------

‘cr’ ( –  ) core “c-r”
   (ホスト OS の好みの種類の)改行(newline)を出力します。 注意: Forth コ
マンド・ライン・インタプリタの改行(newline)挿入のクセのため、 ‘cr’ をテ
キストの先頭で使用することをお勧めします。 例: ‘cr ." hello, world"’.

‘space’ ( –  ) core “space”
   空白を1つ表示する。

‘spaces’ ( u –  ) core “spaces”
   U 個の空白を表示します。

‘out’ ( – addr  ) gforth-1.0 “out”
   ‘addr’ には、 ユーザー出力デバイス上の現在行内のカーソルの位置を指定
しようと試みる数値が含まれています。 ‘cr’ で 0 にリセットされ、 ‘type’ に
よって文字数ずつ増加、 ‘emit’ で増加、 ‘backspaces’ で減少します。 残念
ながら、 タブ文字や、マルチバイト文字や、 幅 0 と 幅2 のユニコード文字の
存在は考慮されていないため、 単純な場合にのみ機能します。

‘.\"’ ( compilation ’ccc"’ – ; run-time –  ) gforth-0.6 “dot-backslash-quote”
   ‘."’ と似ていますが、 C言語のようなバックスラッシュによるエスケープ・
シーケンス(\-escape-sequences)を認識します(詳しくは ‘S\"’ 参照)。

‘."’ ( compilation ’ccc"’ – ; run-time –  ) core “dot-quote”
   コンパイル時: ‘"‘ (二重引用符)で区切られた文字列 ccc をパースします。
実行時、 その文字列を表示します。 このワードのインタプリタ機能
(interpretation semantics)は、 標準 Forth では定義されていません。
Gforth でのインタプリタ機能(interpretation semantics)は、 その文字列を表
示することです。

‘.(’ ( compilation&interpretation "ccc<paren>" –  ) core-ext “dot-paren”
   コンパイル時(compilation semantics)とインタプリタ時(interpretation
semantics): ‘)’(右括弧)で区切られた文字列 ccc をパースします。 その文字
列を表示します。 これは、 コンパイル中に進行状況情報を表示するためによく
使用されます。 下記の例を参照してください。

   あなたが ‘.( hello)’ を使用するべきか ‘." hello"’ を使用するべきかを
気に掛けたくない場合は、 ‘"hello" type’ と書くことができます。 これによ
り、 通常必要なものが得られます(ただし、他の Forth システムへの移植性は
低くなります)。

例として、 ファイル ‘test.fs’ に保存されている以下のテキストについて考え
てみましょう:

     .( text-1)
     : my-word
       ." text-2" cr
       .( text-3)
       "text-4" type
     ;

     ." text-5"
     "text-6" type

   このコードを Gforth にロードすると、 以下の出力が生成されます:

     include test.fs <RET> text-1text-3text-5text-6 ok

   • ‘.(’ は即実行ワードであるため、 メッセージ ‘text-1’ と ‘text-3’ が
     表示されます。 コロン定義の内側でも外側でも、 全く同じに振る舞いま
     す。
   • ‘."’ に対する Gforth の追加インタプリタ機能(interpretation
     semantics)により、 メッセージ ‘text-5’ が表示されます。
   • ‘"text-6" type’ が通訳(interpret)され、 メッセージ ‘text-6’ が表示
     されます。
   • テキスト・インタプリタが ‘my-word’ の定義内で ‘."’ のコンパイル機能
     (compilation semantics)を実行するため、 メッセージ ‘text-2’ は「表
     示されません」。
   • ‘"text-4" type’ は ‘my-word’ 内にコンパイルされるため、 メッセージ
     ‘text-4’ は「表示されません」。


File: gforth.info,  Node: Displaying characters and strings,  Next: Terminal output,  Prev: Miscellaneous output,  Up: Other I/O

6.20.5 Displaying characters and strings
----------------------------------------

‘type’ ( c-addr u –  ) core “type”
   U>0 なら、 C-ADDR からに格納されている文字列から U 文字を表示します
(訳注: 日本語(UTF-8)の出力も対応)。

‘xemit’ ( xc –  ) xchar “x-emit”
   端末に xchar を出力します。

‘emit’ ( c –  ) core “emit”
   バイト値 c を現在の出力に送信します。 ASCII 文字の場合、 ‘emit’ は
‘xemit’ と同等です。

‘typewhite’ ( addr n –  ) gforth-0.2 “typewhite”
   type と似ていますが、 文字の代わりに空白が表示されます(訳注: 指定の文
字数 n だけ空白出すだけなので日本語(UTF-8)だと表示幅がズレる)。


File: gforth.info,  Node: Terminal output,  Next: Single-key input,  Prev: Displaying characters and strings,  Up: Other I/O

6.20.6 Terminal output
----------------------

端末に出力している場合、 カーソル位置を制御することができます:

‘at-xy’ ( x y –  ) facility “at-x-y”
   カーソルを位置 x y に置きます。 ディスプレイの左上角は 0 0 です。

‘at-deltaxy’ ( dx dy –  ) gforth-0.7 “at-deltaxy”
   現在の位置を x y として、 カーソルを x+dx y+dy に置きます。

   カーソルをどこに置くかを知るには、 以下のように、 画面(screen)のサイ
ズを知っておくと役立つことがよくあります:

‘form’ ( – nlines ncols  ) gforth-0.2 “form”
\ 訳注:画面のサイズを得る

   また、 以下のようなものを使用したい場合もあります:

‘page’ ( –  ) facility “page”
   画面(screen)をクリアする

   注意: ターミナル以外では、フォーム・フィード(form feed;FF)を取得する
には ‘page’ ではなく ‘12 Emit’ を使用する必要があることに注意してくださ
い。

6.20.6.1 Color output
.....................

以下のワード群は、 意味・理由ごとに色を変えるために使用されます。 更に細
かい設定は、 ワードによって指定された色とスタイルで生成されます。 実際の
色とスタイルはテーマによって異なります(下記を参照)。

‘default-color’ ( –  ) gforth-1.0 “default-color”
   システムのデフォルト用の色

‘error-color’ ( –  ) gforth-1.0 “error-color”
   エラー用の色: (通常は)赤

‘error-hl-inv’ ( –  ) gforth-1.0 “error-hl-inv”
   エラー用にハイライトとして反転表示するカラーモード

‘error-hl-ul’ ( –  ) gforth-1.0 “error-hl-ul”
   エラー用にアンダーラインでハイライトする色変更モード

‘warning-color’ ( –  ) gforth-1.0 “warning-color”
   警告(warning)の色: 背景が黒の端末では 青/黄

‘info-color’ ( –  ) gforth-1.0 “info-color”
   情報(info)用の色: 黒色の背景の端末では 緑/シアン

‘success-color’ ( –  ) gforth-1.0 “success-color”
   成功(success)の色: 緑

‘input-color’ ( –  ) gforth-1.0 “input-color”
   ユーザー入力の色: 黒/白 (両方ともボールド)

‘status-color’ ( –  ) gforth-1.0 “status-color”
   エラー用にハイライトとして反転表示するカラーモード

6.20.6.2 Color themes
.....................

あなたが、 明るい背景を好むか暗い背景を好むかに応じて、 前景の色テーマ
(foreground colors-theme)を以下のように変更できます:

‘light-mode’ ( –  ) gforth-1.0 “light-mode”
   白背景用の色テーマ

‘dark-mode’ ( –  ) gforth-1.0 “dark-mode”
   黒背景用の色テーマ

‘uncolored-mode’ ( –  ) gforth-1.0 “uncolored-mode”
   このモードでは色は設定されませんが、 デフォルトの色が使用されます。

‘magenta-input’ ( –  ) gforth-1.0 “magenta-input”
   入力色(input color)を認識しやすくします(プレゼンテーションに役立ちま
す)


File: gforth.info,  Node: Single-key input,  Next: Line input and conversion,  Prev: Terminal output,  Up: Other I/O

6.20.7 Single-key input
-----------------------

単一の印刷可能な文字を取得したい場合は、 ‘key’ を使用できます。 文字が
‘key’ に使用できるかどうかを確認するには、 ‘key?’ を使用できます。

‘key’ ( – char  ) core “key”
   1 文字 CHAR を受け取ります(ただし表示はされません)。

‘key-ior’ ( – char|ior  ) gforth-1.0 “key-ior”
   1 文字 CHAR を受け取ります (ただし表示はされません)。 エラーまたは割
り込みの場合は、 代わりに、 負数の IOR を返します。

‘key?’ ( – flag  ) facility “key-question”
   文字が ‘key’ で使用可能かどうかを判断します。 文字が使用可能な場合、
FLAG は true です。 次に ‘key’ を呼び出すと、 文字が生成されます。 一度
‘key?’ が true を返すと、 その後に ‘key’ または ‘ekey’ を呼び出す前に
‘key?’ を呼び出した場合も true が返されます。

‘xkey?’ ( – flag  ) xchar “x-key-query”
\ 訳注: UTF-8 な環境では key? は xkey? のエイリアスです。
\ xchar 文字が xkey で使用可能かどうかを判断します(たぶん)

   印刷可能な文字と印刷不可能な文字を組み合わせて処理したい場合は、
‘ekey’ とそのファミリーを使用して実行できます。 ‘ekey’ は、 ‘ekey>char’
で文字に変換するか、 ‘ekey>fkey’ でキー識別子に変換する必要があるキーボ
ード・イベントを生成します。

   ekey を使用するための一般的なコードは以下のようになります:

     ekey ekey>xchar if ( xc )
       ... \ do something with the character
     else ekey>fkey if ( key-id )
       case
         k-up                                  of ... endof
         k-f1                                  of ... endof
         k-left k-shift-mask or k-ctrl-mask or of ... endof
         ...
       endcase
     else ( keyboard-event )
       drop \ just ignore an unknown keyboard event type
     then then

‘ekey’ ( – u  ) facility-ext “e-key”
   キーボード・イベント U を受け取りす(実装定義のエンコーディングです) 。

‘ekey>xchar’ ( u – u false | xc true  ) xchar-ext “e-key-to-x-char”
   可能であれば、 キーボード・イベント U を xchar ‘xc’ に変換します。

‘ekey>char’ ( u – u false | c true  ) facility-ext “e-key-to-char”
   可能であれば、 キーボード・イベント U を文字 ‘c’ に変換します。 注意:
非 ASCII 文字は、 ‘ekey>char’ と ‘ekey>fkey’ の両方から ‘false’ が返るこ
とに注意してください。 利用可能な場合は、 ‘ekey>char’ の代わりに
‘ekey>xchar’ を使用します。

‘ekey>fkey’ ( u1 – u2 f  ) facility-ext “e-key-to-f-key”
   u1 が特殊キー(special key)セット内のキーボード・イベントの場合、 キー
ボード・イベント U1 をキー ID U2 に変換し、 true を返します。それ以外の
場合は、 U1 と false を返します。

‘ekey?’ ( – flag  ) facility-ext “e-key-question”
   キーボード・イベントが利用可能な場合は True。

   カーソル・キーのキー識別子は以下のとおりです:

‘k-left’ ( – u  ) facility-ext “k-left”

‘k-right’ ( – u  ) facility-ext “k-right”

‘k-up’ ( – u  ) facility-ext “k-up”

‘k-down’ ( – u  ) facility-ext “k-down”

‘k-home’ ( – u  ) facility-ext “k-home”
   別名 Pos1

‘k-end’ ( – u  ) facility-ext “k-end”

‘k-prior’ ( – u  ) facility-ext “k-prior”
   別名 PgUp

‘k-next’ ( – u  ) facility-ext “k-next”
   別名 PgDn

‘k-insert’ ( – u  ) facility-ext “k-insert”

‘k-delete’ ( – u  ) facility-ext “k-delete”
   著者の xterm 上では<DEL> キーで、 Backspace ではありません

   ファンクション・キー(別名キーパッド・キー)のキー識別子は以下のとおり
です:

‘k-f1’ ( – u  ) facility-ext “k-f-1”

‘k-f2’ ( – u  ) facility-ext “k-f-2”

‘k-f3’ ( – u  ) facility-ext “k-f-3”

‘k-f4’ ( – u  ) facility-ext “k-f-4”

‘k-f5’ ( – u  ) facility-ext “k-f-5”

‘k-f6’ ( – u  ) facility-ext “k-f-6”

‘k-f7’ ( – u  ) facility-ext “k-f-7”

‘k-f8’ ( – u  ) facility-ext “k-f-8”

‘k-f9’ ( – u  ) facility-ext “k-f-9”

‘k-f10’ ( – u  ) facility-ext “k-f-10”

‘k-f11’ ( – u  ) facility-ext “k-f-11”

‘k-f12’ ( – u  ) facility-ext “k-f-12”

   ‘k-f11’ と ‘k-f12’ はそれほど広くには利用可能ではないことに注意してく
ださい。

   これらのキー識別子をさまざまなシフト・キーのマスクと組み合わせること
ができます:

‘k-shift-mask’ ( – u  ) facility-ext “k-shift-mask”

‘k-ctrl-mask’ ( – u  ) facility-ext “k-ctrl-mask”

‘k-alt-mask’ ( – u  ) facility-ext “k-alt-mask”

   ASCII 値を持つキーが多数あるため、 特殊キーとして報告される可能性は低
いですが、 以下のキーとシフト・キーの組み合わせは特殊キーとして報告され
る可能性があります:

‘k-enter’ ( – u  ) gforth-1.0 “k-enter”

‘k-backspace’ ( – u  ) gforth-1.0 “k-backspace”

‘k-tab’ ( – u  ) gforth-1.0 “k-tab”

   さらに、 キーおよびその他のイベントには以下のキー・コードがあります:

‘k-winch’ ( – u  ) gforth-1.0 “k-winch”
   ユーザーがウィンドウ・サイズを変更したときに生成される可能性のあるキ
ー・コード。

‘k-pause’ ( – u  ) gforth-1.0 “k-pause”

‘k-mute’ ( – u  ) gforth-1.0 “k-mute”

‘k-volup’ ( – u  ) gforth-1.0 “k-volup”

‘k-voldown’ ( – u  ) gforth-1.0 “k-voldown”

‘k-sel’ ( – u  ) gforth-1.0 “k-sel”
   Androidでの選択(selections)のキー・コード

‘k-eof’ ( – u  ) gforth-1.0 “k-eof”

   注意: Forth システムに ‘ekey>fkey’ とキー識別子のワードがある場合でも
、 そのキーが必ずしも利用可能であるとは限らず、 すべてのキーとシフト・マ
スクとの可能なすべての組み合わせを報告できるとは限らないことに注意してく
ださい。 したがって、キーやキーの組み合わせが押せない場合や認識されない
場合でも、プログラムが使えるようにプログラムを作成してください。

   例: 古いキーボードには F11 キーと F12 キーがないことがよくあります。
xterm で Gforth を実行すると、xterm は多数の組み合わせ(例: <Shift-Up>)を
捕捉しますが、それを Gforth に渡すことはありません。 最後に、Gforth は現
在、 複数のシフト・キーの組み合わせを認識して報告しません(そのため、上記
の例の <shift-ctrl-left> のケースは決して入力されません)。

   Gforth は、ANSI 端末で利用可能なさまざまなキーを認識します(MS-DOS で
は、 その動作を実現するには ANSI.SYS ドライバーが必要です)。 これは、 そ
のようなキーが押されたときに ANSI 端末が送信するエスケープ・シーケンスを
認識することによって機能します。 他のエスケープ・シーケンスを送信する端
末を使用している場合、 Gforth では有益な結果は得られません。 他の Forth
システムは異なる方法で動作する可能性があります。

   Gforth には、 ファンクション・キーの名前を出力するためのいくつかのワ
ードも用意されています:

‘fkey.’ ( u –  ) gforth-1.0 “fkey-dot”
   ファンクション・キー u の文字列表現を出力します。 U はファンクション
・キー(おそらく修飾子マスク付き)でなければなりません。 そうでない場合は
例外が発生する可能性があります。

‘simple-fkey-string’ ( u1 – c-addr u  ) gforth-1.0 “simple-fkey-string”
   c-addr u は、ファンクション・キー u1 の文字列名です。 修飾子マスクの
ない単純なファンクション・キーに対してのみ機能します。 現在、 単純なファ
ンクション・キーでない u1 では例外を生成します。


File: gforth.info,  Node: Line input and conversion,  Next: Pipes,  Prev: Single-key input,  Up: Other I/O

6.20.8 Line input and conversion
--------------------------------

文字列をメモリに保存する方法については、 *note String representations::
を参照してください。

   キーボードから一行入力するためのワード群:

‘accept’ ( c-addr +n1 – +n2  ) core “accept”
   ユーザー入力デバイスから最大 N1 文字の文字列を取得し、 C-ADDR に保存
します。 N2 は受け取った文字列の長さです。 ユーザーは <RET> を押して終了
を指示します。 Gforth は、 ‘accept’ で、 Forth コマンド・ラインで利用で
きるすべての編集機能(履歴やワード補完を含む)をサポートしています。

‘edit-line’ ( c-addr n1 n2 – n3  ) gforth-0.6 “edit-line”
   ‘accept’ のように振る舞いますが、バッファ C-ADDR N1 の内容を先頭から
長さ n2 まで引用します( n2=0 の場合、 全く引用せず、 空の状態から入力編
集開始になります)。 受け取った文字列の長さを n3 に返します。

   変換ワード群:

‘s>number?’ ( addr u – d f  ) gforth-0.5 “s>number?”
   文字列 addr u を 符号付き2倍長整数 d に変換し、 フラグ f が true なら
ば成功、 false ならば変換失敗です( d の値は保証されません) (訳注: フラグ
が true の場合でも ‘-15.’ 基数プレフィックスを付けずに記述した場合、 警
告が出力されます。 警告が出ないようにするには基数プレフィックスを付けて
下さい ‘#-15.’)

‘s>unumber?’ ( c-addr u – ud flag  ) gforth-0.5 “s>unumber?”
   文字列 c-addr u を 符号なし2倍長整数 ud に変換します。 フラグ f が
true ならば成功、 false ならば変換失敗です( d の値は保証されません)。 (訳
注: フラグが true の場合でも ‘15.’ 基数プレフィックスを付けずに記述した
場合、 警告が出力されます。 警告が出ないようにするには基数プレフィックス
を付けて下さい ‘#15.’ 、 注意: 負数も受け付けます; "#-15."  s>unumber?
.s <3> -15 -1 -1 ok drop -15 -1 ud.
340282366920938463463374607431768211441 ok
"#340282366920938463463374607431768211441."  s>unumber?  .s <3> -15 -1
-1 ok 3 )

‘>number’ ( ud1 c-addr1 u1 – ud2 c-addr2 u2  ) core “to-number”
   文字列 C-ADDR1 U1 を現在の基数で符号なし2倍長整数に変換しようと試みま
す。 符号なし2倍長整数 UD1 に変換結果を積算して UD2 にします。 変換は、
文字列全体が変換されるか、 現在の基数で変換できない文字( ‘+‘ または ‘-‘
を含む)が検出されるまで、 左から右に続行されます。 変換可能な各文字ごと
に、 UD1 * ‘base’ してから、 次にその文字によって表される値を足しこみま
す( new ud1 = ud1 * base + digit )。 C-ADDR2 は、 最初の未変換文字の位置
です(文字列全体が変換された場合は文字列の末尾以降)。 U2 は、 文字列内の
未変換の文字の数です。 最後まで変換出来たときは 0 です。 オーバーフロー
は検出されません。

‘>float’ ( c-addr u – f:... flag ) floating “to-float”
   実際のスタック効果: ( c_addr u – r t | f )。 文字列 c-addr u を内部浮
動小数点表現に変換しようとします。 文字列が有効な浮動小数点数を表す場合
、 r が浮動小数点スタックに配置され、 flag が true になります。 それ以外
の場合、flag は false になります(訳注: この場合、 浮動小数点数スタックに
は何も積まれない)。 空白の文字列は特殊なケースであり、 浮動小数点数 0 を
表します。

‘>float1’ ( c-addr u c – f:... flag ) gforth-1.0 “to-float1”
   実際のスタック効果: ( c_addr u c – r t | f ) c を小数点として使用して
(訳注: ’.’ が小数点とは限らない。ロケールにより異なるため、指定できるよ
うになっている)、 文字列 c-addr u を内部浮動小数点表現に変換しようと試み
ます。 文字列が有効な浮動小数点数を表す場合、 r が浮動小数点スタックに配
置され、 flag が true になります。 それ以外の場合、flag は false になり
ます(この場合、浮動小数点数スタックには何も積まれません)。 空白の文字列
は特殊なケースであり、浮動小数点数 0 を表します。

   時代遅れ(OBSOLESCENT)の入力ワード群と変換ワード群:

‘convert’ ( ud1 c-addr1 – ud2 c-addr2  ) core-ext-obsolescent “convert”
   時代遅れ(OBSOLESCENT): ‘>number’ に置き換えられました。

‘expect’ ( c-addr +n –  ) core-ext-obsolescent “expect”
   最大 +n 文字の文字列を受け取り、c-addr から始まるメモリに保存します。
文字列は表示されます。 <return>キーを押すか、 +n 文字を受け取ると入力が
終了します。 通常の Gforth 行編集機能が利用可能です。 文字列の長さは
‘span’ に保存されますが、 <return> 文字は含まれません。 時代遅れ
(OBSOLESCENT): ‘accept’ に置き換えられました。

‘span’ ( – c-addr  ) core-ext-obsolescent “span”
   変数(variable) – c-addr は、 ‘expect’ によって最後に受け取った文字列
の長さを格納するセルのアドレスです。 時代遅れ(OBSOLESCENT)。


File: gforth.info,  Node: Pipes,  Next: Xchars and Unicode,  Prev: Line input and conversion,  Up: Other I/O

6.20.9 Pipes
------------

他のプロセスによって作成されたパイプライン(*note Gforth in pipes::)を
Gforth で使用することに加えて、 あなたは ‘open-pipe’ を使用してあなた独
自のパイプラインを作成し、 読み書きすることができます。

‘open-pipe’ ( c-addr u wfam – wfileid wior ) gforth-0.2 “open-pipe”

‘close-pipe’ ( wfileid – wretval wior ) gforth-0.2 “close-pipe”

   パイプラインに書き込む場合、 Gforth は ‘broken-pipe-error’ を throw す
る可能性があります。 あなたが、 この例外をキャッチしない場合、 Gforth は
例外をキャッチして通常は黙って(silently)に終了(exit)します(*note Gforth
in pipes::)。 しかし、 おそらくこれはあなたの望む事ではないので、
‘open-pipe’ から ‘close-pipe’ までのコードを ‘catch’ または ‘try’ ブロッ
クで囲むべきです。 そして、 あなた自身で問題を解決し、 通常の処理に戻し
ます。

‘broken-pipe-error’ ( – n  ) gforth-0.6 “broken-pipe-error”
   壊れたパイプラインのエラー番号


File: gforth.info,  Node: Xchars and Unicode,  Next: i18n and l10n,  Prev: Pipes,  Up: Other I/O

6.20.10 Xchars and Unicode
--------------------------

ASCII は英語(English language)にのみ適しています。 ただし、 ほとんどの西
洋言語(western languages)は、それぞれの少数の特殊文字をエンコードするに
は 1 バイトで十分であるため、 Forth の枠組みにある程度適合します(ただし
、常に同じエンコードを使用できるとは限りません。 ただし、 latin-1 が最も
広く使用されています)。 他の言語の場合は、 異なる文字セットを使用する必
要があり、その一部は可変幅です。 この問題に対処するために、 文字はスタッ
ク上ではユニコード・コードポイント(Unicode codepoints)として表され、 メ
モリ内では UTF-8 バイト文字列として表されることがよくあります。 ユニコー
ド・コードポイントは、 多くの場合、 1 つのアプリケーション・ レベル(one
application-level character)の文字を表しますが、 ユニコードは、基本文字
(base letter)と結合発音記号(combining diacritical mark)など、 複数のコー
ド・ポイントで構成される分解文字(combining diacritical mark)もサポートし
ます。

   ユニコード・コードポイントはメモリ内の複数バイトを消費する可能性があ
るため、 ここで我々の用語をすり合わせしておきましょう: char はメモリ内の
生のバイト、 またはスタック上の 0 ～ 255 の範囲の値です。 xchar
(extended char) は 1 つのコードポイントを表します。 これはメモリ内の 1 バ
イト以上で表され、 スタック上にはより大きな値が存在する可能性があります
。 ASCII 文字は char や xchar と同一です。 つまり、0 ～ 127 の範囲の値、
かつ、 メモリ内のその値を含む 1 バイトです。

   UTF-8 エンコードを使用する場合、 他のすべてのコードポイントは 1 文字
あたり 1 バイト以上必要になります。 ほとんどの場合、 このような文字はメ
モリ内の文字列として扱うだけでよく、 以下のワード群を使用する必要はあり
ませんが、 個々のコードポイントを処理したい場合は、 以下のワード群が役に
立ちます。 現時点では、 分解文字(decomposed characters)を扱うためのワー
ドはありません。

   xchar ワード群はいくつかのデータ型を追加します:

   • XC はスタック上の拡張文字(xchar)です。 これは 1 つのセルを占有し、
     符号なしセルのサブセットです。 16 ビット・システムでは、 ユニコード
     文字セットの BMP サブセット (つまり、 コードポイント<65536)のみがス
     タック上で表現できます。 アプリケーション文字(application
     characters)を常に文字列として表現すると、 この制限を回避できます。

   • XC-ADDR はメモリ内の xchar のアドレスです。 アライメント要件は
     C-ADDR と同じです。 xchar のメモリ表現はスタック表現とは異なり、 使
     用されるエンコーディングによって異なります。 xchar はメモリ内で可変
     数の char を使用できます。

   • XC-ADDR U はメモリ内の xchar のバッファで、XC-ADDR で始まり U char
     (つまり、 xchar ではなくバイト)の長さになります。

‘xc-size’ ( xc – u  ) xchar “x-c-size”
   xchar XC のメモリ・サイズを char で計算します。

‘x-size’ ( xc-addr u1 – u2  ) xchar “x-size”
   XC-ADDR に格納されている最初の xchar のメモリ・サイズを char で計算し
ます。

‘xc@’ ( xc-addr – xc  ) xchar-ext “xc-fetch”
   XC-ADDR1 から xchar XC を取得します。

‘xc@+’ ( xc-addr1 – xc-addr2 xc  ) xchar “x-c-fetch-plus”
   XC-ADDR1 から xchar XC を取得します。 XC-ADDR2 は、 XC の後ろの最初の
メモリ位置を指します。

‘xc@+?’ ( xc-addr1 u1 – xc-addr2 u2 xc  ) gforth-experimental “x-c-fetch-plus-query”
   文字列 XC-ADDR1 U1 の最初の xchar XC を取得します。 XC-ADDR2 U2 は XC
の後ろの残りの文字列です。

‘xc!+?’ ( xc xc-addr1 u1 – xc-addr2 u2 f  ) xchar “x-c-store-plus-query”
   xchar XC を、 アドレス XC-ADDR1 で始まり U1 文字分の大きさであるバッ
ファーに格納します。 XC-ADDR2 は XC の後の最初のメモリ位置を指し、 U2 は
バッファの残りのサイズです。 xchar XC がバッファーに収まった場合、 F は
true、 それ以外の場合は F は false で XC-ADDR2 U2 は XC-ADDR1 U1 と等し
くなります。 ‘XC!+?’ はバッファー・オーバーフローに対して安全であるため
、 ‘XC!+’ よりも推奨されます。

‘xc!+’ ( xc xc-addr1 – xc-addr2  ) xchar “x-c-store”
   xchar XC を XC-ADDR1 に保存します。 XC-ADDR2 は、 バッファ内の次の未
使用アドレスです。 これは最大 4 バイトを書き込むため、 アドレスをバッフ
ァの末尾と照合するだけの場合は、 有用なデータの上書きを避けるために、 バ
ッファの末尾の後に少なくとも 3 バイトの余裕(パディング)が必要であること
に注意してください。

‘xchar+’ ( xc-addr1 – xc-addr2  ) xchar “x-char-plus”
   XC-ADDR1 に格納されている xchar のサイズをこのアドレスに加算し、
XC-ADDR2 を与えます(訳注: つまり、 次の xchar 文字の位置を返す)

‘xchar-’ ( xc-addr1 – xc-addr2  ) xchar-ext “x-char-minus”
   XC-ADDR1 から xchar が見つかるまで逆方向に進み、 この xchar のサイズ
を XC-ADDR2 に加算すると XC-ADDR1 になります。

‘+x/string’ ( xc-addr1 u1 – xc-addr2 u2  ) xchar-ext “plus-x-slash-string”
   アドレス XC-ADDR1 サイズ U1 文字で定義されたバッファーで xchar 1つ分
だけ進めたアドレスを XC-ADDR2 に返します。 u2 は xchar 分だけ u1 より減
ります(残り文字列長さです)。 u2 が 0 になったら末尾まで到達しています。
注意: 0 になってもそこで止まりません更に進んでしまうので注意(長さが負数
になる)

‘x\string-’ ( xc-addr u1 – xc-addr u2  ) xchar-ext “x-backslash-string-minus”
   バッファの最後から開始して、 アドレス XC-ADDR とサイズ U1 (char単位)
で定義されたバッファー内で 1 xchar ずつ後方に進みます。 XC-ADDR は変わら
ず、 U2 は xchar 分ずつ短くなります。 注意: 0 になっても止まりません。そ
のまま長さが負数になっていきます。

‘-trailing-garbage’ ( xc-addr u1 – xc-addr u2  ) xchar-ext “minus-trailing-garbage”
   XC-ADDR U1 というバッファー内の最後の XCHAR を調べます — エンコードが
正しく、 完全な文字を表す場合 U2 は U1 と等しいです。 それ以外の場合は
U2 は、 最後の(文字化けした) xchar を除いた文字列を表します。

‘x-width’ ( xc-addr u – n  ) xchar-ext “x-width”
   アドレス XC-ADDR 長さ U (char単位)の文字列に対して、同じ幅の等幅
ASCII 文字での文字数を N に得ます。 等幅フォントを想定しています。 つま
り文字の幅はいずれも ASCII 文字の幅の整数倍であると仮定します(訳注: 含ま
れる xchar ごとにその表示幅を調べたのを積算して返します buf $@ type abcあ
def ok buf $@len .  9 ok buf $@ x-width .  8 ok)

‘xkey’ ( – xc  ) xchar “x-key”
   端末から xchar を 1 つ読み取ります。 これにより、xchar の読み取りが完
了するまでのすべての入力イベントが破棄されます(訳注: ヒストリ操作は効い
たので…全ての入力イベント…?)。

‘xc-width’ ( xc – n  ) xchar-ext “x-c-width”
   XC の幅は、通常の固定幅グリフ(fixed-width glyph)の幅の N 倍です。

‘xhold’ ( xc –  ) xchar-ext “x-hold”
   ‘<<#’ と ‘#>’ の間で使用されます。 表示数値出力文字列(pictured
numeric output string)の前に XC を追加します。 代替手段としては ‘holds’
を使用することができます。

‘xc,’ ( xchar –  ) xchar “x-c-comma”


File: gforth.info,  Node: i18n and l10n,  Next: Substitute,  Prev: Xchars and Unicode,  Up: Other I/O

6.20.11 国際化(I18n)とローカライズ
----------------------------------

エンド・ユーザー向けのプログラムは、 エンド・ユーザーの母国語に対応する
必要があります。 このような機能については古くから提案があり、 Xchars
(*note Xchars and Unicode::)や Substitute (*note Substitute::) などの国
際文字セットに関する他の提案から分割されました。 画面に表示されるメッセ
ージは、 開発者の母国語(native language)からユーザーの現地言語(local
languages)に翻訳する必要があります(訳注: gforth に最初から組み込まれてい
ないので都度 ‘require i18n.fs’ 等する必要ある。 本マニュアルに掲載が無い
が i18n な 日付用として ‘require i18n-date.fs’ するのもいいかもしれない
)。

   翻訳対象の文字列は ‘L" ’STRING‘"’ で宣言します。 これにより、 ロケー
ル文字列識別子(LSID)が返されます。 LSID は不明瞭なタイプ(opaque types)で
あり、 スタック上のセルとして扱われます。 LSID はロケールに変換できます
。 ロケールは、 言語およびその言語の国固有のバリエーションです。

‘L"’ ( "lsid<">" – lsid  ) gforth-experimental “l-quote”
   文字列が一意に新しい場合は、 文字列をパースし、 新しい lsid を定義し
ます。 同一文字列は同一の lsid となり、 同一文字列を使用して複数の場所か
ら同じ lsid を参照できます。

‘LU"’ ( "lsid<">" – lsid  ) gforth-experimental “l-unique-quote”
   文字列がユニークでない場合でも(重複してても)、 文字列をパースし、 常
に新しい lsid を定義します。

‘native@’ ( lsid – addr u  ) gforth-experimental “native-fetch”
   LSID からネイティブ文字列(native string)を取得します

‘locale@’ ( lsid – addr u  ) gforth-experimental “locale-fetch”
   現在の言語 かつ 現在の国(country)でローカライズされた文字列を取得しま
す

‘locale!’ ( addr u lsid –  ) gforth-experimental “locale-store”
   現在のロケール かつ 現在の国の、 ローカライズされた文字列 ADDR U を
LSID に保存します。

‘Language’ ( "name" –  ) gforth-experimental “Language”
   ロケールを定義します。 そのロケールを実行すると、 それが現在のロケー
ルになります。

‘Country’ ( <lang> "name" –  ) gforth-experimental “Country”
   現在のロケールのバリエーション(通常: 国;country)を定義します。 そのロ
ケールを実行すると、それが現在のロケールになります。 バリエーションのバ
リエーションを作成できます(国によってはバリエーションが存在する場合があ
ります。たとえば、 多くの言語で rolls/buns を表す単語が何語あるかを考え
てください)。

‘locale-file’ ( fid –  ) gforth-experimental “locale-file”
   FID から現在のロケールに行(lines)を読み取ります。

‘included-locale’ ( addr u –  ) gforth-experimental “included-locale”
   ファイル ADDR U から現在のロケールに行(lines)を読み取ります。

‘include-locale’ ( "name" –  ) gforth-experimental “include-locale”
   指定のファイル "NAME" から現在のロケールに行(lines)を読み取ります。

‘locale-csv’ ( "name" –  ) gforth-experimental “locale-csv”
   カンマ区切り値テーブルをロケールにインポートします。 最初の行にはロケ
ール名が含まれます。 “program” と “default” は特別なエントリです。
generic languages は特定の国(specific countries)向けの翻訳よりも優先しな
ければなりません。 “program” の下のエントリ(一番左にある必要があります)
は、 lsid の検索に使用されます。 空の場合、 行番号 1 は lsid インデック
スです。

‘.locale-csv’ ( –  ) gforth-experimental “dot-locale-csv”
   ロケール・データベースを CSV 形式で端末に出力します。

‘locale-csv-out’ ( "name" –  ) gforth-experimental “locale-csv”
   ファイル "NAME" を作成し、 ロケール・データベースを CSV 形式でファイ
ル "NAME" に書き込みます。


File: gforth.info,  Node: Substitute,  Next: CSV Reader,  Prev: i18n and l10n,  Up: Other I/O

6.20.12 Substitute
------------------

これは単純なテキスト・マクロ置換機能です。 ‘"text %macro% text"’ の形式
のテキストが処理され、‘'%'’ で囲まれたマクロ変数が関連する文字列に置き換
えられます。 2 つの連続する ‘%’ は 1 つの ‘%’ に置き換えられます。 マク
ロは特定のワードリストで定義され、実行時に文字列を返します。 標準では、
マクロを宣言する方法が 1 つだけ、 ‘replaces’ のみ定義されています。 これ
は文字列を返すだけのマクロを作成します。

‘macros-wordlist’ ( – wid  ) gforth-experimental “macros-wordlist”
   文字列置換マクロのワードリスト

‘replaces’ ( addr1 len1 addr2 len2 –  ) string-ext “replaces”
   名前が ADDR2 LEN2、 内容が ADDR1 LEN1 のマクロを作成します。 マクロが
既に存在する場合は、 内容を変更するだけです。

‘.substitute’ ( addr1 len1 – n / ior  ) gforth-experimental “dot-substitute”
   テキスト ADDR1 LEN1 内のすべてのマクロを置き換えて、 結果を出力します
。 N は置換した数。 または負数の場合は throw 可能な IOR です。

‘$substitute’ ( addr1 len1 – addr2 len2 n/ior  ) gforth-experimental “string-substitute”
   テキスト ADDR1 LEN1 内のすべてのマクロを置き換えます。 ADDR2 LEN2 が
置換結果で、 N は置換の数で、 負数場合は throw 可能な IOR です。

‘substitute’ ( addr1 len1 addr2 len2 – addr2 len3 n/ior  ) string-ext “substitute”
   テキスト ADDR1 LEN1 内のすべてのマクロを置き換え、 結果を ADDR2 LEN2
にコピーします。 ADDR2 LEN3 は置換結果で、 N は置換した数、または負数場
合は throw 可能な IOR です。

‘unescape’ ( addr1 u1 dest – dest u2  ) string-ext “unescape”
   ADDR1 U1 内のすべての区切り文字を2重にすることで、 置換後の結果が元の
テキストのままになります。 結果を格納するバッファー DEST には長さ指定の
必要が無いことに注意してください。 最悪の場合、 必要な文字数は U1 の 2倍
です。 DEST U2 は結果の文字列の長さです。

‘$unescape’ ( addr1 u1 – addr2 u2  ) gforth-experimental “string-unescape”
   ‘unescape’ と同じですが、 ‘$tmp’ を使用して一時的な結果文字列を作成し
ます。


File: gforth.info,  Node: CSV Reader,  Prev: Substitute,  Up: Other I/O

6.20.13 CSV Reader
------------------

CSV(Comma-separated values)は、 データをやり取りするための一般的なテキス
ト形式です。 Gforth は ‘csv.fs’ でCSVリーダーを提供します(注意: gforth に
最初から組み込まれてはいないので、 都度 ‘require csv.fs’ 等する必要があ
る)。

‘read-csv’ ( addr u xt –  ) gforth-experimental “read-csv”
   CVS ファイル ADDR U を読み取り、 見つかった項目ごとに XT を実行します
。 XT は ‘( addr ucol line -- )’、 つまり文字列と、 現在の列番号(0 で始
まる)と、 現在の行番号(1 で始まる)を受け取ります。


File: gforth.info,  Node: OS command line arguments,  Next: Locals,  Prev: Other I/O,  Up: Words

6.21 OS command line arguments
==============================

コマンドラインで Gforth プログラムに引数を渡す通常の方法は、 ‘-e’ オプシ
ョンを使用することです。 たとえば、

     gforth -e "123 456" foo.fs -e bye

   ただし、 コマンドライン引数を直接パースしたい場合もあります。 その場
合、 ‘next-arg’ を通じて(イメージ固有の)コマンドライン引数にアクセスでき
ます:

‘next-arg’ ( – addr u  ) gforth-0.7 “next-arg”
   OS コマンドラインから次の引数を取得し、 それを消費し addr u に返しま
す。 引数が残っていない場合は、 ‘0 0’ を返します。

   ‘next-arg’ のプログラム例 ‘echo.fs’ を以下に示します:

     : echo ( -- )
         begin
     	next-arg 2dup 0 0 d<> while
     	    type space
         repeat
         2drop ;

     echo cr bye

   これは以下のようにして起動します

     gforth echo.fs hello world

   そうすると以下のように出力されます

     hello world

   以下は、 OS コマンドラインを処理する下位レベルのワード群です:

‘arg’ ( u – addr count  ) gforth-0.2 “arg”
   u 番目のコマンドライン引数の文字列を返します。 u が最後の引数を超えて
いる場合は ‘0 0’ を返します。 ‘0 arg’ は、 Gforth を起動したプログラム名
です。 次の未処理の引数は常に ‘1 arg’ で、 その後の引数は ‘2 arg’ などで
す。 システムによってすでに処理された引数はすべて削除されます。 引数を処
理した後、 ‘shift-args’ を使用して引数を削除できます。

‘shift-args’ ( –  ) gforth-0.7 “shift-args”
   ‘1 arg’ が削除され、 後続のすべての OS コマンドライン・パラメータが 1
だけ左にシフトされ、‘argc @’ が減ります。 このワードは ‘argv @’ を変更で
きます。

   最後に、 Gforth は最下位レベルで以下のワード群を提供します:

‘argc’ ( – addr  ) gforth-0.2 “argc”
   変数(‘Variable’) – コマンドライン引数の数(コマンド名を含む)。
‘next-arg’ と ‘shift-args’ によって変更されます。

‘argv’ ( – addr  ) gforth-0.2 “argv”
   変数(‘Variable’) – コマンドライン引数 (コマンド名を含む) へのポインタ
ーのベクトル(vector)へのポインター。 各引数は、 C言語スタイルのゼロで終
わる文字列として表されます。 ‘next-arg’ と ‘shift-args’ によって変更され
ます。


File: gforth.info,  Node: Locals,  Next: Structures,  Prev: OS command line arguments,  Up: Words

6.22 Locals
===========

ローカル変数を使用すると、 Forth プログラミングがより楽しくなり、 Forth
プログラムが読みやすくなります。 残念ながら、 標準 Forth の ローカル変数
には制限がたくさんあります。 したがって、 標準 Forth のローカル変数ワー
ドセットだけでなく、 Gforth 独自のより強力なローカル変数ワードセットも提
供します(標準Forthのローカル変数ワードセットは、 Gforth のローカル変数ワ
ードセットで実装しました)。

   このセクションのアイデアは、 M. Anton Ertl, ‘Automatic Scoping of
Local Variables
(https://www.complang.tuwien.ac.at/papers/ertl94l.ps.gz)’, EuroForth ’94
でも公開されています。

* Menu:

* Gforth locals::
* Standard Forth locals::


File: gforth.info,  Node: Gforth locals,  Next: Standard Forth locals,  Prev: Locals,  Up: Locals

6.22.1 Gforth locals
--------------------

ローカル変数は以下のように定義できます

     {: local1 local2 ... -- comment :}
   or
     {: local1 local2 ... :}
   or
     {: local1 local2 ... | ulocal0 ulocal1 -- comment :}

   例えば、 以下のように使います
     : max {: n1 n2 -- n3 :}
      n1 n2 > if
        n1
      else
        n2
      endif ;

   ローカル変数定義とスタック・コメントは、 類似するよう意図しています。
ローカル変数定義は、 多くの場合、 ワードのスタック・コメントを置き換えま
す。 ローカル変数の順序はスタック・コメント内の順序に対応し、 ‘--’ 以降
はすべて実際はコメントです。

   この類似性には 1 つ欠点があります。 ローカル変数宣言とスタック・コメ
ントを混同しやすく、 バグが発生し、 見つけにくくなります。 ただし、 この
問題は適切なコーディング規約によって回避できます。 同じプログラム内で両
方の表記法を使用しないでください。 そうする場合は、 追加の手段を使用して
区別する必要があります。 例えば、 場所によって区別します。

   ローカルの名前の前に型指定子を付けることができます。 たとえば、浮動小
数点値の場合は ‘F:’ です:

     : CX* {: F: Ar F: Ai F: Br F: Bi -- Cr Ci :}
     \ 複素数の掛け算
      Ar Br f* Ai Bi f* f-
      Ar Bi f* Ai Br f* f+ ;

   Gforth は現在、 セル型指定子(‘W:’, ‘WA:’, ‘W^’)や、 2倍長整数型指定子
(‘D:’, ‘DA:’, ‘D^’)や、 浮動小数点数型指定子(‘F:’, ‘FA:’, ‘F^’)と、 さま
ざまなフレーバーの xt 型指定子(‘xt:’, ‘xta:’)、 をサポートしています:

“valueフレーバー(value-flavoured)”
     (*note Values::) valueフレーバーのローカル変数(‘W:’、 ‘D:’ などで定
     義)はその値を生成し、 ‘TO’ で変更できます。

“varueフレーバー(vaLue ではなくて vaRue)”
     (*note Varues::) varueフレーバーのローカル変数 foo (‘WA:’ などで定
     義) は、 ‘addr foo’ を使用してアドレスを取得できること(変数のスコー
     プを離れると無効になります)を除いて、 valueフレーバーのローカル変数
     とまったく同じように振る舞います。 現時点ではパフォーマンスに違いは
     ありませんが、 長期的には、 valueフレーバーのローカル変数はレジスタ
     に常駐できるため、 大幅に高速になるでしょう。

“variableフレーバー”
     (*note Variables::) variableフレーバーのローカル変数(‘W^’ などで定
     義)はそのアドレスを生成します(変数のスコープを離れると無効になりま
     す)。 たとえば、 標準のワード ‘emit’ は、 以下のように variableフレ
     ーバーのローカル変数(‘C^ char*’) と ‘type’ で定義できます:

          : emit {: C^ char* -- :}
              char* 1 type ;

“deferフレーバー(defer-flavoured)”
     (*note Deferred Words::) (‘XT:’ または ‘XTA:’ と指定した) defer フ
     レーバーのローカル変数 xt を ‘execute’ します。 ‘action-of’ を使用
     すると、 defer フレーバーのローカル変数から xt を取得できます。 ロ
     ーカル変数が ‘xta:’ で定義されている場合、 ‘addr’ を使用して、 xt が
     保存されているアドレス(ローカル変数のスコープの終わりまで有効)を取
     得できます。 たとえば、 標準のワード ‘execute’ は、 以下のように
     defer フレーバーのローカル変数で定義できます:

          : execute {: xt: x -- :}
            x ;

   型指定子のないローカル変数は ‘W:’ ローカル変数として扱われます。 以下
を使用して ‘addr’ の使用を許可または禁止できます:

‘default-wa:’ ( –  ) gforth-experimental “default-wa:”
   型指定子なしで定義されたローカル変数で ‘addr’ を許可します。 言い換え
れば、 型指定子無しでローカル変数定義したときは ‘wa:’ 型指定子を指定した
のと同じです

‘default-w:’ ( –  ) gforth-experimental “default-w:”
   型指定子なしで定義されたローカル変数では ‘addr’ を禁止します。 言い換
えれば、 型指定子なしで定義されたローカル変数は ‘w:’ 型指定子を指定して
ローカル変数を定義したのと同じです。

   ‘|’ の後ろで定義されたローカル変数を除いて、 ローカル変数の全てのフレ
ーバーは、 データ・スタックの値または、 (FP ローカル変数の場合) FP スタ
ックの値で初期化されます。 Gforth は ‘|’ の後ろで定義されたローカル変数
を 0 に初期化します。 一部の Forth システムでは初期化されないままになっ
ています。

   Gforth は、 ローカル・バッファーとデータデータ構造体のための角括弧
(square bracket)表記をサポートしています。 これらのローカル変数は
variableフレーバー のローカル変数に似ており、 サイズは定数式として指定し
ます。 宣言は ‘name[ size ]’ のようになります。 Forth の式 ‘size’ は宣言
中に評価され、 サイズをバイト単位で指定するスタック効果 ‘( -- +n )’ が必
要です。 角括弧 ‘[’ は定義された名前の一部です。

   ローカルのデータ構造体は、 データ・スタックに渡されたアドレスから
size バイトをコピーすることによって初期化されます。 (宣言内の ‘|’ の後の
、)初期化されていないローカルのデータ構造体は消去されず、 以前にローカル
・スタックにあったデータをすべて含むだけです。

   Example:

     begin-structure test-struct
       field: a1
       field: a2
     end-structure

     : test-local {: foo[ test-struct ] :}
         foo[ a1 !  foo[ a2 !
         foo[ test-struct dump ;

   Gforth では、コロン定義内のあらゆる場所でローカル変数を定義できます。
これにより、 以下のような疑問が生じます:

* Menu:

* Locals definition words::
* Where are locals visible by name?::
* How long do locals live?::
* Locals programming style::
* Locals implementation::
* Closures::


File: gforth.info,  Node: Locals definition words,  Next: Where are locals visible by name?,  Prev: Gforth locals,  Up: Gforth locals

6.22.1.1 Locals definitions words
.................................

このセクションでは、 ローカル変数を定義するために使用されるワード群を説
明します。 注意: ローカル変数を定義するワード(‘W:’ など)の実行時は、 右
端のローカル変数定義から左端のローカル変数定義の方向で実行され、 右端の
ローカル変数がスタックのTOSから得る事になることに注意してください。

‘{:’ ( – hmaddr u latest latestnt wid 0  ) local-ext “open-brace-colon”
   ローカル変数定義の開始。

‘--’ ( hmaddr u latest latestnt wid 0 ... –  ) gforth-0.2 “dash-dash”
   ローカル変数定義中の ‘--’ から ‘:}’ までのすべてが無視されます。 これ
は通常、 ローカル変数定義をスタック効果の説明としても使えるよう、 一人二
役の役割を持たせる場合に使います。

‘|’ ( –  ) gforth-1.0 “bar”
   ‘|’ の後ろで定義されたローカル変数はスタックから初期化されません。 し
たがって、 ‘W:’ のようなワードの実行時のスタック効果 ‘( -- )’ に変わりま
す。

‘:}’ ( hmaddr u latest latestnt wid 0 xt1 ... xtn –  ) gforth-1.0 “colon-close-brace”
   ローカル変数定義の終了。

‘{’ ( – hmaddr u latest latestnt wid 0  ) gforth-0.2 “open-brace”
   ローカル変数定義を開始します。 このワードの Forth-2012 標準名は ‘{:’
です。

‘}’ ( hmaddr u latest latestnt wid 0 xt1 ... xtn –  ) gforth-0.2 “close-brace”
   ローカル変数定義を終了します。 このワードの Forth-2012 標準名は ‘:}’
です。

‘W:’ ( compilation "name" – a-addr xt; run-time x –  ) gforth-0.2 “w-colon”
   valueフレーバーのセル・ローカル変数 name を定義します ‘( -- x1 )’

‘WA:’ ( compilation "name" – a-addr xt; run-time x –  ) gforth-1.0 “w-a-colon”
   varueフレーバーのセル・ローカル変数 name を定義します ‘( -- x1 )’

‘W^’ ( compilation "name" – a-addr xt; run-time x –  ) gforth-0.2 “w-caret”
   variableフレーバーのセル・ローカル変数 name を定義します ‘( -- a-addr
)’

‘D:’ ( compilation "name" – a-addr xt; run-time x1 x2 –  ) gforth-0.2 “d-colon”
   valueフレーバーの2倍長整数ローカル変数 name を定義します ‘( -- x3 x4
)’

‘DA:’ ( compilation "name" – a-addr xt; run-time x1 x2 –  ) gforth-1.0 “w-a-colon”
   varueフレーバーの2倍長整数ローカル変数 name を定義します ‘( -- x3 x4
)’

‘D^’ ( compilation "name" – a-addr xt; run-time x1 x2 –  ) gforth-0.2 “d-caret”
   variableフレーバーの2倍長整数ローカル変数 name を定義します ‘( --
a-addr )’

‘C:’ ( compilation "name" – a-addr xt; run-time c –  ) gforth-0.2 “c-colon”
   valueフレーバーの char ローカル変数 name を定義します ‘( -- c1 )’

‘CA:’ ( compilation "name" – a-addr xt; run-time c –  ) gforth-1.0 “c-a-colon”
   varueフレーバーの char ローカル変数 name を定義します ‘( -- c1 )’

‘C^’ ( compilation "name" – a-addr xt; run-time c –  ) gforth-0.2 “c-caret”
   variableフレーバーの char ローカル変数 name を定義します ‘( -- c-addr
)’

‘F:’ ( compilation "name" – a-addr xt; run-time r –  ) gforth-0.2 “f-colon”
   valueフレーバーの浮動小数点数ローカル変数 name を定義します ‘( -- r1
)’

‘FA:’ ( compilation "name" – a-addr xt; run-time f –  ) gforth-1.0 “f-a-colon”
   varueフレーバーの浮動小数点数ローカル変数 name を定義します ‘( -- r1
)’

‘F^’ ( compilation "name" – a-addr xt; run-time r –  ) gforth-0.2 “f-caret”
   variableフレーバーの浮動小数点数ローカル変数 name を定義します ‘( --
f-addr )’

‘XT:’ ( compilation "name" – a-addr xt; run-time xt1 –  ) gforth-1.0 “x-t-colon”
   deferフレーバーのセル・ローカル変数 name を定義します ‘( ... -- ...
)’

‘XTA:’ ( compilation "name" – a-addr xt; run-time ... – ...  ) gforth-1.0 “x-t-a-colon”
   ‘addr’ を使用できる defer フレーバーのローカル変数 name を定義します
。

   ‘|’ や ‘--’ や ‘:}’ や ‘}’ は通常、 検索順序スタック(the search
order)に含まれないことに注意してください(これらは ‘locals-types’ ボキャ
ブラリに含まれます)。 そしてこれらは必ずしも全ての Forth システムでワー
ドとして存在しているわけではありません。 したがって、 これらは Gforth の
ワードとして文書化されています。


File: gforth.info,  Node: Where are locals visible by name?,  Next: How long do locals live?,  Prev: Locals definition words,  Up: Gforth locals

6.22.1.2 Where are locals visible by name?
..........................................

ローカル変数をその名前によって可視できるのはどこまででしょうか？ – 基本
的に、 その答えは、 ローカル変数がブロック構造言語で期待される場所で、 場
合によってはもうちょっとだけ長くできます。 ローカル変数のスコープを制限
したい場合は、 その定義を ‘SCOPE’...‘ENDSCOPE’ で囲んで下さい。

‘scope’ ( compilation  – scope ; run-time  –  ) gforth-0.2 “scope”

‘endscope’ ( compilation scope – ; run-time  –  ) gforth-0.2 “endscope”

   これらのワードは制御構造のワードのように動作するため、 ‘CS-PICK’ およ
び ‘CS-ROLL’ とともに使用して、 任意の方法で範囲を制限できます。

   可視性の質問に対するより正確な答えが必要な場合のために、 ここで基本原
則を示します: ローカル変数は、 ローカル変数の定義を通じてのみ到達できる
すべての場所で可視です(1)。 つまり、 ローカル変数という定義を経由しない
と到達できる場所では不可視です。 たとえば、 ‘IF’...‘ENDIF’ の中で定義さ
れたローカル変数は ‘ENDIF’ まで可視で、 ‘BEGIN’...‘UNTIL’ 内で定義された
ローカル変数は ‘UNTIL’ の後(たとえば、後続の ‘ENDSCOPE’ まで)で可視です
。

   このソリューションの背景にある理由は次のとおりです: 私達は、 意味があ
る限り、 ローカル変数を可視させたいと考えています。 ユーザーは、 明示的
なスコープを使用することで、 いつでも可視性を短くすることができます。 ロ
ーカル変数の定義によってのみ到達できる場所では、 ローカル変数名の意味は
明らかです。 他の場所ではそうではありません。 ローカル変数定義が含まれて
いない制御フロー・パスでローカル変数はどのように初期化されるのでしょうか
？ 2 つの独立した制御フロー パスで同一ローカル変数名が 2 回定義されてい
る場合、 それはどちらのローカル変数を意味するのでしょうか？

   上記で、 ほぼすべてのユーザーにとって十分詳細であるため、 このセクシ
ョンの残りの部分はスキップしてかまいません。 本当にすべての血みどろの詳
細とオプションを知る必要がある場合は、 以下を読み続けてください。

   このルールを実装するには、 コンパイラはどの場所が到達不能
(unreachable)であるかを認識する必要があります。 ‘AHEAD’ や ‘AGAIN’ や
‘EXIT’ や ‘LEAVE’ の後で、 これが自動的に認識されます。 他の場合(例: ほ
とんどの ‘THROW’ の後)、 ‘UNREACHABLE’ というワードを使用して、 制御フロ
ーがその場所に到達しないことをコンパイラに伝えることができます。
‘UNREACHABLE’ が使用できる場所で使用されなかった場合、 唯一の結果は、 一
部のローカル変数の可視性が上記のルールに記載されているよりも制限されるこ
とです。 ‘UNREACHABLE’ を使用すべきではない場所で使用すると(つまり、 コ
ンパイラに嘘をついた場合)、 バグのあるコードが生成されます。

‘UNREACHABLE’ ( –  ) gforth-0.2 “UNREACHABLE”

   このルールのもう 1 つの問題は、 ‘BEGIN’ で、 どのローカル変数が
incoming back-edge で可視されるかをコンパイラが認識できないことです。 以
下で説明するすべての問題は、 コンパイラのこの無知が原因です(‘BEGIN’ ルー
プを例として使用してこの問題について説明します。 この説明は ‘?DO’ および
他のループにも当てはまります)。 おそらく最も陰険な例は以下のとおりです:
     AHEAD
     BEGIN
       x
     [ 1 CS-ROLL ] THEN
       {: x :}
       ...
     UNTIL

   これは、 可視性ルールに従って合法である必要があります。 ‘x’ の使用に
は、 定義を介してのみ到達できます。 ただし、 下記に明示した使用法でなけ
ればなりません。

   この例から、 可視性ルールを完全に実装するには大きな問題が伴うことが明
らかです。 私たちの実装は、 一般的なケースを宣伝どおりに扱い、 例外は安
全な方法で処理されます。 コンパイラは、 ‘BEGIN’ の後に可視できるローカル
変数について合理的な推測を行います。 悲観的すぎると、 ローカル変数が定義
されていないという偽のエラーがユーザーに表示されます。 コンパイラが楽観
的すぎる場合、 後でこれに気づき、 警告を発行します。 上記の場合、 コンパ
イラは ‘x’ が使用時に未定義であることについて文句を言います。 このセクシ
ョンのあいまいな例から、 コンパイラをトラブルに陥らせるには非常に特殊な
制御構造が必要であることがわかりますが、 それでもコンパイラは多くの場合
問題なく動作します。

   ‘BEGIN’ がそれより上から到達可能な場合、 最も楽観的な推測は、 ‘BEGIN’
の前に可視であるすべてのローカル変数も ‘BEGIN’ の後にも可視であることで
す。 この推測は、 ‘BEGIN’ 経由でのみ入るすべてのループ、 特に通常の
‘BEGIN’...‘WHILE’...‘REPEAT’ および ‘BEGIN’...‘UNTIL’ ループに対して有効
であり、 コンパイラに実装されています。 ‘BEGIN’ への分岐が ‘AGAIN’ また
は ‘UNTIL’ によって最終的に生成されると、 コンパイラは推測をチェックし、
それが楽観的すぎる場合はユーザーに警告します:
     IF
       {: x :}
     BEGIN
       \ x ?
     [ 1 cs-roll ] THEN
       ...
     UNTIL

   ここで、 ‘x’ は ‘BEGIN’ までのみ存続しますが、 コンパイラは ‘THEN’ ま
で存続すると楽観的に想定します。 ‘UNTIL’ をコンパイルするときにこの違い
に気づき、 警告を発行します。 ユーザーは警告を回避し、 明示的なスコープ
を使用して ‘x’ が間違った領域で使用されていないことを確認できます:
     IF
       SCOPE
       {: x :}
       ENDSCOPE
     BEGIN
     [ 1 cs-roll ] THEN
       ...
     UNTIL

   推測は楽観的であるため、 未定義のローカル変数に関する偽のエラー・メッ
セージは表示されません。

   ‘BEGIN’ がそれより上から到達可能でない場合(たとえば、 ‘AHEAD’ または
‘EXIT’ の後)、 ‘BEGIN’ の後で定義されたローカル変数の可視については、 コ
ンパイラは楽観的な推測を行うことさえできません。

   悲観的に、 制御構造の外側の最新の場所(つまり、 制御フロー・スタック上
に何もない場所)で可視であったすべてのローカル変数が可視であると仮定しま
す。 これは以下のことを意味します:

     : foo
       IF {: z :} THEN
       {: x :}
       AHEAD
         BEGIN
           ( * )
         [ 1 CS-ROLL ] THEN
         {: y :}
         ...
       UNTIL ;

   ここで、 ‘( * )’ でマークされた場所では、 ‘x’ は可視ですが、 ‘y’ は不
可視です(ただし、 到達可能性ルールによれば、 可視であるべきです)。 ‘z’ は
そこでは不可視で、 可視であるべきではありません。

   ただし、 ‘ASSUME-LIVE’ を使用すると、 最上位の制御フロー・スタック項
目が作成された時点と同じローカル変数が BEGIN で可視になるのだと、 コンパ
イラに想定させることができます。

‘ASSUME-LIVE’ ( orig – orig  ) gforth-0.2 “ASSUME-LIVE”

例えば、 以下のように使います
     IF
       {: x :}
       AHEAD
         ASSUME-LIVE
         BEGIN
           x
         [ 1 CS-ROLL ] THEN
         ...
       UNTIL
     THEN

   ここで、 ‘x’ のローカル変数定義は制御構造内にあるため、 ‘x’ を使用し
た時点では ‘x’ は可視ではありませんが、 ‘ASSUME-LIVE’ を使用することで、
プログラマはコンパイラに ‘AHEAD’ の時点で可視である、 そのローカル変数が
、 ‘BEGIN’ の時点でも可視であるべきであると伝えます。

   ‘BEGIN’ の前にローカル変数が定義されている他のケースは、
‘ASSUME-LIVE’ の前に適切な ‘CS-ROLL’ を挿入する(そして ‘ASSUME-LIVE’ の
背後にある制御フロー・スタック操作を変更する)ことで処理できます。

   ローカル変数が ‘BEGIN’ の後で定義されている場合(ただし、 ‘BEGIN’ の直
後で可視である必要があります)は、 ループを再配置することによってのみ処理
できます。 たとえば、上記の「最も陰険な」例は以下のように整理できます:
     BEGIN
       {: x :}
       ... 0=
     WHILE
       x
     REPEAT

   ---------- Footnotes ----------

   (1) コンパイラ構築用語では「すべての場所はローカル変数の定義によって
支配される」と言う


File: gforth.info,  Node: How long do locals live?,  Next: Locals programming style,  Prev: Where are locals visible by name?,  Up: Gforth locals

6.22.1.3 How long do locals live?
.................................

ローカル変数の生存期間はどのくらいなのか？ – 生存期間に関する質問に対す
る正しい答えは、次のとおりです: ローカル変数は、 少なくともアクセスでき
る限りは生存します。 valueフレーバーのローカル変数の場合、 これは、 その
可視性が終了するまでを意味します。 ただし、 variableフレーバーのローカル
変数は、可視性の範囲をはるかに超えてアドレスを通じてアクセスできる可能性
があります。 結局のところ、 これはそのようなローカル変数がガベージ・コレ
クションを受けなければならないことを意味します。 これには、Forth らしく
ない実装の複雑さが伴うため、 他の言語(C言語など)と同じ引っ込み思案な解決
策を採用しました。 つまり、 ローカル変数は、 それが可視である間のみ生存
します。その後、そのアドレスは無効になります(そして、 その後そのアドレス
にアクセスするプログラムはエラーになります)。


File: gforth.info,  Node: Locals programming style,  Next: Locals implementation,  Prev: How long do locals live?,  Up: Gforth locals

6.22.1.4 Locals programming style
.................................

どこでもローカル変数を定義できる自由は、 プログラミング・スタイルを劇的
に変える可能性を秘めています。 特に、 中間ストレージにリターン・スタック
を使用する必要がなくなります。 さらに、 すべてのスタック操作(実行時に決
定される引数を持つ ‘PICK’ や ‘ROLL’ を除く)を排除できます。 スタック項目
の順序が間違っている場合は、 すべてのスタック項目のローカル変数定義を記
述し、 その次に、 あなたが必要とする順序で項目を書き込むだけです。

   これは少し突飛なように思えますし、 スタック操作を排除することが意識的
なプログラミング目標になる可能性は低いです。 それでも、 ローカル変数を積
極的に使用すれば、 スタック操作の数は大幅に減少します(例: ‘max’ (*note
Gforth locals::) を ‘max’ の従来の実装と比較してみましょう)。

   これは、 ローカル変数の潜在的な利点の 1 つ、 つまり Forth プログラム
を読みやすくすることを示しています。 もちろん、 この利点は、 プログラマ
がワードを長ったらしく書くための自由度を追加する訳ではなく、 ファクタリ
ング(因数分解)の原則を尊重し続けた場合にのみ実現されます。

   ‘TO’ の使用は可能な限り避けるべきです。 ‘TO’ がない場合、 すべての
valueフレーバーのローカル変数には 1 つの代入しかなく、 関数型言語の多く
の利点が Forth に当てはまります。 つまり、 プログラムの分析・最適化・読
み取りが容易になります。 ローカル変数が何を表すかは定義から明らかであり
、 後で別のものに変わることはありません。

   たとえば、 ‘TO’ を使用したローカル変数定義は以下のようになります:
     : strcmp {: addr1 u1 addr2 u2 -- n :}
      u1 u2 min 0
      ?do
        addr1 c@ addr2 c@ -
        ?dup-if
          unloop exit
        then
        addr1 char+ TO addr1
        addr2 char+ TO addr2
      loop
      u1 u2 - ;
   ここで、 ‘TO’ は、 ループの反復ごとに ‘addr1’ と ‘addr2’ を更新するた
めに使用されます。 ‘strcmp’ は、‘TO’ の使用による可読性の問題の典型的な
例です。 ‘strcmp’ を読み始めると、 ‘addr1’ が文字列の先頭を指していると
考えるでしょう。 ループの終わり近くになって初めて、 それが何か別のもので
あることがわかります。

   これは、 現在の反復に適切な値で初期化される 2 つのローカル変数をルー
プの開始時に定義することで回避できます。
     : strcmp {: addr1 u1 addr2 u2 -- n :}
      addr1 addr2
      u1 u2 min 0
      ?do {: s1 s2 :}
        s1 c@ s2 c@ -
        ?dup-if
          unloop exit
        then
        s1 char+ s2 char+
      loop
      2drop
      u1 u2 - ;
   ここで、 ‘s1’ がループの反復ごとに異なる値を持つことは最初から明らか
です。


File: gforth.info,  Node: Locals implementation,  Next: Closures,  Prev: Locals programming style,  Up: Gforth locals

6.22.1.5 Locals implementation
..............................

Gforth は追加のローカル変数用スタック(ローカル・スタック)を使用します。
この最も説得力のある理由は、 リターン・スタックが浮動小数点数に整列され
ていないことです。 この追加のスタックを使用すると、 リターン・スタックを
ローカル変数用スタックとして使用する場合の問題や制限も解消されます。 他
のスタックと同様に、 ローカル・スタックは下位アドレスに向かって成長しま
す。 いくつかのプリミティブにより効率的な実装になっています。 あなたは、
これらを直接使用するべきではありませんが、 ‘see’ の出力には表示されるた
め、 以下に文書化しておきます:

‘@localn’ ( noffset – w ) gforth-internal “fetch-local-n”
\ 訳注: ローカル・スタックのTOSを0として noffset 番目のコピーをデータ・スタックに積む

‘f@localn’ ( noffset – r ) gforth-1.0 “f-fetch-local-n”

‘lp@’ ( – c-addr ) gforth-0.2 “lp-fetch”
   C_addr は、 ローカル・スタック・ポインタの現在の値です。

   doc-lp+!#(訳注: まだ説明書いて無いっぽい)
‘lp!’ ( c-addr – ) gforth-internal “lp-store”

‘>l’ ( w – ) gforth-0.2 “to-l”
\ 訳注: w をローカル・スタックにプッシュ

‘f>l’ ( r – ) gforth-0.2 “f-to-l”

   これらのプリミティブに加えて、 一般的に発生するインライン引数に対する
これらのプリミティブのいくつかの特殊化が、 効率上の理由から提供されてい
ます(例: ‘0 @localn’ の特殊化として ‘@local0’ )。 以下のコンパイル・ワー
ド(compiling words)は、 適切な特殊バージョン、 または一般バージョンを適
切にコンパイルします(訳注: ‘@local0’ シリーズは、 ‘@local0’ ローカル・ス
タックのTOS(のコピー)をスタックに積む、 ‘@local1’ ローカル・スタックの
2nd(のコピー)をスタックに積む、 〜 ‘@local4’ まである):

‘compile-lp+!’ ( n –  ) gforth-0.2 “compile-l-p-plus-store”

   ‘?branch-lp+!#’ のような、 条件分岐と ‘lp+!#’ の組み合わせ(ローカル・
スタック・ポインタは分岐が選択された場合にのみ変更されます)は、 ループの
効率と正確性のために提供されています。

   ディクショナリ空間内の特別な領域が、 ローカル変数名を保持するために予
約されています。 ‘{:’ はディクショナリ・ポインタをこの領域に切り替え、
‘:}’ はそれを元に戻し、 ローカル変数の初期化コードを生成します。 ‘W:’ な
どは通常の定義ワードです。 この特別な領域は、 すべてのコロン定義の先頭で
クリアされます。

   Gforth のディクショナリの特別な機能は、 型指定子なしでローカルの定義
を実装するために使用されます。 すべてのワードリスト(別名ボキャブラリ)に
は、 検索などのための独自のメソッド(methods)があります (*note Word
Lists::)。 型指定子なしでローカルの定義を実装するという目的のために、 私
達は特別な検索メソッドを使用してワードリストを定義しました。 ワードが検
索されると、 実際には ‘W:’ を使用してそのワードが作成されます。 ‘{:’ は
、 最初に ‘:}’ や ‘W:’ などを含むワードリストで検索し、 次に型指定子のな
いローカル変数を定義するためのワードリストで検索するよう検索順序スタック
(the search order)を変更します。

   ライフタイム・ルールは、 コロン定義内のスタック規律(stack
discipline)をサポートします。 ローカル変数のライフタイムは、 他のローカ
ル変数のライフタイムと入れ子になっているか、 他のローカル変数のライフタ
イムと重ならないか、 です。

   ‘BEGIN’ や ‘IF’ や ‘AHEAD’ では、 ローカル・スタック・ポインター操作
のコードは生成されません。 制御構造のワード間で、 ローカル変数定義はロー
カル変数をローカル・スタックにプッシュできます。 ‘AGAIN’ は、 他の 3 つ
の制御フローワードとの中で最も単純です。 分岐する前に、 対応する ‘BEGIN’
のローカル・スタックの深さを復元する必要があります。 そのコードは以下の
ようになります:
‘lp+!#’ current-locals-size − dest-locals-size
‘branch’ <begin>

   ‘UNTIL’ はもう少し複雑です。 分岐して戻る場合は、 ‘AGAIN’ と同じよう
にローカル・スタックを調整する必要があります。 ただし、 戻らずにその後ろ
へ流れる場合は、 ローカル・スタックを変更してはなりません。 コンパイラは
以下のコードを生成します:
‘?branch-lp+!#’ <begin> current-locals-size − dest-locals-size
   ローカル・スタック・ポインタは、 分岐が行われた場合にのみ調整されます
。

   ‘THEN’ は、 やや非効率なコードを生成する可能性があります:
‘lp+!#’ current-locals-size − orig-locals-size
<orig target>:
‘lp+!#’ orig-locals-size − new-locals-size

   2 番目の ‘lp+!#’ は、 ローカル・スタック・ポインタを orig 時点のレベ
ルから ‘THEN’ の後のレベルに調整します。 最初の ‘lp+!#’ は、 ローカル・
スタック・ポインタを現在のレベルから orig 時点のレベルに調整するため、 完
全な効果は、‘THEN’ の後の現在のレベルから正しいレベルに調整されることに
なります。

   従来の Forth の実装では、 dest 制御フロー・スタック・エントリはターゲ
ット・アドレスにすぎず、 orig エントリはパッチ当てされるアドレスにすぎま
せん。 ローカル変数の実装は、 すべての orig または dest 項目にワードリス
トを追加します。 これは、 エントリによって記述された時点で可視である(ま
たは可視である想定される)ローカル変数のリストです。 私たちの実装では、 エ
ントリの種類を識別するためのタグも追加します。 特に、 生きているのと死ん
でいるエントリ(到達可能なエントリと到達不可能なエントリ)を区別するためで
す。

   ローカル変数のワードリストに対して、 いくつかの珍しい操作を実行する必
要があります:

‘common-list’ ( list1 list2 – list3  ) gforth-internal “common-list”

‘sub-list?’ ( list1 list2 – f  ) gforth-internal “sub-list?”

‘list-size’ ( list – u  ) gforth-internal “list-size”

   ローカル変数のワードリスト実装のいくつかの機能により、 これらの操作の
実装が簡単になります。 ローカル変数のワードリストはリンクされたリストと
して編成されます。 リストに同一のローカル変数が含まれている場合、 これら
のリストの末尾は共有されます。 名前のアドレスは、 リスト内でその後ろにあ
る名前のアドレスよりも大きくなります。

   もう 1 つの重要な実装の詳細は、 変数 ‘dead-code’ です。これは、
‘BEGIN’ と ‘THEN’ によって直接到達できるか、 解決するブランチ経由でのみ
到達できるかを判断するために使用されます。 ‘dead-code’ は ‘UNREACHABLE’
や ‘AHEAD’ や ‘EXIT’ などによって設定され、 コロン定義の先頭 や ‘BEGIN’
や 通常は ‘THEN’ によってクリアされます。.

   カウンタ付きループはほとんどの点で他のループと似ていますが、 ‘LEAVE’
には特別な注意が必要です。 基本的に ‘AHEAD’ と同じサービスを実行しますが
、 制御フロー・スタック・エントリは作成されません。 したがって、 情報は
別の場所に保存する必要があります。 従来、 情報は ‘LEAVE’ によって作成さ
れたブランチのターゲット・フィールドに、 これらのフィールドをリンク・リ
ストに編成することによって格納されていました。 残念ながら、 この巧妙なト
リックでは、 拡張制御フロー情報を保存するための十分なスペースが提供され
ません。 したがって、 別のスタックである Leave スタックを導入します。 こ
れには、 すべての未解決の ‘LEAVE’ の制御フロー・スタック・エントリが含ま
れています。

   ローカル変数名は、 どの制御フロー経路にも表示されなくなった場合でも、
コロン定義の終わりまで保持されます。 場合によっては、 これによりローカル
変数の名前領域に必要な領域が増加する可能性がありますが、 通常はこの領域
を再利用するよりもコード量にかかるコストは少なくなります。


File: gforth.info,  Node: Closures,  Prev: Locals implementation,  Up: Gforth locals

6.22.1.6 Closures
.................

Gforth は基礎的なクロージャ(closure)も提供します。 クロージャは、 引用
(quotation)(*note Quotations::)とローカル変数の組み合わせです。 Gforth の
クロージャには、 クロージャの実行時に値が入力されるローカル変数があり、
トランポリン xt (trampoline xt)が生成されます。 そのトランポリン xt を
execute すると、 ローカル・スタック上のクロージャのローカル変数にアクセ
スして、 クロージャのコードが実行されます。 クロージャのローカル変数の変
更は永続的ではありません。 つまり、 クロージャが ‘EXIT’ されると、 変更
された値は失われます。

‘[{:’ ( – hmaddr u latest latestnt wid 0  ) gforth-experimental “start-closure”
   クロージャを開始します。 クロージャはまず、 クロージャのために使用す
るローカル変数フレームを宣言し、 次にそれらのローカル変数で実行されるコ
ードを宣言します。 クロージャは引用(quotations)のように ‘;]’ で終わりま
す。 ローカル宣言は、 クロージャ・ローカルが作成される場所に応じて終了し
ます。 実行時、 クロージャは トランポリン xt として作成され、 スタックか
らローカル変数・フレームの値を埋めます。 xt の実行時に、 ローカル変数・
フレームがローカル・スタックにコピーされ、 クロージャのコード内で使用さ
れます。 戻った後、 これらの値はローカル・スタックから削除され、 クロー
ジャ自体は更新されません。

‘:}l’ ( hmaddr u latest latestnt wid 0 a-addr1 u1 ... –  ) gforth-1.0 “close-brace-locals”
   クロージャ・ローカルの宣言を終了します。 クロージャはローカル・スタッ
クに割り当てられます。

‘:}d’ ( hmaddr u latest latestnt wid 0 a-addr1 u1 ... –  ) gforth-1.0 “colon-close-brace-d”
   クロージャ・ローカル宣言を終了します。 クロージャはディクショナリに割
り当てられます。

‘:}h’ ( hmaddr u latest latestnt wid 0 a-addr1 u1 ... –  ) gforth-1.0 “colon-close-brace-h”
   クロージャ・ローカル宣言を終了します。 クロージャーはヒープに割り当て
られます。

‘:}h1’ ( hmaddr u latest latestnt wid 0 a-addr1 u1 ... –  ) gforth-1.0 “colon-close-brace-h”
   クロージャ・ローカル宣言を終了します。 クロージャーはヒープに割り当て
られます。

‘:}xt’ ( hmaddr u latest latestnt wid 0 a-addr1 u1 ... –  ) gforth-1.0 “colon-close-brace-x-t”
   クロージャ・ローカル宣言を終了します。 クロージャは xt によってスタッ
ク上に割り当てられるため、 クロージャの実行時のスタック効果は ‘(
xt-alloc -- xt-closure )’ となります。

‘>addr’ ( xt – addr  ) gforth-experimental “to-addr”
   (‘free-closure’ から呼び出されます)ヒープ上のクロージャの xt を ADDR
に変換し、 ‘free’ に渡すことでクロージャを削除できます。

‘free-closure’ ( xt –  ) gforth-internal “free-closure”
   ヒープに割り当てられたクロージャを解放(free)します

     : foo [{: a f: b d: c xt: d :}d a . b f. c d. d ;] ;
     5 3.3e #1234. ' cr foo execute

   上記 ‘foo’ は、 単一セルと浮動小数点数と2倍長整数と xt を含むクロージ
ャをディクショナリ内に作成し、呼び出し時に最初の 3 つの値を出力後に xt を
実行します。

   これにより、 Algol コンパイラをテストするために 1964 年にドナルド・ク
ヌースが提案した “Man or boy test” を実装することができます(訳注: 手元で
はサッパリ動いてない(0.7.9_20240418, 2024.7))

     : A {: w^ k x1 x2 x3 xt: x4 xt: x5 | w^ B :} recursive
         k  0<= IF  x4 x5 f+  ELSE
             B k x1 x2 x3 action-of x4 [{: B k x1 x2 x3 x4 :}L
                 -1 k +!
                 k  B  x1 x2 x3 x4 A ;] dup B !
             execute  THEN ;
     : man-or-boy? ( n -- ) [: 1e ;] [: -1e ;] 2dup swap [: 0e ;] A f. ;

   場合によっては、 クロージャを変更するには永続的なストレージが必要です
。 複数のクロージャがその永続ストレージを共有する可能性さえあります。 上
の例では、 外部プロシージャのローカル変数がこれに使用されていますが、 場
合によっては、 クロージャが外部プロシージャよりも長く存続します。 特に、
ディクショナリまたはヒープ上に割り当てられたクロージャは、 親プロシージ
ャより長く存続するように設計されています。

   これらについては、 クロージャのように割り当てられるホーム・ロケーショ
ン(home locations)がありますが、 そのコードは作成時に直接実行され、 ホー
ム・ロケーションのアドレスを提供する必要があります。

     : bar ( a b c -- aaddr baddr caddr hl-addr )
         <{: w^ a w^ b w^ c :}h a b c ;> ;

   この例では、 ヒープ上に 3 つのセルを持つホーム・ロケーション(home
location)を作成し、 3 つのロケーションのアドレスとホーム・ロケーションの
アドレスを返します。 このアドレスは、 ホーム・ロケーションが不要になった
ときに ‘free’ するために使用できます。

‘<{:’ ( – hmaddr u latest latestnt wid 0  ) gforth-experimental “start-homelocation”
   ホーム・ロケーション(home location)の開始

‘;>’ ( –  ) gforth-experimental “end-homelocation”
   ホーム・ロケーションの終了


File: gforth.info,  Node: Standard Forth locals,  Prev: Gforth locals,  Up: Locals

6.22.2 Standard Forth locals
----------------------------

Forth-2012 標準では、 Gforth のローカル変数の制限付きバージョンであるロ
ーカル変数構文が定義されています:

   • ローカル変数はセル・サイズの値のみにすることができます(型指定子は許
     可されません)。
   • ローカル変数は制御構造の外側でのみ定義できます。
   • 定義ごとに許可されるローカル変数定義は 1 つだけです。
   • ローカル変数は、 リターン・スタックの明示的な使用を妨げる可能性があ
     ります。 正確な(そして長い)ルールについては、 標準を参照してくださ
     い。 ローカル変数を使用している定義でリターン・スタックにアクセスす
     るワードを使用しない場合は問題ありません。 このルールの目的は、 リ
     ターン・スタックを使ったローカル変数の実装を容易にすることです。
   • ローカル変数定義全体を 1 行に含める必要があります。

   標準 Forth ローカル変数ワードセット自体は ‘{:’ と 以下の 2 つのワード
で構成されます:

‘(local)’ ( addr u –  ) local “paren-local-paren”

   ANS Forth ローカル変数拡張ワードセット(ANS Forth locals extension
wordset)は ‘locals|’ を使用して構文を定義しますが、 これはとても酷い代物
なので、 使用しないことを強くお勧めします。 Gforth への移植を容易にする
ためにこの構文を実装しましたが、 ここでは文書化しません。 この構文の問題
は、 ローカル変数が標準のスタック・コメント表記とは逆の順序で定義されて
いるため、 プログラムが読みにくくなり、 読み間違いや書き間違いが起こりや
すくなることです。 この構文の唯一の利点は、 ANS Forth ローカル変数ワード
セットを使用して実装が簡単であることですが、 ‘{:’ 構文だって同じくらい実
装は簡単ですからね？


File: gforth.info,  Node: Structures,  Next: Object-oriented Forth,  Prev: Locals,  Up: Words

6.23 Structures
===============

このセクションでは、 Gforth に付属する構造体パッケージを紹介します。 標
準 Forth で実装されたパッケージのバージョンは、 ‘compat/struct.fs’ で入
手できます。 このパッケージは、 1989 年の comp.lang.forth への投稿に触発
されました(残念ながら、誰による投稿かは覚えていません。おそらく John
Hayes によるものでしょう)。 このセクションのバージョンは、 M. Anton
Ertl, Yet Another Forth Structures Package
(https://www.complang.tuwien.ac.at/forth/objects/structs.html), Forth
Dimensions 19(3), pages 13–16 です。 Marcel Hendrix は有益なコメントを提
供してくれました。

* Menu:

* Why explicit structure support?::
* Structure Usage::
* Structure Naming Convention::
* Structure Implementation::
* Structure Glossary::
* Forth200x Structures::


File: gforth.info,  Node: Why explicit structure support?,  Next: Structure Usage,  Prev: Structures,  Up: Structures

6.23.1 Why explicit structure support?
--------------------------------------

複数のフィールドを含む構造体を使用したい場合は、 その構造体用にメモリを
予約し、 アドレス算術演算を使用してフィールドにアクセスするだけです
(*note Address arithmetic::)。 例として、 以下のフィールドを持つ構造体を
考えてみましょう

‘a’
     これは浮動小数点数(float)です
‘b’
     これはセル(cell)です
‘c’
     これは浮動小数点数(float)です

   構造体の (float 整列された) ベース・アドレスが与えられると、

‘a’
     それ以上何もせずに a フィールドが得られます。
‘b’
     ‘float+’ すると b フィールドが得られます。
‘c’
     ‘float+ cell+ faligned’ すると c フィールドが得られます。

   これが非常に疲れる可能性があることは容易にわかります。

   さらに加えて、 ‘cell+’ を見ても、 どの構造体がアクセスされているか、
どのフィールドがアクセスされているかがわからないため、 あまり読みやすく
ありません。 何らかの方法で構造体の種類を推測し、 その構造体のどのフィー
ルドがそのオフセットに対応するかをドキュメントで調べる必要があります。

   最後に、 この種のアドレス計算はメンテナンスの問題も引き起こします。 構
造体の途中にフィールドを追加・削除した場合、 その後フィールドのすべての
アドレス計算を探し出して変更する必要があります。

   そこで、 ‘cell+’ とそのファミリーを直接使用する代わりに、 以下のよう
にオフセットを定数に保存してはどうでしょうか？:

     0 constant a-offset
     0 float+ constant b-offset
     0 float+ cell+ faligned c-offset

   これで、 ‘x-offset +’ を使用してフィールド ‘x’ のアドレスを取得できる
ようになりました。 これはあらゆる点ではるかに優れています。 もちろん、 フ
ィールドを追加する場合は、 その後のオフセット定義をすべて変更する必要が
あります。 これは、 以下の方法でオフセットを宣言することで改良できます:

     0 constant a-offset
     a-offset float+ constant b-offset
     b-offset cell+ faligned constant c-offset

   オフセット計算にはいつも ‘+’ を使うので、 定義されたワードのアクショ
ンに ‘+’ を含む定義ワード ‘cfield’ を使用できます:

     : cfield ( n "name" -- )
         create ,
     does> ( name execution: addr1 -- addr2 )
         @ + ;

     0 cfield a
     0 a float+ cfield b
     0 b cell+ faligned cfield c

   今や、 ‘x-offset +’ の代わりに、 単に ‘x’ と書くことができるようにな
りました。

   構造体フィールドのワード群が非常にうまく使用できるようになりました。
ただし、 その定義はまだ少し面倒です。 名前を繰り返す必要があり、 サイズ
と配置に関する情報はフィールド定義の前後に配置されます。 このセクション
で紹介する構造体パッケージは、 これらの問題に対処します。


File: gforth.info,  Node: Structure Usage,  Next: Structure Naming Convention,  Prev: Why explicit structure support?,  Up: Structures

6.23.2 Structure Usage
----------------------

以下のコマンドを使用して、 (データのない)リンク・リストの構造体を定義で
きます(訳注: これは構造体テンプレートを定義するだけです。 構造体変数とす
るには別途 ‘%alloc’ 等する必要があります):
     struct
         cell% field list-next
     end-struct list%

   スタック上のリスト・ノードのアドレスを使用して、 ‘list-next’ を使用し
て次のノードのアドレスを含むフィールドのアドレスを計算できます。 たとえ
ば、 以下のようにしてリストの長さを決定できます:

     : list-length ( list -- n )
     \ "list" is a pointer to the first element of a linked list
     \ "n" is the length of the list
         0 BEGIN ( list1 n1 )
             over
         WHILE ( list1 n1 )
             1+ swap list-next @ swap
         REPEAT
         nip ;

   ‘list% %allot’ を使用すると、 ディクショナリ内にリスト・ノード用のメ
モリを確保でき、 これにより、 リスト・ノードのアドレスがスタック上に残り
ます。ヒープ上で同様の割り当てを行うには、 ‘list% %alloc’ を使用できます
(または、‘allocate’ のようなスタック効果(つまり、ior を使用)が欲しい場合
は、 ‘list% %allocate’ を使用します)。 リスト・ノードのサイズは ‘list%
%size’ で取得でき、 そのセル・アライメントは ‘list% %alignment’ で取得で
きます。

   注意: 標準 Forth では、 ‘create’ されたワードの本体は ‘aligned’ され
ていますが、 必ずしも ‘faligned’ されている訳ではない事に注意してくださ
い。したがって、 以下のようにすると:

     create "name" foo% %allot drop

この場合、 ‘foo%’ に割り当てられたメモリは、 ‘foo%’ に文字フィールドやセ
ル・フィールドや2倍長整数フィールドのみが含まれている場合にのみ、
‘_name_’ の本体から開始されることが保証されます。 したがって、 浮動小数
点数が含まれる場合は、以下を使用することをお勧めします

     foo% %allot constant "name"

   以下のように、 構造体 ‘foo%’ を別の構造体のフィールドとして含めること
ができます:
     struct
     ...
         foo% field ...
     ...
     end-struct ...

   構造体をいちから構築する代わりに、 既存の構造体を拡張できます。 たと
えば、 上記例で定義したような、 データのない単純なリンク・リストはほとん
ど役に立ちません。 これを以下のように、 整数の値を持つリンク・リストに拡
張できます:(1)

     list%
         cell% field intlist-int
     end-struct intlist%

   ‘intlist%’ は、 ‘list-next’ と ‘intlist-int’ の 2 つのフィールドを持
つ構造体です。

   以下のように、 n 要素の ‘foo%’ 型を含む配列型を指定できます:

     foo% n *

   この配列型は、 通常の型を使用できる場所であればどこでも使用できます
(例: ‘field’ を定義する場所や ‘%allot’ を使用するとき)。

   最初のフィールドは構造体のベース・アドレスにあり、 この、 最初のフィ
ールドのワード(例: ‘list-next’)は実際にはスタック上のアドレスを変更しま
せん。 あなたは実行時間と領域の効率を考慮して、 最初のフィールドのワード
を取り除きたいとと思うかもしれません。 しかし、 構造体パッケージがこの場
合を最適化するため、 そのは必要ありません。 最初のフィールドのワードをコ
ンパイルする場合、 コードは生成されません。 したがって、 読みやすさと保
守性を考慮して、 最初のフィールドにアクセスするときにその最初のフィール
ドのワードは含めるべきです。

   ---------- Footnotes ----------

   (1) この機能は「拡張レコード」(extended records)とも呼ばれます。 これ
は、 オベロン・プログラミング言語が成した主な革新です。 言い換えれば、 こ
の機能を Modula-2 に追加することで、 Wirth は新しい言語を作成し、 新しい
コンパイラの記述等を行いました。 この機能を Forth に追加するには、 数行
のコードが必要なだけでした。


File: gforth.info,  Node: Structure Naming Convention,  Next: Structure Implementation,  Prev: Structure Usage,  Up: Structures

6.23.3 Structure Naming Convention
----------------------------------

(構造体の命名規則)(私が)思いつくフィールド名は非常に汎用的なものが多く、
使用すると頻繁に名前の衝突が発生します。 たとえば、 多くの構造体にはたい
てい ‘counter’ フィールドが含まれています。 (私の)頭に浮かぶ構造体名は、
多くの場合、 そのような構造体を作成するワードの名前の論理的な選択でもあ
ります。

   したがって、 私は以下の命名規則を採用しました:

   • フィールド名の形式は ‘_struct_-_field_’ です。 ‘struct’ は構造体の
     基本名、‘field’ はフィールドの基本名です。 フィールド・ワードは、 構
     造体(のアドレス)をフィールド(のアドレス)に変換するものと考えること
     ができます。

   • 構造体の名前は ‘struct%’ の形式で、 ‘struct’ は構造体の基本名です。

   この命名規則は、 拡張構造体のフィールドではあまり機能しません。 たと
えば、 上記例の整数リスト構造体にはフィールド ‘intlist-int’ がありますが
、 ‘intlist-next’ ではなく ‘list-next’ があります。


File: gforth.info,  Node: Structure Implementation,  Next: Structure Glossary,  Prev: Structure Naming Convention,  Up: Structures

6.23.4 Structure Implementation
-------------------------------

この実装の核となるアイデアは、 構築されている構造体に関するデータをグロ
ーバル変数ではなくスタックに渡すことです。 この設計上の決定が下されると
、 他のすべては自然に配置されます。

   スタック上の型の説明は align size の形式です。 サイズをスタックの
TOSに維持すると、 配列の処理が非常に簡単になります。

   ‘field’ は、 ‘Create’ と ‘DOES>’ を使用する定義ワードです。 フィール
ドの本体にはフィールドのオフセットが含まれており、 通常の ‘DOES>’ アクシ
ョンは以下のようになります:

     @ +

つまり、 アドレスにオフセットを加算して、 フィールドのスタック効果 addr1
– addr2 を与えます。

   この単純な構造は、 オフセット 0 のフィールドの最適化によって少し複雑
になります。 これには、 別の ‘DOES>’ 部分が必要です(そのようなフィールド
がコンパイル中に呼び出された場合、 スタック上に何かがあることに依存でき
ないため)。 したがって、 異なる ‘DOES>’ 部分を別々のワードに配置し、 オ
フセットに基づいてどれを呼び出すかを決定します。 ゼロ・オフセットの場合
、 フィールドは基本的に noop です。 これは即実行ワードであるため、 コン
パイル時にコードは生成されません。


File: gforth.info,  Node: Structure Glossary,  Next: Forth200x Structures,  Prev: Structure Implementation,  Up: Structures

6.23.5 Structure Glossary
-------------------------

‘%align’ ( align size –  ) gforth-0.4 “%align”
   データ空間ポインタをアラインメント ALIGN に整列(align)します。

‘%alignment’ ( align size – align  ) gforth-0.4 “%alignment”
   構造体のアライメント

‘%alloc’ ( align size – addr  ) gforth-0.4 “%alloc”
   サイズ SIZE のアドレス・ユニットをアラインメント ALIGN で整列
(align)して割り当て、 割り当てたデータ・ブロックのアドレスを ADDR に返し
ます。 成功しなかった場合は負数の ior を ‘throw’ します。

‘%allocate’ ( align size – addr ior  ) gforth-0.4 “%allocate”
   ‘allocate’ と同様に、 サイズ SIZE のアドレス単位をアライメント ALIGN
で整列(align)して割り当て、 割り当てたデータ・ブロックのアドレスを ADDR
に返します。 成功した場合、 ior=0, 成功しなかった場合は ior<0

‘%allot’ ( align size – addr  ) gforth-0.4 “%allot”
   データ空間にサイズ SIZE アドレス単位をアラインメント ALIGN で割り当て
ます。 結果のデータ・ブロックのアドレスを ADDR に返します。

‘cell%’ ( – align size  ) gforth-0.4 “cell%”
\訳注: セル1つ分のサイズ size と、 サイズをアライメントした align を返す

‘char%’ ( – align size  ) gforth-0.4 “char%”
\訳注: char 1つ分のサイズ size と、 そのサイズをアライメントした align を返します

‘dfloat%’ ( – align size  ) gforth-0.4 “dfloat%”

‘double%’ ( – align size  ) gforth-0.4 “double%”
\訳注: 2倍長整数1つ分のサイズ size と、サイズをアライメントした align を返します

‘end-struct’ ( align size "name" –  ) gforth-0.2 “end-struct”
   アライメント ALIGN とサイズ SIZE を使用して 構造体/型記述子 NAME を定
義します(SIZE は ALIGN の倍数になるように切り上げられます – size1)。
‘name’ 実行時: ( – ALIGN SIZE1)

‘field’ ( align1 offset1 align size "name" –  align2 offset2  ) gforth-0.2 “field”
   オフセット OFFSET1 と ALIGN SIZE で指定された型を持つフィールド NAME
を作成します。 OFFSET2 は次のフィールドのオフセットで、ALIGN2 は、 (そこ
までの)すべてのフィールドのアライメントです。 ‘name’ の実行時: ( ADDR1 –
ADDR2 ) ADDR2=ADDR1+OFFSET1

‘float%’ ( – align size  ) gforth-0.4 “float%”

‘sfloat%’ ( – align size  ) gforth-0.4 “sfloat%”

‘%size’ ( align size – size  ) gforth-0.4 “%size”
   構造体のサイズを返す

‘struct’ ( – align size  ) gforth-0.2 “struct”
   空の構造体。 構造体定義を開始するために使用されます。


File: gforth.info,  Node: Forth200x Structures,  Prev: Structure Glossary,  Up: Structures

6.23.6 Forth200x Structures
---------------------------

Forth 2012 標準では、 やや不便な形式の構造体が定義されています。 一般に
‘field+’ を使用する場合は、 自分でアライメントを行う必要がありますが、 ア
ライメント機能を含む便利なワード(例: ‘field:’)が多数あります。

   典型的な使用例は以下のとおりです:

     0
       field:                   s-a
       faligned 2 floats +field s-b
     constant s-struct

   この構造体を記述する別の方法は以下のとおりです:

     begin-structure s-struct
       field:                   s-a
       faligned 2 floats +field s-b
     end-structure

   以下のように、 同一のフィールドと追加のフィールドを持つ構造体を定義で
きます:

     s-struct
       cfield: t-c
       cfield: t-d
     constant t-struct

   あるいは、

     s-struct extend-structure t-struct
       cfield: t-c
       cfield: t-d
     end-structure

‘begin-structure’ ( "name" – struct-sys 0  ) facility-ext “begin-structure”

‘extend-structure’ ( n "name" – struct-sys n  ) gforth-1.0 “extend-structure”
   サイズ n の既存の構造体の拡張として、 新しい構造体 name を開始します
。

‘end-structure’ ( struct-sys +n –  ) facility-ext “end-structure”
   ‘begin-struction’ で開始された構造体を終了します

‘+field’ ( noffset1 nsize "name" – noffset2  ) facility-ext “plus-field”
   定義ワード。 name ‘( addr1 -- addr2 )’ を定義します。 ここで、 addr2
は addr1+noffset1 です。 noffset2 は noffset1+nsize です。

‘cfield:’ ( u1 "name" – u2  ) facility-ext “c-field-colon”
   文字サイズのフィールドを定義します

‘field:’ ( u1 "name" – u2  ) facility-ext “field-colon”
   アライメントされたセル・サイズのフィールドを定義します

‘2field:’ ( u1 "name" – u2  ) gforth-0.7 “two-field-colon”
   アライメントされた2倍長セル・サイズのフィールドを定義します

‘ffield:’ ( u1 "name" – u2  ) floating-ext “f-field-colon”
   アライメントされた浮動小数点サイズのフィールドを定義します

‘sffield:’ ( u1 "name" – u2  ) floating-ext “s-f-field-colon”
   sfaligned された sfloat サイズのフィールドを定義します

‘dffield:’ ( u1 "name" – u2  ) floating-ext “d-f-field-colon”
   dfaligned された dfloat サイズのフィールドを定義します

‘wfield:’ ( u1 "name" – u2  ) gforth-1.0 “w-field-colon”
   16 ビット値のアライメントされたフィールドを定義します。

‘lfield:’ ( u1 "name" – u2  ) gforth-1.0 “l-field-colon”
   32ビット値にアライメントされたフィールドを定義します。

‘xfield:’ ( u1 "name" – u2  ) gforth-1.0 “x-field-colon”
   64ビット値にアライメントされたフィールドを定義します。


File: gforth.info,  Node: Object-oriented Forth,  Next: Regular Expressions,  Prev: Structures,  Up: Words

6.24 Object-oriented Forth
==========================

Gforth には、オブジェクト指向プログラミング用の 3 つのパッケージ
(‘objects.fs’ と ‘oof.fs’ と ‘mini-oof.fs’) が付属しています。 どれも最
初から組み込まれていないため、 使用する前にインクルードする必要がありま
す。 これらのパッケージ(および、 その他のパッケージ)の最も重要な違いにつ
いては、 *note Comparison with other object models:: で説明します。 すべ
てのパッケージは 標準 Forth で書かれており、 他の 標準 Forth でも使用で
きます。

* Menu:

* Why object-oriented programming?::
* Object-Oriented Terminology::
* Objects::
* OOF::
* Mini-OOF::
* Mini-OOF2::
* Comparison with other object models::


File: gforth.info,  Node: Why object-oriented programming?,  Next: Object-Oriented Terminology,  Prev: Object-oriented Forth,  Up: Object-oriented Forth

6.24.1 Why object-oriented programming?
---------------------------------------

多くの場合、 いくつかのデータ構造「オブジェクト」(object)を扱わなければ
なりません。 それらは、 いつくかの側面では同様に扱う必要がありますが、 そ
れ以外の側面では異なる扱いをしなければなりません。 グラフィカル・オブジ
ェクトとは教科書的な例で言えば、 円や三角形や恐竜の絵やアイコン等ですが
、 プログラム開発中にさらに追加することもできます。 あなたが、 任意のグ
ラフィカル・オブジェクトにいくつかの操作を適用したいとしましょう。 たと
えば、 画面上に表示するための ‘draw’ 操作です。 しかしながら、 この
‘draw’ はオブジェクトの種類ごとに異なる処理を行う必要があります。

   ‘draw’ を、 描画されるオブジェクトの種類に依存して適切なコードを実行
する、 大きな ‘CASE’ 制御構造として実装することはできます。 これはあまり
洗練されたものではなく、 さらに、 新しい種類のグラフィック・オブジェクト
(例えば宇宙船など)を追加するたびに ‘draw’ を変更する必要があります。

   私たちがやりたいことは、 宇宙船を定義するときにシステムに次のように指
示することです: 「宇宙船を ‘draw’ する方法は私たちがこれこれこのとおり書
いたので、 それ以外の処理はシステム側でよしなしにしてください」

   これは、 (当然ながら、 )オブジェクト指向と呼ばれるすべてのシステムで
解決すべき問題です。 ここで紹介するオブジェクト指向パッケージは、 この問
題を解決します(それ以外の問題はあんまり解決できません…)。


File: gforth.info,  Node: Object-Oriented Terminology,  Next: Objects,  Prev: Why object-oriented programming?,  Up: Object-oriented Forth

6.24.2 Object-Oriented Terminology
----------------------------------

このセクションは主にリファレンスであるため、 すぐにすべてを理解する必要
はありません。 用語は主に Smalltalk からインスピレーションを得たものです
:

_クラス(class)_
     いくつかの追加機能を備えたデータ構造定義。

_オブジェクト(object)_
     クラス定義によって記述されたデータ構造の実体(インスタンス
     ;instance)。

_インスタンス変数(instance variables)_
     データ構造のフィールド。

_セレクター(selector)_
     (または「メソッド・セレクター」)さまざまなデータ構造(クラス)に対し
     て操作を実行するワード(例: ‘draw’)。 セレクターは、 「何の」
     (what)操作を行うかを記述します。 C++ 用語では (純粋)仮想関数 と言い
     ます

_メソッド(method)_
     特定のクラスのセレクターによって記述された操作を実行する具体的な定
     義。 メソッドは、 特定のクラスに対して「どのように」(how)操作が実行
     されるかを指定します。

_セレクター呼び出し(selector invocation)_
     セレクターの呼び出し。 呼び出しの 1 つの引数(TOS(スタックの頂上))は
     、 どのメソッドが使用されるかを決定するために使用されます。
     Smalltalk の用語では、 (セレクターとその他の引数で構成される、)メッ
     セージがオブジェクトに送信される と言います。

_受信オブジェクト(receiving object)_
     セレクターの呼び出しによって実行されるメソッドを決定するために使用
     されるオブジェクト。 ‘objects.fs’ モデルでは、 セレクターが呼び出さ
     れたときに TOS 上にあるオブジェクトです。 (「受信」という言葉は、
     Smalltalk の 「メッセージ」関連用語由来です。)

_子クラス(child class)_
     「親クラス」のすべてのプロパティ(インスタンス変数やセレクターやメソ
     ッド)を「継承」(inherit)したクラス。 Smalltalk の用語では、 サブク
     ラスはスーパークラスを継承します、 と言います。 C++ 用語では、 派生
     クラスは基本クラスから継承します、 と言います。


File: gforth.info,  Node: Objects,  Next: OOF,  Prev: Object-Oriented Terminology,  Up: Object-oriented Forth

6.24.3 The ‘objects.fs’ model
-----------------------------

このセクションでは、 ‘objects.fs’ パッケージについて説明します。 この資
料は、 M. Anton Ertl, ‘Yet Another Forth Objects Package
(https://www.complang.tuwien.ac.at/forth/objects/objects.html)’, Forth
Dimensions 19(2), pages 37–43 でも公開されています。

   このセクションは、 *note Structures:: を読了済であることを前提として
います。

   このモデルの基礎となっている技術は、 パーサ・ジェネレーター Gray の実
装に使用されており、 Gforth でもさまざまな種類のワードリスト(ハッシュの
有無や、大文字と小文字の区別の有無や、 ローカル変数用などの特殊用途のワ
ードリスト)を実装するために使用されています)。

* Menu:

* Properties of the Objects model::
* Basic Objects Usage::
* The Objects base class::
* Creating objects::
* Object-Oriented Programming Style::
* Class Binding::
* Method conveniences::
* Classes and Scoping::
* Dividing classes::
* Object Interfaces::
* Objects Implementation::
* Objects Glossary::

   Marcel Hendrix は、 このセクションに関して役立つコメントを提供しまし
た。


File: gforth.info,  Node: Properties of the Objects model,  Next: Basic Objects Usage,  Prev: Objects,  Up: Objects

6.24.3.1 Properties of the ‘objects.fs’ model
.............................................

   • オブジェクトをスタックに渡すのは簡単明瞭です。 スタック上でセレクタ
     ーを渡すのは多少めんどくさいですが、 可能です。

   • オブジェクトはメモリ内の単なるデータ構造であり、 そのアドレスによっ
     て参照されます。 ‘constant’ のような通常の定義ワードを使用してオブ
     ジェクトのワードを作成できます。 同様に、 オブジェクトを含むインス
     タンス変数と他のデータを含むインスタンス変数の間に違いはありません
     。

   • 遅延結び付け(Late binding)は効率的で使いやすいです。

   • 遅延結び付け(Late binding)によりパースが回避されるため、 状態スマー
     ト性(state-smartness)や拡張性の低下に関する問題が回避されます。 便
     宜上、 いくつかのパース・ワードがありますが、 それらには非パース・
     ワードもあります。 パースする定義ワードもいくつかあります。 すべて
     の標準の定義ワードは(‘:noname’ を除いて)パースするため、 これを避け
     るのは困難です。 ただし、 このようなワードは状態スマート
     (state-smart)ではないため、 他の多くのパース・ワードほど悪くはあり
     ません。

   • このモデルではすべてを取り入れようとしているわけではありません。 (著
     者の私見ですけども)このモデルでは、 いくつかのことをうまくやるとい
     った体です。 特に、 このモデルでは情報の隠蔽をサポートするように設
     計されていません(情報の隠蔽に役立つ可能性のある機能はありますが)。
     これを実現するには、また別のパッケージが使用可能です。

   • このモデルは階層構造((layered))になっています。 このモデルを使用す
     るために下位階層まですべての機能を学習して使用する必要はありません
     。 必要な機能はほんのわずかです((*note Basic Objects Usage::, *note
     The Objects base class::, *note Creating objects::)。 その他の機能
     はオプションであり、 互いに独立しています。

   • gforth 固有ではなく、 標準 Forth 用の実装が利用可能です。


File: gforth.info,  Node: Basic Objects Usage,  Next: The Objects base class,  Prev: Properties of the Objects model,  Up: Objects

6.24.3.2 Basic ‘objects.fs’ Usage
.................................

以下のようにして graphical オブジェクト(図形オブジェクト)のクラスを定義
できます:

     object class \ クラス名 "object" は親クラスです
       selector draw ( x y graphical -- )
     end-class graphical

   このコードは、 ‘draw’ 操作を持つクラス ‘graphical’ を定義します。 任
意の ‘graphical’ オブジェクトに対して ‘draw’ 操作を実行できます。例:

     100 100 t-rex draw

ここで、 ‘t-rex’ は、 graphical オブジェクトを生成するワード(定数
(constant)など)です。

   graphical オブジェクトを作成するにはどうすればよいでしょうか？ 現在の
定義では、 有用な graphical オブジェクトを作成できません。 クラス
‘graphical’ は graphical オブジェクト一般を記述しますが、 具体的な
graphical オブジェクト・タイプを記述しません(C++ ユーザーはこれを「抽象
クラス」(abstract class)と呼びます)。 たとえば、 クラス ‘graphical’ には
セレクター ‘draw’ のメソッドがありません。

   具体的な graphical オブジェクトのために、 クラス ‘graphical’ の子クラ
スを定義します。 例:

     graphical class \ 親クラスは graphical
       cell% field circle-radius

     :noname ( x y circle -- )
       circle-radius @ draw-circle ;
     overrides draw

     :noname ( n-radius circle -- )
       circle-radius ! ;
     overrides construct

     end-class circle

   ここでは、 フィールド ‘circle-radius’ を持つクラス ‘circle’ を
‘graphical’ の子として定義しています(フィールド ‘circle-radius’ は構造体
のフィールドと同じように動作します(*note Structures::)。 セレクター
‘draw’ と ‘construct’ 用の新しいメソッドを定義します(‘construct’ は
‘graphical’ の親クラスの ‘object’ クラスで定義されています))。

   以下のようにして、 ヒープ上(つまり、 ‘allocate’ されたメモリ)に
circle を作成できます:

     50 circle heap-new constant my-circle

‘heap-new’ は ‘construct’ を呼び出し、 フィールド ‘circle-radius’ を 50
で初期化します。 以下のようにして、 この新しい円を (100,100) の位置に描
画(draw)できます:

     100 100 my-circle draw

   注意: セレクターを呼び出すことができるのは、 TOS 上のオブジェクト(受
信オブジェクト) が、 セレクターが定義されたクラス、 またはその子孫の 1 つ
に属している場合のみです。 たとえば、 ‘draw’ は、 ‘graphical’ またはその
子孫(例: ‘circle’)に属するオブジェクトに対してのみ呼び出すことができます
。 ‘end-class’ の直前の検索順序スタック(the search order)は、 ‘class’ の
直後と同じである必要があります。


File: gforth.info,  Node: The Objects base class,  Next: Creating objects,  Prev: Basic Objects Usage,  Up: Objects

6.24.3.3 The ‘object.fs’ base class
...................................

クラスを定義するときは、 親クラスを指定する必要があります。 では、 クラ
スの定義はどのように始めればよいのでしょうか？ 最初から使用できるクラス
は 1 つです。 それは ‘object’ です。 これはすべてのクラスの祖先であるた
め、 親を持たない唯一のクラスです。 ‘construct’ と ‘print’ という 2 つの
セレクターを持っています。


File: gforth.info,  Node: Creating objects,  Next: Object-Oriented Programming Style,  Prev: The Objects base class,  Up: Objects

6.24.3.4 Creating objects
.........................

‘heap-new’ ( ...  class – object ) を使用するとヒープ上にクラスのオブジ
ェクトを作成して初期化することができ、 ‘dict-new’ ( ...  class – object
) を使用するとディクショナリ内(‘allot’ による割り当て)にクラスのオブジェ
クトを作成して初期化することができます。 どちらのワードも当該クラス
class の ‘construct’ を呼び出し、 当該クラス class の ‘construct’ のスタ
ック効果(上記「...」の部分)で示されたスタック項目を消費します(訳注: 例え
ば 6.24.3.2 Basic ‘objects.fs’ Usage の例のように、 ‘circle’ の
‘construct’ のスタック効果 n-radius が必要で、 ‘50 circle heap-new
constant my-circle’ としなければならない)。

   オブジェクトに自分でメモリを割り当てたい場合は、 ‘class-inst-size 2@’
( class – align size ) を使用してクラスのアライメント(alignment)とサイズ
を取得できます。 オブジェクト用のメモリを確保したら、 ‘init-object’ (
...  class object – )でオブジェクトを初期化できます(訳注: class のための
データ構造を object からに構築し、 その後そのオブジェクトに対して
‘construct’ を実行します。 注意: 当該 class の ‘construct’ 用のスタック
項目の指定も必要な事に注意)。


File: gforth.info,  Node: Object-Oriented Programming Style,  Next: Class Binding,  Prev: Creating objects,  Up: Objects

6.24.3.5 Object-Oriented Programming Style
..........................................

このセクションはすべてを網羅したものではありません。

   一般に、 同一のセレクターのすべてのメソッドが同一スタック効果を持つよ
うにするのは良いアイデアです。 セレクターを呼び出すとき、 どのメソッドが
呼び出されるのかわからないことが多いため、 すべてのメソッドが同じスタッ
ク効果を持たない限り、 セレクター呼び出しのスタック効果を知ることはでき
ません。

   このルールには例外がひとつあります。 セレクター ‘construct’ のメソッ
ドです。 同一の場所に構築するクラスを指定しているため、 どのメソッドが呼
び出されるのかがわかります。 実際、 著者はユーザーに初期化を指定する便利
な方法を提供するためだけに ‘construct’ をセレクターとして定義しました。
使用方法としては、 セレクター呼び出しとは異なるメカニズムの方が自然です
(ただし、 おそらく説明するにはより多くのコードとスペースが必要になります
)。


File: gforth.info,  Node: Class Binding,  Next: Method conveniences,  Prev: Object-Oriented Programming Style,  Up: Objects

6.24.3.6 Class Binding
......................

通常のセレクター呼び出し(selector invocation)では、 受信オブジェクト
(receiving object)のクラスに応じて実行時(run-time)にメソッドが決定されま
す。 この実行時の選択(selection)は「遅延結び付け」(late binding)と呼ばれ
ます。

   場合によっては、 別のメソッドを呼び出すことが望ましい場合があります。
たとえば、 出力オブジェクト(‘print’ing ‘object’s)では、 受信用クラス
(receiver class)の冗長になりがちな ‘print’ メソッドの代わりに、 単純なメ
ソッドを使用したい事があります。 これを実現するには、 ‘print’ の呼び出し
を以下のように置き換えます(コンパイル時の場合):

     [bind] object print

または、 インタプリタ時は以下のようにします:

     bind object print

あるいは、 メソッドを名前(例: ‘print-object’)で定義し、 その名前を使用し
て呼び出すこともできます。 クラス結び付け(Class binding)は、 同じ効果を
達成する(多くの場合、 より便利な)方法にすぎません。 これにより、 名前の
乱雑さが回避され、 最初に名前を付けずにメソッドを直接呼び出すことができ
ます。

   クラス結び付け(class binding)のよくある使用法は次のとおりです: セレク
ターのメソッドを定義するとき、 親クラスでセレクターが行っていることと、
それ以上のことをメソッドに実行させたいことがよくあります。 この目的には
、 ‘[parent]’ という特別なワードがあります。 ‘[parent] "selector"’ は
‘[bind] "parent selector"’ と同等です。 ここで、‘parent’ は現在のクラス
の親クラスです。 たとえば、メソッド定義は以下のようになります:

     :noname
       dup [parent] foo \ 受信オブジェクトに対して親の foo を実行します
       ... \ (親の foo に加えて)更に何かする
     ; overrides foo

   ‘Object-oriented programming in ANS Forth’ (Forth Dimensions, March
1997) で Andrew McKewan は最適化手法としてクラス結び付け(class binding)を
紹介しています。 著者は緊急の場合を除き、 最適化手法の目的で使用しないこ
とをお勧めします。 とにかく、 このモデルでは遅延結び付け(Late binding)が
非常に高速であるため、 クラス結び付け(class binding)を使用するメリットは
小さいです。 適切でない場合にクラス結び付け(class binding)を使用すると、
保守性が低下します。

   プログラミング・スタイルの質問については次のとおりです。 セレクターは
受信オブジェクト(receiving object)の祖先クラス(ancestor classes)にのみ結
び付け(bind)すべきです。 たとえば、 受信オブジェクトがクラス ‘foo’ また
はその子孫であることがわかっているとします。 その場合は、 ‘foo’ とその祖
先にのみ結び付け(bind)するべきです。


File: gforth.info,  Node: Method conveniences,  Next: Classes and Scoping,  Prev: Class Binding,  Up: Objects

6.24.3.7 Method conveniences
............................

【メソッドをより便利に】通常、 メソッドでは受信オブジェクト(receiving
object)に頻繁にアクセスします。 メソッドをプレーンなコロン定義(‘:noname’
など)として定義する場合、 多くのスタック体操が必要になる場合があります。
これを回避するには、 ‘m: ... ;m’ を使用してメソッドを定義します。たとえ
ば、 以下を使用して ‘circle’ を ‘draw’ するメソッドを定義できます

     m: ( x y circle -- )
       ( x y ) this circle-radius @ draw-circle ;m

   このメソッドが実行されるときは、 受信オブジェクト(receiver object)(上
記例の circle)がスタックから取り除かれます。 その代わりに、 m: 〜 ;m の
間は ‘this’ を使用して受信オブジェクトにアクセスできます(ええ、 確かに、
この例では ‘m: ... ;m’ を使用する利点ないかもしれませんね)。 注意: しか
し、 スタック・コメントとしては ‘m:’ と ‘;m’ の間のコードだけでなく、 メ
ソッド全体(つまり、 受信オブジェクトを含むメソッド全体)のスタック効果を
指定していることに注意してください。 なお、 ‘m:...;m’ では ‘exit’ を使用
できません。 代わりに、 ‘exitm’ を使用してください(1)。

   あなたは ‘this "field"’ という形式のシーケンスを頻繁に使用するハメに
なると思います(上記例では: ‘this circle-radius’)。 そこで、 この方法での
みフィールドを使用する場合は、 ‘inst-var’ を使用してフィールドを定義し、
フィールド名の前の ‘this’ を削れます。 たとえば、 上記例の ‘circle’ クラ
スは以下のように定義することもできます:

     graphical class
       cell% inst-var radius

     m: ( x y circle -- )
       radius @ draw-circle ;m
     overrides draw

     m: ( n-radius circle -- )
       radius ! ;m
     overrides construct

     end-class circle

   ‘radius’ は、 ‘circle’ や、 その子孫クラスと、 それらの ‘m:...;m’ 内
でのみ使用できます。

   ‘inst-value’ を使用してフィールドを定義することもできます。 これは、
‘variable’ に対して ‘value’ があるのと同様に、 ‘inst-var’ に対して
‘inst-value’ があるのです。 このようなフィールドの値は ‘[to-inst]’ を使
用して変更できます。 たとえば、 クラス ‘circle’ を以下のように定義するこ
ともできます:

     graphical class
       inst-value radius

     m: ( x y circle -- )
       radius draw-circle ;m
     overrides draw

     m: ( n-radius circle -- )
       [to-inst] radius ;m
     overrides construct

     end-class circle

   ---------- Footnotes ----------

   (1) さらに、 ‘catch’ を呼び出すワードや、 ‘objects.fs’ をロードする前
に定義されているワードについては、 ‘catch’ を再定義したように、 これらも
再定義する必要があります: ‘: catch this >r catch r> to-this ;’


File: gforth.info,  Node: Classes and Scoping,  Next: Dividing classes,  Prev: Method conveniences,  Up: Objects

6.24.3.8 Classes and Scoping
............................

構造体の拡張とは異なり、 継承は頻繁に行われます。 これは、フィールド名命
名規則の問題をさらに悪化させます(*note Structure Naming Convention::): フ
ィールドが最初にどのクラスで定義されたかを常に覚えておく必要があります。
クラス構造の一部を変更すると、 影響を受けないコードの名前も変更する必要
があります。

   この問題を解決するために、 著者は(著者のオリジナルのモデルにはなかっ
た)スコープ・メカニズムを追加しました。 ‘inst-var’ (または
‘inst-value’)で定義されたフィールドは、 それが定義されているクラスと、 そ
のクラスの子孫のクラスでのみ可視です。 このようなフィールドの使用は、 い
ずれにしても、 これらのクラスの ‘m:’ で定義されたメソッドでのみ意味があ
ります。

   このスコープ・メカニズムにより、 名前が無関係なワードと衝突する可能性
が大幅に低くなるため、 着飾っていないフィールド名を使用できます。

   スコープ・メカニズムがあれば、 他のワードの可視性を制御するために使用
することもできます。 ‘protected’ の後に定義されたすべてのワードは、 現在
のクラスとその子孫でのみ表示されます。 ‘public’ は、 以前に有効だった
the current wordlist (新しく定義されたワードを入れるワードリスト)(つまり
ユーザー変数 ‘current’)を復元します。 ‘public’ または ‘set-current’ が介
在せずに複数の ‘protected’ がある場合、 ‘public’ はこれらの最初の
‘protected’ より前の有効な the current wordlist を復元します。


File: gforth.info,  Node: Dividing classes,  Next: Object Interfaces,  Prev: Classes and Scoping,  Up: Objects

6.24.3.9 Dividing classes
.........................

メソッドの定義を、 クラスや、そのセレクターや、 フィールドや、 インスタ
ンス変数、 の定義とは別に行う、 つまり、 実装を定義から分離することもで
きます。 これは以下の方法で行うことができます:

     graphical class
       inst-value radius
     end-class circle

     ... \ do some other stuff

     circle methods \ now we are ready

     m: ( x y circle -- )
       radius draw-circle ;m
     overrides draw

     m: ( n-radius circle -- )
       [to-inst] radius ;m
     overrides construct

     end-methods

   複数の ‘methods’...‘end-methods’ セクションを使用できます。 これらの
セクションでクラスに対して実行できることは、 メソッドの定義とクラスのセ
レクターのオーバーライドのみです。 新しいセレクターやフィールドを定義し
てはいけません。

   注意: 多くの場合、 セレクターを使用する前にオーバーライドする必要があ
ることに注意してください。 特に、 ‘heap-new’ とその他のメソッドを呼び出
す前に、 通常は ‘construct’ を新しいメソッドでオーバーライドする必要があ
ります。 たとえば、 上記例の ‘overrides construction’ シーケンスの前に
circle を作成してはなりません。


File: gforth.info,  Node: Object Interfaces,  Next: Objects Implementation,  Prev: Dividing classes,  Up: Objects

6.24.3.10 Object Interfaces
...........................

このモデルでは、 受信オブジェクト(receiving objects)のクラスまたはその祖
先の 1 つに定義されたセレクターのみを呼び出すことができます。 これらのク
ラスのいずれにも属さない受信オブジェクトを使用してセレクターを呼び出した
場合、 結果は未定義になります。 あなたの運が良ければ、 プログラムは即座
にクラッシュします。

   ここで、 2 つのクラスで 1 つまたは複数のセレクターを使用できるように
したい場合を考えてみましょう。 セレクターを共通の祖先クラスに追加する必
要があり、 最悪の場合は ‘object’ に追加する必要があります。 たとえば、 他
の誰かがこの祖先クラスに対して責任を負っているなどの理由で、 共通の祖先
クラスへのセレクターの追加を実行したくない場合もあります。

   この問題の解決策はインターフェース(interface)です。 インターフェイス
はセレクターのコレクション(collection)です。 クラスがインターフェイスを
実装している場合、 セレクターはクラスとその子孫で使用できるようになりま
す。 クラスは無制限の数のインターフェイスを実装できます。 上で説明した問
題については、 セレクターのインターフェイスを定義し、 両方のクラスがその
インターフェイスを実装します。

   例として、 オブジェクトをディスクに書き込んで戻すための ‘storage’ と
いうインターフェイスと、 それを実装するクラス ‘foo’ について考えてみまし
ょう。 そのコードは以下のようになります:

     interface
       selector write ( file object -- )
       selector read1 ( file object -- )
     end-interface storage

     bar class
       storage implementation

     ... overrides write
     ... overrides read1
     ...
     end-class foo

(著者は、 ここから更に ‘read1’ を内部的に使用するワード ‘read’ ( file –
object ) を追加するのですが、 それはインターフェイスとは関係ないので、 こ
こでは説明を割愛します。 )

   注意: インターフェースでは ‘protected’ を使用できないことに注意してく
ださい。 もちろん、 フィールドを定義することもできません。

   Neon モデルでは、 すべてのセレクターがすべてのクラスで使用できます。
したがってインターフェイスは必要ありません。 Neon モデルで支払う代償は、
遅延結び付け(late binding)が遅くなるため、 遅延結び付けを回避するために
複雑さが増すことです。


File: gforth.info,  Node: Objects Implementation,  Next: Objects Glossary,  Prev: Object Interfaces,  Up: Objects

6.24.3.11 ‘objects.fs’ Implementation
.....................................

オブジェクトは、 ‘struct...end-struct’ で記述されたデータ構造の 1 つであ
る、 メモリの一片です。 これには、 オブジェクトのクラスのメソッド・マッ
プ(the method map)を指すフィールド ‘object-map’ があります。

   「メソッド・マップ」(method map)(1)は、 オブジェクトのクラスのメソッ
ドの実行トークン(xt)を含む配列です。 各セレクターには、 メソッド・マップ
へのオフセットが含まれています。

   ‘selector’ は、‘CREATE’ と ‘DOES>’ を使用する定義ワードです。
selector の本体にはオフセットが含まれています。 クラスのセレクターの
‘DOES>’ アクションは、 基本的には以下のとおりです:

     ( object addr ) @ over object-map @ + @ execute

   なお、 ‘object-map’ はオブジェクトの最初のフィールドであるため、 コー
ドは生成されません。 ご覧のとおり、 セレクターの呼び出しには小さいけれど
も一定のコストがかかります。

   クラスは基本的に ‘struct’ とメソッド・マップを組み合わせたものです。
‘struct’ の場合と同様に、 クラス定義中に、 クラスのアライメントとサイズ
がスタックに渡されるため、 ‘field’ をクラスのフィールドの定義にも使用で
きます。 ただし、 スタックにさらに多くの項目を渡すと不便になるため、
‘class’ はメモリ内にデータ構造を構築し、 変数 ‘current-interface’ を通じ
てアクセスします。 定義が完了すると、 クラスはポインタ(たとえば、 子クラ
ス定義のパラメータとして利用したりする)としてスタックに置かれます。

   新しいクラスは、 その親のアライメントとサイズ、 およびその親のメソッ
ド・マップのコピーから始まります。 新しいフィールドを定義すると、 サイズ
とアライメントが拡張されます。 同様に、 新しいセレクターを定義すると、 メ
ソッド・マップが拡張されます。 ‘overrides’ は、 セレクターによって指定さ
れたオフセットでメソッド・マップに新しい xt を保存するだけです。

   クラス結び付け(class binding)は、クラスのメソッド・マップからセレクタ
ーによって指定されたオフセットで xt を取得し、 それを ‘compile,’ で取得
します(‘[bind]’ の場合)。

   著者は ‘this’ を ‘value’ として実装しました。 ‘m:...;m’ メソッドの開
始時に、 古い ‘this’ がリターン・スタックに保存され、 最後に復元されます
。 TOS 上のオブジェクトは ‘TO this’ で保存します。 この手法には欠点が 1
つあります。 ユーザーが ‘;m’ 経由ではなく ‘throw’ または ‘exit’ 経由でメ
ソッドを終了した場合、 ‘this’ は復元されません(そして ‘exit’ がクラッシ
ュする可能性があります)。 著者は ‘throw’ の問題に対処するために、 ‘this’
を保存および復元するために ‘catch’ を再定義しました(訳注: つまり、
"objects.fs" をインクルードした時に redefined と警告が出るが、意図的に再
定義してあるので無視してください)。 例外をキャッチできるワードについても
全く同様に行うべきです。 ‘exit’ については、 単純に使用を禁止します(代わ
りに ‘exitm’ があります)。

   ‘inst-var’ は ‘field’ とまったく同じですが、 ‘DOES>’ アクションが異な
ります:
     @ this +
   ‘inst-value’ も同様です。

   各クラスは、 ‘inst-var’ と ‘inst-value’ で定義されたワードや、 それら
の protected されたワードを含む、 ワードリストを持っています。 また、 そ
の親へのポインタも持っています。 ‘class’ は、 クラスとそのすべての祖先の
ワードリストを検索順序スタック(the search order)にプッシュし、
‘end-class’ はそれらをスタックから drop します。

   インターフェイスは、 フィールドと親と protected されたワードのないク
ラスに似ています。 つまり、 メソッド・マップがあるだけです。 クラスがイ
ンターフェイスを実装する場合、 そのメソッド・マップにはインターフェイス
のメソッド・マップへのポインターが含まれます。 マップ内の正のオフセット
はクラス・メソッド用に予約されているため、 インターフェイス・マップ・ポ
インターは負のオフセットを持ちます。 クラス・セレクターとは異なり、 イン
ターフェイスにはシステム全体で一意のオフセットがあります。 クラス・セレ
クターのオフセットは、 セレクターが利用可能な(呼び出し可能な)クラスに対
してのみ一意です。

   この構造は、 インターフェイス・セレクターがメソッドを見つけるために、
クラス・セレクターよりも 1 つ多い間接参照を実行する必要があることを意味
します。 その本体には、 クラス・メソッド・マップ内のインターフェイス・マ
ップ・ポインター・オフセットと、 インターフェイス・メソッド・マップ内の
メソッド・オフセットが含まれています。 インターフェイス・セレクターの
‘does>’ アクションは、 基本的には以下のとおりです:

     ( object selector-body )
     2dup selector-interface @ ( object selector-body object interface-offset )
     swap object-map @ + @ ( object selector-body map )
     swap selector-offset @ + @ execute

   ここで、 ‘object-map’ と ‘selector-offset’ は最初のフィールドであり、
コードは生成されません。

   具体的な例として、 以下のコードについて考えてみましょう:

     interface
       selector if1sel1
       selector if1sel2
     end-interface if1

     object class
       if1 implementation
       selector cl1sel1
       cell% inst-var cl1iv1

     ' m1 overrides construct
     ' m2 overrides if1sel1
     ' m3 overrides if1sel2
     ' m4 overrides cl1sel2
     end-class cl1

     create obj1 object dict-new drop
     create obj2 cl1    dict-new drop

   このコードで作成されたデータ構造 (‘object’ のデータ構造を含む) は、セ
ル・サイズ 4 を想定して figure (objects-implementation.png) に図示されて
います。

   ---------- Footnotes ----------

   (1) 「メソッド・マップ」(method map)は著者自作用語です。 C++ 用語では
、 仮想関数テーブル と言います。


File: gforth.info,  Node: Objects Glossary,  Prev: Objects Implementation,  Up: Objects

6.24.3.12 ‘objects.fs’ Glossary
...............................

‘bind’ ( ... "class" "selector" – ...  ) objects “bind”
   指定のクラス CLASS の 指定セレクター SELECTOR のメソッドを execute し
ます。

‘<bind>’ ( class selector-xt – xt  ) objects “<bind>”
   XT は、 指定クラス CLASS のセレクター SELECTOR-XT のメソッドです。

‘bind'’ ( "class" "selector" – xt  ) objects “bind”’
   XT は 指定のクラス CLASS の 指定のセレクター SELECTOR のメソッドです
。

‘[bind]’ ( compile-time: "class" "selector" – ; run-time: ... object – ...  ) objects “[bind]”
   指定のクラス CLASS の 指定のセレクター SELECTOR のメソッドをコンパイ
ルします。

‘class’ ( parent-class – align offset  ) objects “class”
   PARENT-CLASS の子として新しいクラス定義を開始します。 スタックに積ま
れた ALIGN OFFSET は FIELD などで使用されます。

‘class->map’ ( class – map  ) objects “class->map”
   MAP は 指定のクラス CLASS のメソッド・マップへのポインタです。 これは
、 セレクター・オフセットが参照するマップ内の場所(つまり、 OBJECT-MAP が
指す場所)を指します。

‘class-inst-size’ ( class – addr  ) objects “class-inst-size”
   してのクラス CLASS のインスタンス(つまり、 オブジェクト)のサイズ仕様
を指定します。 ‘class-inst-size 2 ( class -- align size )’ として使用さ
れます。

‘class-override!’ ( xt sel-xt class-map –  ) objects “class-override!”
   指定の XT は、 指定の CLASS-MAP のセレクター SEL-XT の新しいメソッド
です。

‘class-previous’ ( class –  ) objects “class-previous”
   指定の CLASS のワードリストを検索順序スタック(the search order)から
drop します。 CLASS のワードリストが実際に検索順序スタックに含まれている
かどうかのチェックは行われません。

‘class>order’ ( class –  ) objects “class>order”
   クラス CLASS のワードリストを検索順序スタック(the search-order)の先頭
に追加します。

‘construct’ ( ... object –  ) objects “construct”
   指定の OBJECT のデータ・フィールドを初期化します。 クラス OBJECT のメ
ソッドは何も行いません: ‘( object -- )’.

‘current'’ ( "selector" – xt  ) objects “current”’
   XT は、 現在のクラスの指定の SELECTOR のメソッドです。

‘[current]’ ( compile-time: "selector" – ; run-time: ... object – ...  ) objects “[current]”
   現在のクラスの SELECTOR のメソッドをコンパイルします。

‘current-interface’ ( – addr  ) objects “current-interface”
   変数(Variable): 現在定義中のクラスまたはインターフェイスが含まれます
。

‘dict-new’ ( ... class – object  ) objects “dict-new”
   ‘allot’ を使用して、 ディクショナリ内のクラス CLASS のオブジェクトを
初期化します。 初期化したオブジェクトへのポインタを OBJECT に返します

‘end-class’ ( align offset "name" –  ) objects “end-class”
   NAME という名前を付けてクラス定義を終了します。 NAME 実行時: ‘--
class’

‘end-class-noname’ ( align offset – class  ) objects “end-class-noname”
   クラス定義を終了します。 結果のクラスは CLASS です。

‘end-interface’ ( "name" –  ) objects “end-interface”
   ‘name’ という名前を付けてインターフェイス定義を終了します。 ‘name’ の
実行時: ‘--interface’

‘end-interface-noname’ ( – interface  ) objects “end-interface-noname”
   インターフェース定義を終了します。 結果のインターフェースは INTERFACE

‘end-methods’ ( –  ) objects “end-methods”
   クラスのメソッド定義から通常モードに切り替えます(現在、 これは古い検
索順序スタックを復元するだけです)。

‘exitm’ ( –  ) objects “exitm”
   メソッドから ‘exit’ します。 古い ‘this’ を復元します。

‘heap-new’ ( ... class – object  ) objects “heap-new”
   ‘allocate’ し、 クラス CLASS のオブジェクトを初期化します。

‘implementation’ ( interface –  ) objects “implementation”
   現在のクラスは INTERFACE を実装しています。 つまり、 現在のクラスとそ
の子孫のインターフェイスのすべてのセレクターを使用できます。

‘init-object’ ( ... class object –  ) objects “init-object”
   メモリのチャンク OBJECT (アドレス)をクラス CLASS のオブジェクトのため
に初期化します。 それから ‘construct’ を実行します(訳注: CLASS の
‘construct’ 用のスタック項目も必要な事に注意。 6.24.3.2 Basic
‘objects.fs’ Usage の例 circle で言えば n-radius が必要で(my-circle2 と
いうメモリ領域をクラス・オブジェクトにするとして、) ‘50 circle
my-circle-2 init-object’ としなければならない)

‘inst-value’ ( align1 offset1 "name" – align2 offset2  ) objects “inst-value”
   ALIGN2 OFFSET2 は W のサイズだけ足し込んだ値です。 NAME の実行時: ‘--
w’ W は、‘this’ オブジェクトの NAME フィールドの値です。

‘inst-var’ ( align1 offset1 align size "name" – align2 offset2  ) objects “inst-var”
   ADDR は、‘this’ オブジェクトのフィールド NAME のアドレスです。 NAME の
実行時: ‘-- addr’

‘interface’ ( –  ) objects “interface”
   インターフェース定義を開始します。

‘m:’ ( – xt colon-sys; run-time: object –  ) objects “m:”
   メソッド定義を開始します。 OBJECT が新しい ‘this’ になります。

‘:m’ ( "name" – xt; run-time: object –  ) objects “:m”
   名前付きメソッド定義を開始します。 OBJECT が新しい ‘this’ になります
。 ‘;m’ で終わる必要があります。

‘;m’ ( colon-sys –; run-time: –  ) objects “;m”
   メソッド定義を終了します。 古い ‘this’ を復元します。

‘method’ ( xt "name" –  ) objects “method”
   セレクター NAME を作成し、XT を現在のクラスのメソッドにします。
‘name’ の実行時: ‘... object -- ...’

‘methods’ ( class –  ) objects “methods”
   CLASS を現在のクラスにします。 これは、 セレクターをオーバーライドす
るメソッドを定義するために使用することを目的としています。 新しいフィー
ルドやセレクターを定義することはできません。

‘object’ ( – class  ) objects “object”
   すべてのクラスの祖先。

‘overrides’ ( xt "selector" –  ) objects “overrides”
   現在のクラスの SELECTOR のデフォルト・メソッドを XT に置き換えます。
‘overrides’ はインターフェイス定義中に使用してはいけません。

‘[parent]’ ( compile-time: "selector" – ; run-time: ... object – ...  ) objects “[parent]”
   現在のクラスの親の SELECTOR のメソッドをコンパイルします。

‘print’ ( object –  ) objects “print”
   オブジェクトを出力します。 指定のクラス OBJECT のメソッドは、 オブジ
ェクトのアドレスとそのクラスのアドレスを出力します。

‘protected’ ( –  ) objects “protected”
   現在のクラスのワードリストをコンパイル・ワードリスト(the compilation
wordlist)にセットします

‘public’ ( –  ) objects “public”
   実際にコンパイル・ワードリスト(the compilation wordlist)を変更した最
後の ‘protected’ より前に有効だったコンパイル・ワードリストを復元します
。

‘selector’ ( "name" –  ) objects “selector”
   現在のクラスとその子孫のセレクター NAME を作成します。 ‘overrides’ を
使用して、 現在のクラスのセレクターのメソッドを設定できます。 NAME の実
行時: ‘... object -- ...’

‘this’ ( – object  ) objects “this”
   現在のメソッドの受信オブジェクト(receiving object)(別名アクティブ・オ
ブジェクト)。

‘<to-inst>’ ( w xt –  ) objects “<to-inst>”
   W を ‘this’ オブジェクトのフィールド XT に格納します。

‘[to-inst]’ ( compile-time: "name" – ; run-time: w –  ) objects “[to-inst]”
   W を ‘this’ オブジェクトの NAME フィールドに格納します。

‘to-this’ ( object –  ) objects “to-this”
   ‘this’ を設定します(内部的に使用されるものですが、 デバッグ時に役立ち
ます)。

‘xt-new’ ( ... class xt – object  ) objects “xt-new”
   ‘xt ( align size -- addr )’ を使用してメモリを取得し、 新しいオブジェ
クトを作成します。


File: gforth.info,  Node: OOF,  Next: Mini-OOF,  Prev: Objects,  Up: Object-oriented Forth

6.24.4 The ‘oof.fs’ model
-------------------------

このセクションでは、 ‘oof.fs’ パッケージについて説明します。

   このセクションで説明するパッケージは、 1991 年以来 bigFORTH で使用さ
れており、 新薬作成に使用されるクロマトグラフィー・システムと、グラフィ
ック・ユーザー・インターフェイス・ライブラリ (MINOS) という 2 つの大きな
アプリケーションに使用されています。

   You can find a description (in German) of ‘oof.fs’ in ‘Object
oriented bigFORTH’ by Bernd Paysan, published in ‘Vierte Dimension’
10(2), 1994.

* Menu:

* Properties of the OOF model::
* Basic OOF Usage::
* The OOF base class::
* Class Declaration::
* Class Implementation::


File: gforth.info,  Node: Properties of the OOF model,  Next: Basic OOF Usage,  Prev: OOF,  Up: OOF

6.24.4.1 Properties of the ‘oof.fs’ model
.........................................

   • This model combines object oriented programming with information
     hiding.  It helps you writing large application, where scoping is
     necessary, because it provides class-oriented scoping.

   • Named objects, object pointers, and object arrays can be created,
     selector invocation uses the “object selector” syntax.  Selector
     invocation to objects and/or selectors on the stack is a bit less
     convenient, but possible.

   • Selector invocation and instance variable usage of the active
     object is straightforward, since both make use of the active
     object.

   • 遅延結び付け(Late binding)は効率的で使いやすいです。

   • State-smart objects parse selectors.  However, extensibility is
     provided using a (parsing) selector ‘postpone’ and a selector ‘'’.

   • gforth 固有ではなく、 標準 Forth 用の実装が利用可能です。


File: gforth.info,  Node: Basic OOF Usage,  Next: The OOF base class,  Prev: Properties of the OOF model,  Up: OOF

6.24.4.2 Basic ‘oof.fs’ Usage
.............................

This section uses the same example as for ‘objects’ (*note Basic Objects
Usage::).

   以下のようにして graphical オブジェクト(図形オブジェクト)のクラスを定
義できます:

     object class graphical \ "object" is the parent class
       method draw ( x y -- )
     class;

   このコードは、 ‘draw’ 操作を持つクラス ‘graphical’ を定義します。 任
意の ‘graphical’ オブジェクトに対して ‘draw’ 操作を実行できます。例:

     100 100 t-rex draw

where ‘t-rex’ is an object or object pointer, created with e.g.
‘graphical : t-rex’.

   graphical オブジェクトを作成するにはどうすればよいでしょうか？ 現在の
定義では、 有用な graphical オブジェクトを作成できません。 クラス
‘graphical’ は graphical オブジェクト一般を記述しますが、 具体的な
graphical オブジェクト・タイプを記述しません(C++ ユーザーはこれを「抽象
クラス」(abstract class)と呼びます)。 たとえば、 クラス ‘graphical’ には
セレクター ‘draw’ のメソッドがありません。

   具体的な graphical オブジェクトのために、 クラス ‘graphical’ の子クラ
スを定義します。 例:

     graphical class circle \ "graphical" is the parent class
       cell var circle-radius
     how:
       : draw ( x y -- )
         circle-radius @ draw-circle ;

       : init ( n-radius -- )
         circle-radius ! ;
     class;

   Here we define a class ‘circle’ as a child of ‘graphical’, with a
field ‘circle-radius’; it defines new methods for the selectors ‘draw’
and ‘init’ (‘init’ is defined in ‘object’, the parent class of
‘graphical’).

   Now we can create a circle in the dictionary with:

     50 circle : my-circle

‘:’ invokes ‘init’, thus initializing the field ‘circle-radius’ with 50.
We can draw this new circle at (100,100) with:

     100 100 my-circle draw

   Note: You can only invoke a selector if the receiving object belongs
to the class where the selector was defined or one of its descendents;
e.g., you can invoke ‘draw’ only for objects belonging to ‘graphical’ or
its descendents (e.g., ‘circle’).  The scoping mechanism will check if
you try to invoke a selector that is not defined in this class
hierarchy, so you’ll get an error at compilation time.


File: gforth.info,  Node: The OOF base class,  Next: Class Declaration,  Prev: Basic OOF Usage,  Up: OOF

6.24.4.3 The ‘oof.fs’ base class
................................

When you define a class, you have to specify a parent class.  So how do
you start defining classes?  There is one class available from the
start: ‘object’.  You have to use it as ancestor for all classes.  It is
the only class that has no parent.  Classes are also objects, except
that they don’t have instance variables; class manipulation such as
inheritance or changing definitions of a class is handled through
selectors of the class ‘object’.

   ‘object’ provides a number of selectors:

   • ‘class’ for subclassing, ‘definitions’ to add definitions later on,
     and ‘class?’ to get type informations (is the class a subclass of
     the class passed on the stack?).

     ‘object-class’ ( "name" –  ) oof “object-class”

     ‘object-definitions’ ( –  ) oof “object-definitions”

     ‘object-class?’ ( o – flag  ) oof “class-query”

   • ‘init’ and ‘dispose’ as constructor and destructor of the object.
     ‘init’ is invocated after the object’s memory is allocated, while
     ‘dispose’ also handles deallocation.  Thus if you redefine
     ‘dispose’, you have to call the parent’s dispose with ‘super
     dispose’, too.

     ‘object-init’ ( ... –  ) oof “object-init”

     ‘object-dispose’ ( –  ) oof “object-dispose”

   • ‘new’, ‘new[]’, ‘:’, ‘ptr’, ‘asptr’, and ‘[]’ to create named and
     unnamed objects and object arrays or object pointers.

     ‘object-new’ ( – o  ) oof “object-new”

     ‘object-new[]’ ( n – o  ) oof “new-array”

     ‘object-:’ ( "name" –  ) oof “define”

     ‘object-ptr’ ( "name" –  ) oof “object-ptr”

     ‘object-asptr’ ( o "name" –  ) oof “object-asptr”

     ‘object-[]’ ( n "name" –  ) oof “array”

   • ‘::’ and ‘super’ for explicit scoping.  You should use explicit
     scoping only for super classes or classes with the same set of
     instance variables.  Explicitly-scoped selectors use early binding.

     ‘object-::’ ( "name" –  ) oof “scope”

     ‘object-super’ ( "name" –  ) oof “object-super”

   • ‘self’ to get the address of the object

     ‘object-self’ ( – o  ) oof “object-self”

   • ‘bind’, ‘bound’, ‘link’, and ‘is’ to assign object pointers and
     instance defers.

     ‘object-bind’ ( o "name" –  ) oof “object-bind”

     ‘object-bound’ ( class addr "name" –  ) oof “object-bound”

     ‘object-link’ ( "name" – class addr  ) oof “object-link”

     ‘object-is’ ( xt "name" –  ) oof “object-is”

   • ‘'’ to obtain selector tokens, ‘send’ to invocate selectors form
     the stack, and ‘postpone’ to generate selector invocation code.

     ‘object-'’ ( "name" – xt  ) oof “tick”

     ‘object-postpone’ ( "name" –  ) oof “object-postpone”

   • ‘with’ and ‘endwith’ to select the active object from the stack,
     and enable its scope.  Using ‘with’ and ‘endwith’ also allows you
     to create code using selector ‘postpone’ without being trapped by
     the state-smart objects.

     ‘object-with’ ( o –  ) oof “object-with”

     ‘object-endwith’ ( –  ) oof “object-endwith”


File: gforth.info,  Node: Class Declaration,  Next: Class Implementation,  Prev: The OOF base class,  Up: OOF

6.24.4.4 Class Declaration
..........................

   • Instance variables

     ‘var’ ( size –  ) oof “var”
     Create an instance variable

   • Object pointers

     ‘ptr’ ( –  ) oof “ptr”
     Create an instance pointer

     ‘asptr’ ( class –  ) oof “asptr”
     Create an alias to an instance pointer, cast to another class.

   • Instance defers

     ‘defer’ ( –  ) oof “defer”
     Create an instance defer

   • Method selectors

     ‘early’ ( –  ) oof “early”
     Create a method selector for early binding.

     ‘method’ ( –  ) oof “method”
     Create a method selector.

   • Class-wide variables

     ‘static’ ( –  ) oof “static”
     Create a class-wide cell-sized variable.

   • End declaration

     ‘how:’ ( –  ) oof “how-to”
     End declaration, start implementation

     ‘class;’ ( –  ) oof “end-class”
     End class declaration or implementation


File: gforth.info,  Node: Class Implementation,  Prev: Class Declaration,  Up: OOF

6.24.4.5 Class Implementation
.............................


File: gforth.info,  Node: Mini-OOF,  Next: Mini-OOF2,  Prev: OOF,  Up: Object-oriented Forth

6.24.5 The ‘mini-oof.fs’ model
------------------------------

Gforth’s third object oriented Forth package is a 12-liner.  It uses a
mixture of the ‘objects.fs’ and the ‘oof.fs’ syntax, and reduces to the
bare minimum of features.  This is based on a posting of Bernd Paysan in
comp.lang.forth.

* Menu:

* Basic Mini-OOF Usage::
* Mini-OOF Example::
* Mini-OOF Implementation::


File: gforth.info,  Node: Basic Mini-OOF Usage,  Next: Mini-OOF Example,  Prev: Mini-OOF,  Up: Mini-OOF

6.24.5.1 Basic ‘mini-oof.fs’ Usage
..................................

There is a base class (‘class’, which allocates one cell for the object
pointer) plus seven other words: to define a method, a variable, a
class; to end a class, to resolve binding, to allocate an object and to
compile a class method.

‘object’ ( – a-addr  ) mini-oof “object”
   OBJECT is the base class of all objects.

‘method’ ( m v "name" – m’ v  ) mini-oof “method”
   Define a selector.

‘var’ ( m v size "name" – m v’  ) mini-oof “var”
   Define a variable with SIZE bytes.

‘class’ ( class – class selectors vars  ) mini-oof “class”
   Start the definition of a class.

‘end-class’ ( class selectors vars "name" –  ) mini-oof “end-class”
   End the definition of a class.

‘defines’ ( xt class "name" –  ) mini-oof “defines”
   Bind XT to the selector NAME in class CLASS.

‘new’ ( class – o  ) mini-oof “new”
   Create a new incarnation of the class CLASS.

‘::’ ( class "name" –  ) mini-oof “colon-colon”
   Compile the method for the selector NAME of the class CLASS (not
immediate!).


File: gforth.info,  Node: Mini-OOF Example,  Next: Mini-OOF Implementation,  Prev: Basic Mini-OOF Usage,  Up: Mini-OOF

6.24.5.2 Mini-OOF Example
.........................

A short example shows how to use this package.  This example, in
slightly extended form, is supplied as ‘moof-exm.fs’

     object class
       method init
       method draw
     end-class graphical

   このコードは、 ‘draw’ 操作を持つクラス ‘graphical’ を定義します。 任
意の ‘graphical’ オブジェクトに対して ‘draw’ 操作を実行できます。例:

     100 100 t-rex draw

   where ‘t-rex’ is an object or object pointer, created with e.g.
‘graphical new Constant t-rex’.

   具体的な graphical オブジェクトのために、 クラス ‘graphical’ の子クラ
スを定義します。 例:

     graphical class
       cell var circle-radius
     end-class circle \ "graphical" is the parent class

     :noname ( x y -- )
       circle-radius @ draw-circle ; circle defines draw
     :noname ( r -- )
       circle-radius ! ; circle defines init

   There is no implicit init method, so we have to define one.  The
creation code of the object now has to call init explicitely.

     circle new Constant my-circle
     50 my-circle init

   It is also possible to add a function to create named objects with
automatic call of ‘init’, given that all objects have ‘init’ on the same
place:

     : new: ( .. o "name" -- )
         new dup Constant init ;
     80 circle new: large-circle

   We can draw this new circle at (100,100) with:

     100 100 my-circle draw


File: gforth.info,  Node: Mini-OOF Implementation,  Prev: Mini-OOF Example,  Up: Mini-OOF

6.24.5.3 ‘mini-oof.fs’ Implementation
.....................................

Object-oriented systems with late binding typically use a
“vtable”-approach: the first variable in each object is a pointer to a
table, which contains the methods as function pointers.  The vtable may
also contain other information.

   So first, let’s declare selectors:

     : method ( m v "name" -- m' v ) Create  over , swap cell+ swap
       DOES> ( ... o -- ... ) @ over @ + @ execute ;

   During selector declaration, the number of selectors and instance
variables is on the stack (in address units).  ‘method’ creates one
selector and increments the selector number.  To execute a selector, it
takes the object, fetches the vtable pointer, adds the offset, and
executes the method xt stored there.  Each selector takes the object it
is invoked with as top of stack parameter; it passes the parameters
(including the object) unchanged to the appropriate method which should
consume that object.

   Now, we also have to declare instance variables

     : var ( m v size "name" -- m v' ) Create  over , +
       DOES> ( o -- addr ) @ + ;

   As before, a word is created with the current offset.  Instance
variables can have different sizes (cells, floats, doubles, chars), so
all we do is take the size and add it to the offset.  If your machine
has alignment restrictions, put the proper ‘aligned’ or ‘faligned’
before the variable, to adjust the variable offset.  That’s why it is on
the top of stack.

   We need a starting point (the base object) and some syntactic sugar:

     Create object  1 cells , 2 cells ,
     : class ( class -- class selectors vars ) dup 2@ ;

   For inheritance, the vtable of the parent object has to be copied
when a new, derived class is declared.  This gives all the methods of
the parent class, which can be overridden, though.

     : end-class  ( class selectors vars "name" -- )
       Create  here >r , dup , 2 cells ?DO ['] noop , 1 cells +LOOP
       cell+ dup cell+ r> rot @ 2 cells /string move ;

   The first line creates the vtable, initialized with ‘noop’s.  The
second line is the inheritance mechanism, it copies the xts from the
parent vtable.

   We still have no way to define new methods, let’s do that now:

     : defines ( xt class "name" -- ) ' >body @ + ! ;

   To allocate a new object, we need a word, too:

     : new ( class -- o )  here over @ allot swap over ! ;

   Sometimes derived classes want to access the method of the parent
object.  There are two ways to achieve this with Mini-OOF: first, you
could use named words, and second, you could look up the vtable of the
parent object.

     : :: ( class "name" -- ) ' >body @ + @ compile, ;

   Nothing can be more confusing than a good example, so here is one.
First let’s declare a text object (called ‘button’), that stores text
and position:

     object class
       cell var text
       cell var len
       cell var x
       cell var y
       method init
       method draw
     end-class button

Now, implement the two methods, ‘draw’ and ‘init’:

     :noname ( o -- )
      >r r@ x @ r@ y @ at-xy  r@ text @ r> len @ type ;
      button defines draw
     :noname ( addr u o -- )
      >r 0 r@ x ! 0 r@ y ! r@ len ! r> text ! ;
      button defines init

To demonstrate inheritance, we define a class ‘bold-button’, with no new
data and no new selectors:

     button class
     end-class bold-button

     : bold   27 emit ." [1m" ;
     : normal 27 emit ." [0m" ;

The class ‘bold-button’ has a different draw method to ‘button’, but the
new method is defined in terms of the draw method for ‘button’:

     :noname bold [ button :: draw ] normal ; bold-button defines draw

Finally, create two objects and apply selectors:

     button new Constant foo
     s" thin foo" foo init
     page
     foo draw
     bold-button new Constant bar
     s" fat bar" bar init
     1 bar y !
     bar draw


File: gforth.info,  Node: Mini-OOF2,  Next: Comparison with other object models,  Prev: Mini-OOF,  Up: Object-oriented Forth

6.24.6 Mini-OOF2
----------------

Mini-OOF2 is very similar to Mini-OOF in many respects, but differs
significantly in a few aspects.  In particular, Mini-OOF2 has a current
object variable, and uses the primitives ‘>o’ and ‘o>’ to manipulate
that object stack.  All method invocations and instance variable
accesses refer to the current object.

‘>o’ ( c-addr – r:c-old ) new “to-o”
   Set the current object to C_ADDR, the previous current object is
pushed to the return stack

‘o>’ ( r:c-addr – ) new “o-restore”
   Restore the previous current object from the return stack

   To ease passing an object pointer to method invocation or instance
variable accesses, the additional recognizer ‘rec-moof2’ is activated.

‘rec-moof2’ ( addr u – xt translate-moof2 | notfound  ) mini-oof2 “rec-moof2”
   Very simplistic dot-parser, transforms ‘.’SELECTOR/IVAR to ‘>o’
SELECTOR/IVAR ‘o>’.

   To assign methods to selectors, use XT CLASS ‘is’ SELECTOR, so no
‘defines’ necessary.  For early binding of methods, ‘[’ CLASS ‘] defers’
SELECTOR is used, no need for ‘::’.


File: gforth.info,  Node: Comparison with other object models,  Prev: Mini-OOF2,  Up: Object-oriented Forth

6.24.7 Comparison with other object models
------------------------------------------

Many object-oriented Forth extensions have been proposed (‘A survey of
object-oriented Forths’ (SIGPLAN Notices, April 1996) by Bradford J.
Rodriguez and W. F. S. Poehlman lists 17).  This section discusses the
relation of the object models described here to two well-known and two
closely-related (by the use of method maps) models.  Andras Zsoter
helped us with this section.

   The most popular model currently seems to be the Neon model (see
‘Object-oriented programming in ANS Forth’ (Forth Dimensions, March
1997) by Andrew McKewan) but this model has a number of limitations (1):

   • It uses a ‘_selector object_’ syntax, which makes it unnatural to
     pass objects on the stack.

   • It requires that the selector parses the input stream (at compile
     time); this leads to reduced extensibility and to bugs that are
     hard to find.

   • It allows using every selector on every object; this eliminates the
     need for interfaces, but makes it harder to create efficient
     implementations.

   Another well-known publication is ‘Object-Oriented Forth’ (Academic
Press, London, 1987) by Dick Pountain.  However, it is not really about
object-oriented programming, because it hardly deals with late binding.
Instead, it focuses on features like information hiding and overloading
that are characteristic of modular languages like Ada (83).

   In Does late binding have to be slow?
(http://www.forth.org/oopf.html) (Forth Dimensions 18(1) 1996, pages
31-35) Andras Zsoter describes a model that makes heavy use of an active
object (like ‘this’ in ‘objects.fs’): The active object is not only used
for accessing all fields, but also specifies the receiving object of
every selector invocation; you have to change the active object
explicitly with ‘{ ... }’, whereas in ‘objects.fs’ it changes more or
less implicitly at ‘m: ... ;m’.  Such a change at the method entry point
is unnecessary with Zsoter’s model, because the receiving object is the
active object already.  On the other hand, the explicit change is
absolutely necessary in that model, because otherwise no one could ever
change the active object.  An Standard Forth implementation of this
model is available through <http://www.forth.org/oopf.html>.

   The ‘oof.fs’ model combines information hiding and overloading
resolution (by keeping names in various word lists) with object-oriented
programming.  It sets the active object implicitly on method entry, but
also allows explicit changing (with ‘>o...o>’ or with ‘with...endwith’).
It uses parsing and state-smart objects and classes for resolving
overloading and for early binding: the object or class parses the
selector and determines the method from this.  If the selector is not
parsed by an object or class, it performs a call to the selector for the
active object (late binding), like Zsoter’s model.  Fields are always
accessed through the active object.  The big disadvantage of this model
is the parsing and the state-smartness, which reduces extensibility and
increases the opportunities for subtle bugs; essentially, you are only
safe if you never tick or ‘postpone’ an object or class (Bernd
disagrees, but I (Anton) am not convinced).

   The ‘mini-oof.fs’ model is quite similar to a very stripped-down
version of the ‘objects.fs’ model, but syntactically it is a mixture of
the ‘objects.fs’ and ‘oof.fs’ models.

   ---------- Footnotes ----------

   (1) A longer version of this critique can be found in ‘On
Standardizing Object-Oriented Forth Extensions’ (Forth Dimensions, May
1997) by Anton Ertl.


File: gforth.info,  Node: Regular Expressions,  Next: Programming Tools,  Prev: Object-oriented Forth,  Up: Words

6.25 Regular Expressions
========================

Regular expressions are pattern matching algorithms for strings found in
many contemporary languages.  You can add regular expression
functionality to Gforth with ‘require regexp.fs’.

   The classical implementation for this pattern matching is a
backtracking algorithm, which is also necessary if you want to have
features like backreferencing.  Gforth implements regular expressions by
providing a language to define backtracking programs for pattern
matching.  Basic element is the control structure ‘FORK’ ... ‘JOIN’,
which is a forward call within a word, and therefore allows to code a
lightweight try and fail control structure.

‘FORK’ ( compilation – orig ; run-time f –  ) gforth-0.7 “FORK”
   AHEAD-like control structure: calls the code after JOIN.

‘JOIN’ ( orig –  ) gforth-0.7 “JOIN”
   THEN-like control structure for FORK

   You can program any sort of arbitrary checks yourself by computing a
flag and ‘?LEAVE’ when the check fails.  Your regular expression code is
enclosed in ‘((’ and ‘))’.

‘((’ ( addr u –  ) regexp-pattern “((”
   start regexp block

‘))’ ( – flag  ) regexp-pattern “))”
   end regexp block

   Pattern matching in regular expressions have character sets as
elements, so a number of functions allow you to create and modify
character sets (called ‘charclass’).  All characters here are bytes, so
this doesn’t extend to unicode characters.

‘charclass’ ( –  ) regexp-cg “charclass”
   Create a charclass

‘+char’ ( char –  ) regexp-cg “+char”
   add a char to the current charclass

‘-char’ ( char –  ) regexp-cg “-char”
   remove a char from the current charclass

‘..char’ ( start end –  ) regexp-cg “..char”
   add a range of chars to the current charclass

‘+chars’ ( addr u –  ) regexp-cg “+chars”
   add a string of chars to the current charclass

‘+class’ ( class –  ) regexp-cg “+class”
   union of charclass CLASS and the current charclass

‘-class’ ( class –  ) regexp-cg “-class”
   subtract the charclass CLASS from the current charclass

   There are predefined charclasses and tests for them, and generic
checks.  If a check fails, the next possible alternative of the regular
expression is tried, or a loop is terminated.

‘c?’ ( addr class –  ) regexp-pattern “c?”
   check ADDR for membership in charclass CLASS

‘-c?’ ( addr class –  ) regexp-pattern “-c?”
   check ADDR for not membership in charclass CLASS

‘\d’ ( addr – addr’  ) regexp-pattern “\d”
   check for digit

‘\s’ ( addr – addr’  ) regexp-pattern “\s”
   check for blanks

‘.?’ ( addr – addr’  ) regexp-pattern “.?”
   check for any single charachter

‘-\d’ ( addr – addr’  ) regexp-pattern “-\d”
   check for not digit

‘-\s’ ( addr – addr’  ) regexp-pattern “-\s”
   check for not blank

‘`’ ( "char" –  ) regexp-pattern “‘”
   check for particular char

‘`?’ ( "char" –  ) regexp-pattern “‘?”

‘-`’ ( "char" –  ) regexp-pattern “-‘”
   check for particular char

   You can certainly also check for start and end of the string, and for
whole string constants.

‘\^’ ( addr – addr  ) regexp-pattern “\^”
   check for string start

‘\$’ ( addr – addr  ) regexp-pattern “\$”
   check for string end

‘str=?’ ( addr1 addr u – addr2  ) regexp-pattern “str=?”
   check for a computed string on the stack (possibly a backreference)

   doc-=”

   Loops that check for repeated character sets can be greedy or
non-greedy.

‘{**’ ( addr – addr addr  ) regexp-pattern “begin-greedy-star”
   greedy zero-or-more pattern

‘**}’ ( sys –  ) regexp-pattern “end-greedy-star”
   end of greedy zero-or-more pattern

‘{++’ ( addr – addr addr  ) regexp-pattern “begin-greedy-plus”
   greedy one-or-more pattern

‘++}’ ( sys –  ) regexp-pattern “end-greedy-plus”
   end of greedy one-or-more pattern

‘{*’ ( addr – addr addr  ) regexp-pattern “begin-non-greedy-star”
   non-greedy zero-or-more pattern

‘*}’ ( addr addr’ – addr’  ) regexp-pattern “end-non-greedy-star”
   end of non-greedy zero-or-more pattern

‘{+’ ( addr – addr addr  ) regexp-pattern “begin-non-greedy-plus”
   non-greedy one-or-more pattern

‘+}’ ( addr addr’ – addr’  ) regexp-pattern “end-non-greedy-plus”
   end of non-greedy one-or-more pattern

   Example: Searching for a substring really is a non-greedy match of
anything in front of it.

‘//’ ( –  ) regexp-pattern “//”
   search for string

   Alternatives are written with

‘{{’ ( addr – addr addr  ) regexp-pattern “begin-alternatives”
   Start of alternatives

‘||’ ( addr addr – addr addr  ) regexp-pattern “next-alternative”
   separator between alternatives

‘}}’ ( addr addr – addr  ) regexp-pattern “end-alternatives”
   end of alternatives

   You can use up to 9 variables named ‘\1’ to ‘\9’ to refer to matched
substrings

‘\(’ ( addr – addr  ) regexp-pattern “\(”
   start of matching variable; variables are referred as \\1–9

‘\)’ ( addr – addr  ) regexp-pattern “\)”
   end of matching variable

‘\0’ ( – addr u  ) regexp-pattern “\0”
   the whole string

   Certainly, you can also write code to replace patterns you found.

‘s>>’ ( addr – addr  ) regexp-replace “s>>”
   Start replace pattern region

‘>>’ ( addr – addr  ) regexp-replace “>>”
   Start arbitrary replacement code, the code shall compute a string on
the stack and pass it to ‘<<’

‘<<’ ( run-addr addr u – run-addr  ) regexp-replace “<<”
   Replace string from start of replace pattern region with ADDR U

‘<<"’ ( "string<">" –  ) regexp-replace “<<"”
   Replace string from start of replace pattern region with STRING

‘s//’ ( addr u – ptr  ) regexp-replace “s//”
   start search/replace loop

‘//s’ ( ptr –  ) regexp-replace “//s”
   search end

‘//o’ ( ptr addr u – addr’ u’  ) regexp-replace “//o”
   end search/replace single loop

‘//g’ ( ptr addr u – addr’ u’  ) regexp-replace “//g”
   end search/replace all loop

   Examples can be found in ‘test/regexp-test.fs’.


File: gforth.info,  Node: Programming Tools,  Next: Multitasker,  Prev: Regular Expressions,  Up: Words

6.26 Programming Tools
======================

* Menu:

* Locating source code definitions::  and editing
* Locating uses of a word::  ‘where’.
* Locating exception source::  バックトレースの検証(examing)
* Examining compiled code::  ‘see’ and friends.
* Examining data::           スタック と メモリ
* Forgetting words::         通常、再ロード前に使われます
* Debugging::                トレーサー ‘~~’
                               を適宜挿入することによって
* Assertions::               あなたのプログラムを自己チェックさせます
* Singlestep Debugger::      あなたのプログラムをワート単位で実行します
* Code Coverage::            実行頻度を測定します


File: gforth.info,  Node: Locating source code definitions,  Next: Locating uses of a word,  Prev: Programming Tools,  Up: Programming Tools

6.26.1 Locating source code definitions
---------------------------------------

Many programming systems are organized as an integrated development
environment (IDE) where the editor is the hub of the system, and allows
building and running programs.  If you want that, Gforth has it, too
(*note Emacs and Gforth::).

   However, several Forth systems have a different kind of IDE: The
Forth command line is the hub of the environment; you can view the
source from there in various ways, and call an editor if needed.

   Gforth also implements such an IDE. It mostly follows the conventions
of SwiftForth where they exist, but implements features beyond them.

   An advantage of this approach is that it allows you to use your
favourite editor: set the environment variable ‘EDITOR’ to your
favourite editor, and the editing commands will call that editor; Gforth
invokes some GUI editors in the background (so you do not need to finish
editing to continue with your Forth session), terminal editors in the
foreground (default for editors not known to Gforth is foreground).  If
you have not set ‘EDITOR’, the default editor is ‘vi’.

‘locate’ ( "name" –  ) gforth-1.0 “locate”
   Show the source code of the word name and set the current location
there.

   doc-xt-locate

   The _current location_ is set by a number of other words in addition
to ‘locate’.  Also, when an error happens while loading a file, the
location of the error becomes the current location.

   A number of words work with the current location:

‘l’ ( –  ) gforth-1.0 “l”
   Display source code lines at the current location.

‘n’ ( –  ) gforth-1.0 “n”
   Display lines behind the current location, or behind the last ‘n’ or
‘b’ output (whichever was later).

‘b’ ( –  ) gforth-1.0 “b”
   Display lines before the current location, or before the last ‘n’ or
‘b’ output (whichever was later).

‘g’ ( –  ) gforth-0.7 “g”
   Enter the editor at the current location, or at the start of the last
‘n’ or ‘b’ output (whichever was later).

   You can control how many lines ‘l’, ‘n’ and ‘b’ show by changing the
values:

‘before-locate’ ( – u  ) gforth-1.0 “before-locate”
   number of lines shown before current location (default 3).

‘after-locate’ ( – u  ) gforth-1.0 “after-locate”
   number of lines shown after current location (default 12).

   Finally, you can directly go to the source code of a word in the
editor with

‘edit’ ( "name" –  ) gforth-1.0 “edit”
   Enter the editor at the location of "name"

   You can see the definitions of similarly-named words with

‘browse’ ( "subname" –  ) gforth-1.0 “browse”
   Show all places where a word with a name that contains subname is
defined (‘mwords’-like, *note Word Lists::).  You can then use ‘ww’,
‘nw’ or ‘bw’ (*note Locating uses of a word::) to inspect specific
occurences more closely.


File: gforth.info,  Node: Locating uses of a word,  Next: Locating exception source,  Prev: Locating source code definitions,  Up: Programming Tools

6.26.2 Locating uses of a word
------------------------------

‘where’ ( "name" –  ) gforth-1.0 “where”
   Show all places where name is used (text-interpreted).  You can then
use ‘ww’, ‘nw’ or ‘bw’ to inspect specific occurences more closely.
Gforth’s ‘where’ does not show the definition of name; use ‘locate’ for
that.

‘ww’ ( u –  ) gforth-1.0 “ww”
   The next ‘l’ or ‘g’ shows the ‘where’ result with index u

‘nw’ ( –  ) gforth-1.0 “nw”
   The next ‘l’ or ‘g’ shows the next ‘where’ result; if the current one
is the last one, after ‘nw’ there is no current one.  If there is no
current one, after ‘nw’ the first one is the current one.

‘bw’ ( –  ) gforth-1.0 “bw”
   The next ‘l’ or ‘g’ shows the previous ‘where’ result; if the current
one is the first one, after ‘bw’ there is no current one.  If there is
no current one, after ‘bw’ the last one is the current one.

‘gg’ ( –  ) gforth-1.0 “gg”
   The next ‘ww’, ‘nw’, ‘bw’, ‘bb’, ‘nb’, ‘lb’ (but not ‘locate’,
‘edit’, ‘l’ or ‘g’) puts it result in the editor (like ‘g’).  Use ‘gg
gg’ to make this permanent rather than one-shot.

‘ll’ ( –  ) gforth-1.0 “ll”
   The next ‘ww’, ‘nw’, ‘bw’, ‘bb’, ‘nb’, ‘lb’ (but not ‘locate’,
‘edit’, ‘l’ or ‘g’) displays in the Forth system (like ‘l’).  Use ‘ll
ll’ to make this permanent rather than one-shot.

‘whereg’ ( "name" –  ) gforth-1.0 “whereg”
   Like ‘where’, but puts the output in the editor.  In Emacs, you can
then use the compilation-mode commands (*note (emacs)Compilation Mode::)
to inspect specific occurences more closely.

‘short-where’ ( –  ) gforth-1.0 “short-where”
   Set up ‘where’ to use a short file format (default).

‘expand-where’ ( –  ) gforth-1.0 “expand-where”
   Set up ‘where’ to use a fully expanded file format (to pass to e.g.
editors).

‘prepend-where’ ( –  ) gforth-1.0 “prepend-where”
   Set up ‘where’ to show the file on a separate line, followed by
‘where’ lines without file names (like SwiftForth).

   The data we have on word usage also allows us to show which words
have no uses:

‘unused-words’ ( –  ) gforth-1.0 “unused-words”
   list all words without usage


File: gforth.info,  Node: Locating exception source,  Next: Examining compiled code,  Prev: Locating uses of a word,  Up: Programming Tools

6.26.3 Locating exception source
--------------------------------

‘tt’ ( u –  ) gforth-1.0 “tt”

‘nt’ (  –  ) gforth-1.0 “nt”

‘bt’ ( –  ) gforth-1.0 “bt”


File: gforth.info,  Node: Examining compiled code,  Next: Examining data,  Prev: Locating exception source,  Up: Programming Tools

6.26.4 Examining compiled code
------------------------------

And finally, ‘see’ and friends show compiled code.  Some of the things
in the source code are not present in the compiled code (e.g.,
formatting and comments), but this is useful to see what threaded code
or native code is produced by macros and Gforth’s optimization features.

‘see’ ( "<spaces>name" –  ) tools “see”
   Locate NAME using the current search order.  Display the definition
of NAME.  Since this is achieved by decompiling the definition, the
formatting is mechanised and some source information (comments,
interpreted sequences within definitions etc.)  is lost.

‘xt-see’ ( xt –  ) gforth-0.2 “xt-see”
   Decompile the definition represented by xt.

‘simple-see’ ( "name" –  ) gforth-0.6 “simple-see”
   Decompile the colon definition name, showing a line for each cell,
and try to guess a meaning for the cell, and show that.

‘xt-simple-see’ ( xt –  ) gforth-1.0 “xt-simple-see”
   Decompile the colon definition xt like ‘simple-see’

‘simple-see-range’ ( addr1 addr2 –  ) gforth-0.6 “simple-see-range”
   Decompile code in [addr1,addr2) like ‘simple-see’

‘see-code’ ( "name" –  ) gforth-0.7 “see-code”
   Like ‘simple-see’, but also shows the dynamic native code for the
inlined primitives.  For static superinstructions, it shows the
primitive sequence instead of the first primitive (the other primitives
of the superinstruction are shown, too).  For primitives for which
native code is generated, it shows the number of stack items in
registers at the beginning and at the end (e.g., ‘1->1’ means 1 stack
item is in a register at the start and at the end).  For each primitive
or superinstruction with native code, the inline arguments and component
primitives are shown first, then the native code.

‘xt-see-code’ ( xt –  ) gforth-1.0 “xt-see-code”
   Decompile the colon definition xt like ‘see-code’.

‘see-code-range’ ( addr1 addr2 –  ) gforth-0.7 “see-code-range”
   Decompile code in [addr1,addr2) like ‘see-code’.

   As an example, consider:

     : foo x f@ fsin drop over ;

   This is not particularly useful, but it demonstrates the various code
generation differences.  Compiling this on ‘gforth-fast’ on AMD64 and
then using ‘see-code foo’ outputs:

     $7FD0CEE8C510 lit f@     1->1
     $7FD0CEE8C518 x
     $7FD0CEE8C520 f@
     7FD0CEB51697:   movsd   [r12],xmm15
     7FD0CEB5169D:   mov     rax,$00[r13]
     7FD0CEB516A1:   sub     r12,$08
     7FD0CEB516A5:   add     r13,$18
     7FD0CEB516A9:   movsd   xmm15,[rax]
     7FD0CEB516AE:   mov     rcx,-$08[r13]
     7FD0CEB516B2:   jmp     ecx
     $7FD0CEE8C528 fsin
     $7FD0CEE8C530 drop    1->0
     7FD0CEB516B4:   add     r13,$08
     $7FD0CEE8C538 over    0->1
     7FD0CEB516B8:   mov     r8,$10[r15]
     7FD0CEB516BC:   add     r13,$08
     $7FD0CEE8C540 ;s    1->1
     7FD0CEB516C0:   mov     r10,[rbx]
     7FD0CEB516C3:   add     rbx,$08
     7FD0CEB516C7:   lea     r13,$08[r10]
     7FD0CEB516CB:   mov     rcx,-$08[r13]
     7FD0CEB516CF:   jmp     ecx

   First, you see a threaded-code cell for a static superinstruction
with the components ‘lit’ and ‘f@’, starting and ending with one data
stack item in a register (‘1->1’); this is followed by the cell for the
argument ‘x’ of ‘lit’, and the cell for the ‘f@’ component of the
superinstruction; the latter cell is not used, but is there for
Gforth-internal reasons.

   Next, the dynamically generated native code for the superinstruction
‘lit f@’ is shown; note that this native code is not mixed with the
threaded code in memory, as you can see by comparing the addresses.

   If you want to understand the native code shown here: the
threaded-code instruction pointer is in ‘r13’, the data stack pointer in
‘r15’; the first data stack register is ‘r8’ (i.e., the top of stack
resides there if there is one data stack item in a register); the return
stack pointer is in ‘rbx’, the FP stack pointer in ‘r12’, and the top of
the floating-pont stack in ‘xmm15’.  Note that the register assignments
vary between engines, so you may see a different register assignment for
this code.

   The dynamic native code for ‘lit f@’ ends with a dispatch jump (aka
NEXT), because the code for the next word ‘fsin’ in the definition is
not dynamically generated.

   Next, you see the threaded-code cell for ‘fsin’.  There is no
dynamically-generated native code for this word, and ‘see-code’ does not
show the static native code for it (you can look at it with ‘see fsin’).
Like all words with static native code in ‘gforth-fast’, the effect on
the data stack representation is ‘1->1’ (for ‘gforth’, ‘0->0’), but this
is not shown.

   Next, you see the threaded-code cell for ‘drop’; the native-code
variant used here starts with one data stack item in registers, and ends
with zero data stack items in registers (‘1->0’).  This is followed by
the native code for this variant of ‘drop’.  There is no NEXT here,
because the native code falls through to the code for the next word.

   Next, you see the threaded-code cell for ‘over’ followed by the
dynamically-generated native code in the ‘0->1’ variant.

   Finally, you see the threaded and native code for ‘;s’ (the primitive
compiled for ‘;’ in ‘foo’).  ‘;s’ performs control flow (it returns), so
it has to end with a NEXT.


File: gforth.info,  Node: Examining data,  Next: Forgetting words,  Prev: Examining compiled code,  Up: Programming Tools

6.26.5 Examining data and code
------------------------------

The following words inspect the stack non-destructively:

‘...’ ( x1 .. xn – x1 .. xn  ) gforth-1.0 “...”
   smart version of ‘.s’

‘.s’ ( –  ) tools “dot-s”
   Display the number of items on the data stack, followed by a list of
the items (but not more than specified by ‘maxdepth-.s’; TOS is the
right-most item.

‘f.s’ ( –  ) gforth-0.2 “f-dot-s”
   Display the number of items on the floating-point stack, followed by
a list of the items (but not more than specified by ‘maxdepth-.s’; TOS
is the right-most item.

‘f.s-precision’ ( – u  ) gforth-1.0 “f.s-precision”
   A ‘value’.  U is the field width for f.s output.  Other precision
details are derived from that value.

‘maxdepth-.s’ ( – addr  ) gforth-0.2 “maxdepth-dot-s”
   A variable containing 9 by default.  ‘.s’ and ‘f.s’ display at most
that many stack items.

   There is a word ‘.r’ but it does not display the return stack!  It is
used for formatted numeric output (*note Simple numeric output::).

   The following words work on the stack as a whole, either by
determining the depth or by clearing them:

‘depth’ ( – +n  ) core “depth”
   +N is the number of values that were on the data stack before +N
itself was placed on the stack.

‘fdepth’ ( – +n  ) floating “f-depth”
   +n is the current number of (floating-point) values on the
floating-point stack.

‘clearstack’ ( ... –  ) gforth-0.2 “clear-stack”
   remove and discard all/any items from the data stack.

‘fclearstack’ ( r0 .. rn –  ) gforth-1.0 “f-clearstack”
   clear the floating point stack

‘clearstacks’ ( ... –  ) gforth-0.7 “clear-stacks”
   empty data and FP stack

   The following words inspect memory.

‘?’ ( a-addr –  ) tools “question”
   Display the contents of address A-ADDR in the current number base.

‘dump’ ( addr u –  ) tools “dump”
   Display U lines of memory starting at address ADDR.  Each line
displays the contents of 16 bytes.  When Gforth is running under an
operating system you may get ‘Invalid memory address’ errors if you
attempt to access arbitrary locations.


File: gforth.info,  Node: Forgetting words,  Next: Debugging,  Prev: Examining data,  Up: Programming Tools

6.26.6 Forgetting words
-----------------------

Forth allows you to forget words (and everything that was alloted in the
dictonary after them) in a LIFO manner.

‘marker’ ( "<spaces> name" –  ) core-ext “marker”
   Create a definition, name (called a mark) whose execution semantics
are to remove itself and everything defined after it.

   The most common use of this feature is during progam development:
when you change a source file, forget all the words it defined and load
it again (since you also forget everything defined after the source file
was loaded, you have to reload that, too).  Note that effects like
storing to variables and destroyed system words are not undone when you
forget words.  With a system like Gforth, that is fast enough at
starting up and compiling, I find it more convenient to exit and restart
Gforth, as this gives me a clean slate.

   Here’s an example of using ‘marker’ at the start of a source file
that you are debugging; it ensures that you only ever have one copy of
the file’s definitions compiled at any time:

     [IFDEF] my-code
         my-code
     [ENDIF]

     marker my-code
     init-included-files

     \ .. definitions start here
     \ .
     \ .
     \ end


File: gforth.info,  Node: Debugging,  Next: Assertions,  Prev: Forgetting words,  Up: Programming Tools

6.26.7 Debugging
----------------

Languages with a slow edit/compile/link/test development loop tend to
require sophisticated tracing/stepping debuggers to facilate debugging.

   A much better (faster) way in fast-compiling languages is to add
printing code at well-selected places, let the program run, look at the
output, see where things went wrong, add more printing code, etc., until
the bug is found.

   The simple debugging aids provided in ‘debugs.fs’ are meant to
support this style of debugging.

   The word ‘~~’ prints debugging information (by default the source
location and the stack contents).  It is easy to insert.  If you use
Emacs it is also easy to remove (‘C-x ~’ in the Emacs Forth mode to
query-replace them with nothing).  The deferred words ‘printdebugdata’
and ‘.debugline’ control the output of ‘~~’.  The default source
location output format works well with Emacs’ compilation mode, so you
can step through the program at the source level using ‘C-x `’ (the
advantage over a stepping debugger is that you can step in any direction
and you know where the crash has happened or where the strange data has
occurred).

‘~~’ ( –  ) gforth-0.2 “tilde-tilde”
   Prints the source code location of the ‘~~’ and the stack contents
with ‘.debugline’.

‘printdebugdata’ ( –  ) gforth-0.2 “print-debug-data”

‘.debugline’ ( nfile nline –  ) gforth-0.6 “print-debug-line”
   Print the source code location indicated by NFILE NLINE, and
additional debugging information; the default ‘.debugline’ prints the
additional information with ‘printdebugdata’.

‘debug-fid’ ( – file-id  ) gforth-1.0 “File-id”
   debugging words for output.  By default it is the process’s ‘stderr’.

   ‘~~’ (and assertions) will usually print the wrong file name if a
marker is executed in the same file after their occurance.  They will
print ‘*somewhere*’ as file name if a marker is executed in the same
file before their occurance.

‘once’ ( –  ) gforth-1.0 “once”
   do the following up to THEN only once

‘~~bt’ ( –  ) gforth-1.0 “~~bt”
   print stackdump and backtrace

‘~~1bt’ ( –  ) gforth-1.0 “~~1bt”
   print stackdump and backtrace once

‘???’ ( –  ) gforth-0.2 “???”
   Open a debuging shell

‘WTF??’ ( –  ) gforth-1.0 “WTF??”
   Open a debugging shell with backtrace and stack dump

‘!!FIXME!!’ ( –  ) gforth-1.0 “!!FIXME!!”
   word that should never be reached

‘replace-word’ ( xt1 xt2 –  ) gforth-1.0 “replace-word”
   make xt2 do xt1, both need to be colon definitions

‘~~Variable’ ( "name" –  ) gforth-1.0 “~~Variable”
   Variable that will be watched on every access

‘~~Value’ ( n "name" –  ) gforth-1.0 “~~Value”
   Value that will be watched on every access

‘+ltrace’ ( –  ) gforth-1.0 “+ltrace”
   turn on line tracing

‘-ltrace’ ( –  ) gforth-1.0 “-ltrace”
   turn off line tracing

‘#loc’ ( nline nchar "file" –  ) gforth-1.0 “#loc”
   set next word’s location to NLINE NCHAR in "FILE"


File: gforth.info,  Node: Assertions,  Next: Singlestep Debugger,  Prev: Debugging,  Up: Programming Tools

6.26.8 Assertions
-----------------

It is a good idea to make your programs self-checking, especially if you
make an assumption that may become invalid during maintenance (for
example, that a certain field of a data structure is never zero).
Gforth supports “assertions” for this purpose.  They are used like this:

     assert( flag )

   The code between ‘assert(’ and ‘)’ should compute a flag, that should
be true if everything is alright and false otherwise.  It should not
change anything else on the stack.  The overall stack effect of the
assertion is ‘( -- )’.  E.g.

     assert( 1 1 + 2 = ) \ what we learn in school
     assert( dup 0<> ) \ assert that the top of stack is not zero
     assert( false ) \ this code should not be reached

   The need for assertions is different at different times.  During
debugging, we want more checking, in production we sometimes care more
for speed.  Therefore, assertions can be turned off, i.e., the assertion
becomes a comment.  Depending on the importance of an assertion and the
time it takes to check it, you may want to turn off some assertions and
keep others turned on.  Gforth provides several levels of assertions for
this purpose:

‘assert0(’ ( –  ) gforth-0.2 “assert-zero”
   Important assertions that should always be turned on.

‘assert1(’ ( –  ) gforth-0.2 “assert-one”
   Normal assertions; turned on by default.

‘assert2(’ ( –  ) gforth-0.2 “assert-two”
   Debugging assertions.

‘assert3(’ ( –  ) gforth-0.2 “assert-three”
   Slow assertions that you may not want to turn on in normal debugging;
you would turn them on mainly for thorough checking.

‘assert(’ ( –  ) gforth-0.2 “assert(”
   Equivalent to ‘assert1(’

‘)’ ( –  ) gforth-0.2 “close-paren”
   End an assertion.  Generic end, can be used for other similar
purposes

   The variable ‘assert-level’ specifies the highest assertions that are
turned on.  I.e., at the default ‘assert-level’ of one, ‘assert0(’ and
‘assert1(’ assertions perform checking, while ‘assert2(’ and ‘assert3(’
assertions are treated as comments.

   The value of ‘assert-level’ is evaluated at compile-time, not at
run-time.  Therefore you cannot turn assertions on or off at run-time;
you have to set the ‘assert-level’ appropriately before compiling a
piece of code.  You can compile different pieces of code at different
‘assert-level’s (e.g., a trusted library at level 1 and newly-written
code at level 3).

‘assert-level’ ( – a-addr  ) gforth-0.2 “assert-level”
   All assertions above this level are turned off.

   If an assertion fails, a message compatible with Emacs’ compilation
mode is produced and the execution is aborted (currently with ‘ABORT"’.
If there is interest, we will introduce a special throw code.  But if
you intend to ‘catch’ a specific condition, using ‘throw’ is probably
more appropriate than an assertion).

   Assertions (and ‘~~’) will usually print the wrong file name if a
marker is executed in the same file after their occurance.  They will
print ‘*somewhere*’ as file name if a marker is executed in the same
file before their occurance.

   Definitions in Standard Forth for these assertion words are provided
in ‘compat/assert.fs’.


File: gforth.info,  Node: Singlestep Debugger,  Next: Code Coverage,  Prev: Assertions,  Up: Programming Tools

6.26.9 Singlestep Debugger
--------------------------

シングルステップ・デバッガーは、 ‘gforth-itc’ エンジンでのみ動作します。

   新しいワードを作成するとき、 それが正しく動作するかどうかを確認する必
要があることがよくあります。 これを行うには、‘dbg badword’ と入力します
。 デバッグ・セッションは以下のようになります:

     : badword 0 DO i . LOOP ;  ok
     2 dbg badword
     : badword
     Scanning code...

     Nesting debugger ready!

     400D4738  8049BC4 0              -> [ 2 ] 00002 00000
     400D4740  8049F68 DO             -> [ 0 ]
     400D4744  804A0C8 i              -> [ 1 ] 00000
     400D4748 400C5E60 .              -> 0 [ 0 ]
     400D474C  8049D0C LOOP           -> [ 0 ]
     400D4744  804A0C8 i              -> [ 1 ] 00001
     400D4748 400C5E60 .              -> 1 [ 0 ]
     400D474C  8049D0C LOOP           -> [ 0 ]
     400D4758  804B384 ;              ->  ok

   各行が 1 ステップです。 次のワードを実行して表示するには、 常に
Return キーを押す必要があります。 次のワード全体を実行したくない場合は、
‘nest’ に対して ‘n’ と入力する必要があります。 利用可能なキーの概要は以
下のとおりです:

<RET>
     Next; 次のワードを実行する(execute)。

n
     Nest; 次のワードまで 1 ステップずつ辿る。

u
     Unnest; デバッグを停止し(stop)、残りのワードを実行します(execute)。
     ネスト(nest)機能でこのワードに到達した場合、 それを呼び出したワード
     でデバッグを続行します。

d
     Done; デバッグを停止し(stop)、 残りを実行します(execute)。

s
     Stop; 直ちに終了(abort)します。

   このメカニズムを使用して大規模なアプリケーションをデバッグすることは
、 あなたが関心のある部分が始まる前にプログラム内に非常に深くネストする
必要があるため、 非常に困難です。 これにはとても時間がかかります。

   これをより直接的に行うには、 ‘BREAK:’ コマンドをあなたのソース・コー
ドに追加します。 プログラムの実行が ‘BREAK:’ に達すると、 シングル・ステ
ップ・デバッガーが呼び出され、 上記すべての機能が利用できるようになりま
す。

   デバッグする部分が複数ある場合、 プログラムが現在どこで停止しているか
を把握できると便利です。 これを行うには、 ‘BREAK" string"’ コマンドを使
用します。 これは ‘BREAK:’ と同様に動作しますが、 「ブレークポイント」に
到達したときに文字列が出力される点が異なります。

‘dbg’ ( "name" –  ) gforth-0.2 “dbg”

‘break:’ ( –  ) gforth-0.4 “break:”

‘break"’ ( ’ccc"’ –  ) gforth-0.4 “break"”


File: gforth.info,  Node: Code Coverage,  Prev: Singlestep Debugger,  Up: Programming Tools

6.26.10 Code Coverage and Execution Frequency
---------------------------------------------

If you run extensive tests on your code, you often want to figure out if
the tests exercise all parts of the code.  This is called (test)
coverage.  The file ‘coverage.fs’ contains tools for measuring the
coverage as well as execution frequency.

   Code coverage inserts counting code in every basic block
(straight-line code sequence) loaded after ‘coverage.fs’.  Each time
that code is run, it increments the counter for that basic block.  Later
you can show the source file with the counts inserted in these basic
blocks.

‘nocov[’ ( –  ) gforth-1.0 “nocov-bracket”
   (Immediate) Turn coverage off temporarily.

‘]nocov’ ( –  ) gforth-1.0 “bracket-nocov”
   (Immediate) End of temporary turned off coverage.

‘coverage?’ ( – f  ) gforth-internal “coverage?”
   Value: Coverage check on/off

‘cov+’ ( –  ) gforth-experimental “cov+”
   (Immediate) Place a coverage counter here.

‘?cov+’ ( flag – flag  ) gforth-experimental “?cov+”
   (Immediate) A coverage counter for a flag; in the coverage output you
see three numbers behind ‘?cov’: The first is the number of executions
where the top-of-stack was non-zero; the second is the number of
executions where it was zero; the third is the total number of
executions.

‘.coverage’ ( –  ) gforth-experimental “.coverage”
   Show code with execution frequencies.

‘annotate-cov’ ( –  ) gforth-experimental “annotate-cov”
   For every file with coverage information, produce a ‘.cov’ file that
has the execution frequencies inserted.  We recommend to use ‘bw-cover’
first (with the default ‘color-cover’ you get escape sequences in the
files).

‘cov%’ ( –  ) gforth-experimental “cov-percent”
   Print the percentage of basic blocks loaded after ‘coverage.fs’ that
are executed at least once.

‘.cover-raw’ ( –  ) gforth-experimental “.cover-raw”
   Print raw execution counts.

   By default, the counts are shown in colour (using ANSI escape
sequences), but you can use ‘bw-cover’ to show them in parenthesized
form without escape sequences.

‘bw-cover’ ( –  ) gforth-1.0 “bw-cover”
   Print execution counts in parentheses (source-code compatible).

‘color-cover’ ( –  ) gforth-1.0 “color-cover”
   Print execution counts in colours (default).

   You can save and reload the coverage counters in binary format, to
aggregate coverage counters across several test runs.

‘save-cov’ ( –  ) gforth-experimental “save-cov”
   Save coverage counters.

‘load-cov’ ( –  ) gforth-experimental “load-cov”
   Load coverage counters.


File: gforth.info,  Node: Multitasker,  Next: C Interface,  Prev: Programming Tools,  Up: Words

6.27 Multitasker
================

* Menu:

* Pthreads::                 ネイティブ Unix 用マルチタスカー
* Cilk::                     Cilk風の spawn+sync 実装

Gforth は 2 つのマルチタスカーを提供します。 1 つは従来の協調的なラウン
ドロビン・マルチタスカー(cooperative round-robin multitasker)で、 もう 1
つはマルチコア・マシン上で複数のスレッドを同時に実行できる pthread ベー
スのマルチタスカーです。 将来、 Forth マルチタスカーの標準化により、 そ
の意味は変更せずにワードの名前が変更される可能性が高いため、 pthread ベ
ースのマルチタスカーは現在、 実験的な機能としてマークされています。


File: gforth.info,  Node: Pthreads,  Next: Cilk,  Prev: Multitasker,  Up: Multitasker

6.27.1 Pthreads
---------------

Posix threads can run in parallel on several cores, or with pre-emptive
multitasking on onecore.  However, many of the following words are the
same as in the traditional cooperative multi-tasker.

   In addition, there are words that allow you to make sure that only
one task at a time changes something, and for communicating between
tasks.  These words are necessary for pre-emptive and multi-core
multi-tasking, because the cooperative-multitasking way of performing
transactions between calls to ‘pause’ does not work in this environment.

* Menu:

* Basic multi-tasking::
* Task-local data::
* Semaphores::
* Hardware operations for multi-tasking::
* Message queues::


File: gforth.info,  Node: Basic multi-tasking,  Next: Task-local data,  Prev: Pthreads,  Up: Pthreads

6.27.1.1 Basic multi-tasking
............................

Tasks can be created with ‘newtask’ or ‘newtask4’ with a given amount of
stack space (either all the same or each stack’s size specified).

‘newtask’ ( stacksize – task  ) gforth-experimental “newtask”
   creates task; each stack (data, return, FP, locals) has size
stacksize.

‘task’ ( ustacksize "name" –  ) gforth-experimental “task”
   creates a task name; each stack (data, return, FP, locals) has size
ustacksize.
name execution: ( – task )

‘newtask4’ ( u-data u-return u-fp u-locals – task  ) gforth-experimental “newtask4”
   creates task with data stack size u-data, return stack size u-return,
FP stack size u-fp and locals stack size u-locals.

   If you don’t know which stack sizes to use for the task, you can use
the size(s) of the main task:

‘stacksize’ ( – u  ) gforth-experimental “stacksize”
   u is the data stack size of the main task.

‘stacksize4’ ( – u-data u-return u-fp u-locals  ) gforth-experimental “stacksize4”
   Pushes the data, return, FP, and locals stack sizes of the main task.

   A task is created in an inactive state.  To let it run, you have to
activate it with one of the following words:

‘initiate’ ( xt task –  ) gforth-experimental “initiate”
   Let task execute xt.  Upon return from the xt, the task terminates
itself (VFX compatible).  Use one-time executable closures to pass
arbitrary paramenters to a task.

   The following legacy words provide the same functionality as
‘initiate’, but with a different interface: Like ‘does>’, they split
their containing colon definition in two parts: The part before
‘activate’/‘pass’ runs in the activating task, and returns to its caller
after activating the task.  The part behind ‘activate’/‘pass’ is
executed in the activated target task.

‘activate’ ( run-time nest-sys1 task –  ) gforth-experimental “activate”
   Let task perform the code behind ‘activate’, and return to the caller
of the word containing ‘activate’.  When the task returns from the code
behind ‘activate’, it terminates itself.

‘pass’ ( x1 .. xn n task –  ) gforth-experimental “pass”
   Pull x1 ..  xn n from the current task’s data stack and push x1 ..
xn on task’s data stack.  Let task perform the code behind ‘pass’, and
return to the caller of the word containing ‘pass’.  When the task
returns from the code behind ‘pass’, it terminates itself.

   You can also do creation and activation in one step:

‘execute-task’ ( xt – task  ) gforth-experimental “execute-task”
   Create a new task TASK with the same stack sizes as the main task.
Let task execute xt.  Upon return from the xt, the task terminates
itself.

   Apart from terminating by running to the end, a task can terminate
itself with ‘kill-task’.  Other tasks can terminate it with ‘kill’.

‘kill-task’ ( –  ) gforth-experimental “kill-task”
   Terminate the current task.

‘kill’ ( task –  ) gforth-experimental “kill”
   Terminate task.

   Tasks can also temporarily stop themselves or be stopped:

‘halt’ ( task –  ) gforth-experimental “halt”
   Stop a task

‘stop’ ( –  ) gforth-experimental “stop”
   stops the current task, and waits for events (which may restart it)

‘stop-ns’ ( timeout –  ) gforth-experimental “stop-ns”
   Stop with timeout (in nanoseconds), better replacement for ms

   A task restarts when the timeout is over or when another task wakes
it with:

‘restart’ ( task –  ) gforth-experimental “restart”
   Wake a task

   There is also:

‘pause’ ( –  ) gforth-experimental “pause”
   voluntarily switch to the next waiting task (‘pause’ is the
traditional cooperative task switcher; in the pthread multitasker, you
don’t need ‘pause’ for cooperation, but you still can use it e.g.  when
you have to resort to polling for some reason).  This also checks for
events in the queue.


File: gforth.info,  Node: Task-local data,  Next: Semaphores,  Prev: Basic multi-tasking,  Up: Pthreads

6.27.1.2 Task-local data
........................

In Forth every task has essentially the same task-local data, called
“user” area (early Forth systems were multi-user systems and there often
was one user per task).  The task result of, e.g.  ‘newtask’ is the
start address of its user area.  Each task gets the user data defined by
the system (e.g., ‘base’).  You can define additional user data with:

‘User’ ( "name" –  ) gforth-0.2 “User”
   Name is a user variable (1 cell).
Name execution: ( – addr )
Addr is the address of the user variable in the current task.

‘AUser’ ( "name" –  ) gforth-0.2 “AUser”
   Name is a user variable containing an address (this only makes a
difference in the cross-compiler).

‘uallot’ ( n1 – n2  ) gforth-0.3 “uallot”
   Reserve n1 bytes of user data.  n2 is the offset of the start of the
reserved area within the user area.

‘UValue’ ( "name" –  ) gforth-1.0 “UValue”
   Name is a user value.
Name execution: ( – x )

‘UDefer’ ( "name" –  ) gforth-1.0 “UDefer”
   Name is a task-local deferred word.
Name execution: ( ...  – ...  )

   There are also the following words for dealing with user data.

‘up@’ ( – a-addr ) new “up-fetch”
   Addr is the start of the user area of the current task (addr also
serves as the task identifier of the current task).

‘user'’ ( "name" – u  ) gforth-experimental “user”’
   U is the offset of the user variable name in the user area of each
task.

‘'s’ ( addr1 task – addr2  ) gforth-experimental “’s”
   With addr1 being an address in the user data of the current task,
addr2 is the corresponding address in task’s user data.


File: gforth.info,  Node: Semaphores,  Next: Hardware operations for multi-tasking,  Prev: Task-local data,  Up: Pthreads

6.27.1.3 Semaphores
...................

A cooperative multitasker can ensure that there is no other task
interacting between two invocations of ‘pause’.  Pthreads however are
really concurrent tasks (at least on a multi-core CPU), and therefore,
several techniques to avoid conflicts when accessing the same resources.

   Semaphores can only be aquired by one thread, all other threads have
to wait until the semapohre is released.

‘semaphore’ ( "name" –  ) gforth-experimental “semaphore”
   create a named semaphore name
name execution: ( – semaphore )

‘lock’ ( semaphore –  ) gforth-experimental “lock”
   lock the semaphore

‘unlock’ ( semaphore –  ) gforth-experimental “unlock”
   unlock the semaphore

   The other approach to prevent concurrent access is the critical
section.  Here, we implement a critical section with a semaphore, so you
have to specify the semaphore which is used for the critical section.
Only those critical sections which use the same semaphore are mutually
exclusive.

‘critical-section’ ( xt semaphore –  ) gforth-experimental “critical-section”
   Execute xt while locking semaphore.  After leaving xt, semaphore is
unlocked even if an exception is thrown.


File: gforth.info,  Node: Hardware operations for multi-tasking,  Next: Message queues,  Prev: Semaphores,  Up: Pthreads

6.27.1.4 Hardware operations for multi-tasking
..............................................

Atomic hardware operations perform the whole operation, without any
other task seeing an intermediate state.  These operations can be used
to synchronize tasks without using slow OS primitives, but compared to
the non-atomic sequences of operations they tend to be slow.  Atomic
operations only work correctly on aligned addresses, even on hardware
that otherwise does not require alignment.

‘!@’ ( u1 a-addr – u2 ) gforth-experimental “store-fetch”
   load U2 from A_ADDR, and store U1 there, as atomic operation

‘+!@’ ( u1 a-addr – u2 ) gforth-experimental “add-store-fetch”
   load U2 from A_ADDR, and increment this location by U1, as atomic
operation

‘?!@’ ( unew uold a-addr – uprev ) gforth-experimental “question-store-fetch”
   load UPREV from A_ADDR, compare it to UOLD, and if equal, store UNEW
there, as atomic operation

   Another hardware operation is the memory barrier.  Unfortunately
modern hardware often can reorder memory operations relative to other
memory operations (as seen by a different core), and the memory barrier
suppresses this reordering for one point in the execution of the task.

‘barrier’ ( – ) gforth-experimental “barrier”
   All memory operations before the barrier are performed before any
memory operation after the barrier.


File: gforth.info,  Node: Message queues,  Prev: Hardware operations for multi-tasking,  Up: Pthreads

6.27.1.5 Message queues
.......................

Gforth’s message queues are a variant of the actor model.

   An event is an xt; the sending task tells the receiving task to run
an event, and the receiving task performs one event from its message
queue when it is ready.  Execute-once closures can be used for events
that pass parameters.

‘send-event’ ( xt task –  ) gforth-experimental “send-event”
   Task IPC: send XT to TASK.  The xt is executed there.  Use a one-shot
closure to pass parameters with the xt.

   When several tasks send event to one task, the events may arrive in
any order.  In order to receive events, you put one of the following
words in the receiving task:

‘?events’ ( –  ) gforth-experimental “question-events”
   Perform all event sequences in the current task’s message queue, one
event sequence at a time.

‘event-loop’ ( –  ) gforth-experimental “event-loop”
   Wait for event sequences, and execute any event sequences when they
arrive.  Return to waiting if no event sequences are in the queue.  This
word never returns.

   Alternatively, when a task is ‘stop’ped, it is also ready for
receiving event, and receiving an event will wake it up.


File: gforth.info,  Node: Cilk,  Prev: Pthreads,  Up: Multitasker

6.27.2 Cilk
-----------

Gforth’s Cilk is a framework for dividing work between multiple tasks
running on several cores, inspired by the programming language of the
same name.  Use ‘require cilk.fs’ if you want to use Cilk.

   The idea is that you identify subproblems that can be solved in
parallel, and the framework assigns worker tasks to these subproblems.
In particular, you use one of the ‘spawn’ words for each subtask.
Eventually you need to wait with ‘cilk-sync’ for the subproblems to be
solved.

   Currently all the spawning has to happen from one task, and
‘cilk-sync’ waits for all subproblems to complete, so using the current
Gforth Cilk for recursive algorithms is not straightforward.

   Do not divide the subproblems too finely, in order to avoid overhead;
how fine is too fine depends on how uniform the run-time for the
subproblems is, but for problems with substantial run-time, having
5*‘cores’ subproblems is probably a good starting point.

‘cores’ ( – u  ) cilk “cores”
   A value containing the number of worker tasks to use.  By default
this is the number of hardware threads (with SMT/HT), if we can
determine that, otherwise 1.  If you want to use a different number,
change ‘cores’ before calling ‘cilk-init’.

‘cilk-init’ ( –  ) cilk “cilk-init”
   Start the worker tasks if not already done.

‘spawn’ ( xt –  ) cilk “spawn”
   Execute xt ( – ) in a worker task.  Use one-time executable closures
to pass heap-allocated closures, allowing to pass arbitrary data from
the spawner to the code running in the worker.
E.g.: ‘( n r ) [{: n f: r :}h1 code ;] spawn’

‘spawn1’ ( x xt –  ) cilk “spawn1”
   Execute xt ( x – ) in a worker task.

‘spawn2’ ( x1 x2 xt –  ) cilk “spawn2”
   Execute xt ( x1 x2 – ) in a worker task.

‘cilk-sync’ ( –  ) cilk “cilk-sync”
   Wait for all subproblems to complete.

‘cilk-bye’ ( –  ) cilk “cilk-bye”
   Terminate all workers.


File: gforth.info,  Node: C Interface,  Next: Assembler and Code Words,  Prev: Multitasker,  Up: Words

6.28 C Interface
================

Gforth の C言語インターフェイスは、 Forth スタックからパラメータを取得し
てC言語の関数を呼び出す、 C言語の関数を含むラッパー・ライブラリをコンパ
イルすることによって機能します。 このラッパー・ライブラリはC言語のコンパ
イラによってコンパイルされます。 コンパイル結果はキャッシュされるため、
ラッパー・ライブラリを変更する必要がある場合、 Gforth は C言語のコンパイ
ルを再実行するだけで済みます。 このビルド処理は自動(automatic)で、 イン
ターフェイス宣言の最後に行われます。 Gforth は、 この処理に libtool と
GCC を使用します。

   C言語のインターフェイスはほぼ完成した状態で、 コールバックも既に追加
されていますが、 構造体については、 独立したスコープを持たない Forth2012
構造体を使用します。 これらの構造体のオフセットは、 SWIG プラグインを使
用してヘッダー・ファイルから抽出されます。

* Menu:

* Calling C Functions::
* Declaring C Functions::
* Calling C function pointers::
* Defining library interfaces::
* Declaring OS-level libraries::
* Callbacks::
* C interface internals::
* Low-Level C Interface Words::
* Automated interface generation using SWIG::
* Migrating the C interface from earlier Gforth::


File: gforth.info,  Node: Calling C Functions,  Next: Declaring C Functions,  Prev: C Interface,  Up: C Interface

6.28.1 Calling C functions
--------------------------

C言語の関数関数が宣言されたら(*note Declaring C Functions:: 参照)、 次の
ように呼び出すことができます: あなたは引数達をスタックにプッシュしてから
、 C言語関数のワードを呼び出します。 引数は、 C言語のドキュメントに記載
されているのと同じ順序でプッシュする必要があります(つまり、 最初の引数が
スタックの最も深いところにあります)。 整数およびポインタ引数はデータ・ス
タックにプッシュする必要があり、 浮動小数点引数は FP スタックにプッシュ
する必要があります。 これらの引数は、 呼び出されたC言語の関数によって消
費されます。

   C言語の関数から戻るとき、 戻り値がある場合、 その戻り値は適切なスタッ
クに置きます。 整数の戻り値はデータ・スタックにプッシュされ、 FP の戻り
値は FP スタックにプッシュされ、 void 戻り値の場合は何もプッシュされませ
ん。 C言語ではあまり使用されない場合でも、 ほとんどのC言語の関数には戻り
値があることに注意してください。 Forth では、 この戻り値を使用しない場合
は、 明示的に捨てる(‘drop’)必要があります。

   C言語インターフェイスは、 必要に応じて、 ベストエフォートで C言語の型
と Forth の型の間で自動的に変換します(場合によっては、 ある程度の損失が
発生する可能性があります)。

   例として、 POSIX 関数 ‘lseek()’ について考察してみましょう:

     off_t lseek(int fd, off_t offset, int whence);

   This function takes three integer arguments, and returns an integer
argument, so a Forth call for setting the current file offset to the
start of the file could look like this:

     fd @ 0 SEEK_SET lseek -1 = if
       ... \ error handling
     then

   You might be worried that an ‘off_t’ does not fit into a cell, so you
could not pass larger offsets to lseek, and might get only a part of the
return values.  In that case, in your declaration of the function (*note
Declaring C Functions::) you should declare it to use double-cells for
the off_t argument and return value, and maybe give the resulting Forth
word a different name, like ‘dlseek’; the result could be called like
this:

     fd @ 0. SEEK_SET dlseek -1. d= if
       ... \ error handling
     then

   Passing and returning structs or unions is currently not supported by
our interface(1).

   Calling functions with a variable number of arguments (_variadic_
functions, e.g., ‘printf()’) is only supported by having you declare one
function-calling word for each argument pattern, and calling the
appropriate word for the desired pattern.

   ---------- Footnotes ----------

   (1) If you know the calling convention of your C compiler, you
usually can call such functions in some way, but that way is usually not
portable between platforms, and sometimes not even between C compilers.


File: gforth.info,  Node: Declaring C Functions,  Next: Calling C function pointers,  Prev: Calling C Functions,  Up: C Interface

6.28.2 Declaring C Functions
----------------------------

Before you can call ‘lseek’ or ‘dlseek’, you have to declare it.  The
declaration consists of two parts:

The C part
     is the C declaration of the function, or more typically and
     portably, a C-style ‘#include’ of a file that contains the
     declaration of the C function.

The Forth part
     declares the Forth types of the parameters and the Forth word name
     corresponding to the C function.

   For the words ‘lseek’ and ‘dlseek’ mentioned earlier, the
declarations are:

     \c #define _FILE_OFFSET_BITS 64
     \c #include <sys/types.h>
     \c #include <unistd.h>
     c-function lseek lseek n n n -- n
     c-function dlseek lseek n d n -- d

   The C part of the declarations is prefixed by ‘\c’, and the rest of
the line is ordinary C code.  You can use as many lines of C
declarations as you like, and they are visible for all further function
declarations.

   The Forth part declares each interface word with ‘c-function’,
followed by the Forth name of the word, the C name of the called
function, and the stack effect of the word.  The stack effect contains
an arbitrary number of types of parameters, then ‘--’, and then exactly
one type for the return value.  The possible types are:

‘n’
     single-cell integer

‘a’
     address (single-cell)

‘d’
     double-cell integer

‘r’
     floating-point value

‘func’
     C function pointer

‘void’
     no value (used as return type for void functions)

   To deal with variadic C functions, you can declare one Forth word for
every pattern you want to use, e.g.:

     \c #include <stdio.h>
     c-function printf-nr printf a n r -- n
     c-function printf-rn printf a r n -- n

   Note that with C functions declared as variadic (or if you don’t
provide a prototype), the C interface has no C type to convert to, so no
automatic conversion happens, which may lead to portability problems in
some cases.  You can add the C type cast in curly braces after the Forth
type.  This also allows to pass e.g.  structs to C functions, which in
Forth cannot live on the stack.

     c-function printfll printf a n{(long long)} -- n
     c-function pass-struct pass_struct a{*(struct foo *)} -- n

   This typecasting is not available to return values, as C does not
allow typecasts for lvalues.

‘\c’ ( "rest-of-line" –  ) gforth-0.7 “backslash-c”
   One line of C declarations for the C interface

‘c-function’ ( "forth-name" "c-name" "{type}" "—" "type" –  ) gforth-0.7 “c-function”
   Define a Forth word forth-name.  Forth-name has the specified stack
effect and calls the C function ‘c-name’.

‘c-value’ ( "forth-name" "c-name" "—" "type" –  ) gforth-1.0 “c-value”
   Define a Forth word forth-name.  Forth-name has the specified stack
effect and gives the C value of ‘c-name’.

‘c-variable’ ( "forth-name" "c-name" –  ) gforth-1.0 “c-variable”
   Define a Forth word forth-name.  Forth-name returns the address of
‘c-name’.

   In order to work, this C interface invokes GCC at run-time and uses
dynamic linking.  If these features are not available, there are other,
less convenient and less portable C interfaces in ‘lib.fs’ and
‘oldlib.fs’.  These interfaces are mostly undocumented and mostly
incompatible with each other and with the documented C interface; you
can find some examples for the ‘lib.fs’ interface in ‘lib.fs’.


File: gforth.info,  Node: Calling C function pointers,  Next: Defining library interfaces,  Prev: Declaring C Functions,  Up: C Interface

6.28.3 Calling C function pointers from Forth
---------------------------------------------

If you come across a C function pointer (e.g., in some C-constructed
structure) and want to call it from your Forth program, you could use
the structures as described above by defining a macro.  Or you use
‘c-funptr’.

‘c-funptr’ ( "forth-name" <{>"c-typecast"<}> "{type}" "—" "type" –  ) gforth-1.0 “c-funptr”
   Define a Forth word forth-name.  Forth-name has the specified stack
effect plus the called pointer on top of stack, i.e.  ‘( {type} ptr --
type )’ and calls the C function pointer ‘ptr’ using the typecast or
struct access ‘c-typecast’.

   Let us assume that there is a C function pointer type ‘func1’ defined
in some header file ‘func1.h’, and you know that these functions take
one integer argument and return an integer result; and you want to call
functions through such pointers.  Just define

     \c #include <func1.h>
     c-funptr call-func1 {((func1)ptr)} n -- n

   and then you can call a function pointed to by, say ‘func1a’ as
follows:

     -5 func1a call-func1 .

   The Forth word ‘call-func1’ is similar to ‘execute’, except that it
takes a C ‘func1’ pointer instead of a Forth execution token, and it is
specific to ‘func1’ pointers.  For each type of function pointer you
want to call from Forth, you have to define a separate calling word.


File: gforth.info,  Node: Defining library interfaces,  Next: Declaring OS-level libraries,  Prev: Calling C function pointers,  Up: C Interface

6.28.4 Defining library interfaces
----------------------------------

You can give a name to a bunch of C function declarations (a library
interface), as follows:

     c-library lseek-lib
     \c #define _FILE_OFFSET_BITS 64
     ...
     end-c-library

   The effect of giving such a name to the interface is that the names
of the generated files will contain that name, and when you use the
interface a second time, it will use the existing files instead of
generating and compiling them again, saving you time.  The generated
file contains a 128 bit hash (not cryptographically safe, but good
enough for that purpose) of the source code, so changing the
declarations will cause a new compilation.  Normally these files are
cached in ‘$HOME/.gforth/’ARCHITECTURE‘/libcc-named’, so if you
experience problems or have other reasons to force a recompilation, you
can delete the files there.

   Note that you should use ‘c-library’ before everything else having
anything to do with that library, as it resets some setup stuff.  The
idea is that the typical use is to put each
‘c-library’...‘end-c-library’ unit in its own file, and to be able to
include these files in any order.  All other words dealing with the C
interface are hidden in the vocabulary ‘c-lib’, which is put on top o
the search stack by ‘c-library’ and removed by ‘end-c-library’.

   Note that the library name is not allocated in the dictionary and
therefore does not shadow dictionary names.  It is used in the file
system, so you have to use naming conventions appropriate for file
systems.  The name is also used as part of the C symbols, but characters
outside the legal C symbol names are replaced with underscores.  Also,
you shall not call a function you declare after ‘c-library’ before you
perform ‘end-c-library’.

   A major benefit of these named library interfaces is that, once they
are generated, the tools used to generated them (in particular, the C
compiler and libtool) are no longer needed, so the interface can be used
even on machines that do not have the tools installed.  The build system
of Gforth can even cross-compile these libraries, so that the libraries
are available for plattforms on which build tools aren’t installed.

‘c-library-name’ ( c-addr u –  ) gforth-0.7 “c-library-name”
   Start a C library interface with name c-addr u.

‘c-library’ ( "name" –  ) gforth-0.7 “c-library”
   Parsing version of ‘c-library-name’

‘end-c-library’ ( –  ) gforth-0.7 “end-c-library”
   Finish and (if necessary) build the latest C library interface.


File: gforth.info,  Node: Declaring OS-level libraries,  Next: Callbacks,  Prev: Defining library interfaces,  Up: C Interface

6.28.5 Declaring OS-level libraries
-----------------------------------

For calling some C functions, you need to link with a specific OS-level
library that contains that function.  E.g., the ‘sin’ function requires
linking a special library by using the command line switch ‘-lm’.  In
our C iterface you do the equivalent thing by calling ‘add-lib’ as
follows:

     clear-libs
     s" m" add-lib
     \c #include <math.h>
     c-function sin sin r -- r

   First, you clear any libraries that may have been declared earlier
(you don’t need them for ‘sin’); then you add the ‘m’ library (actually
‘libm.so’ or somesuch) to the currently declared libraries; you can add
as many as you need.  Finally you declare the function as shown above.
Typically you will use the same set of library declarations for many
function declarations; you need to write only one set for that, right at
the beginning.

   Note that you must not call ‘clear-libs’ inside
‘c-library...end-c-library’; however, ‘c-library’ performs the function
of ‘clear-libs’, so ‘clear-libs’ is not necessary, and you usually want
to put ‘add-lib’ calls inside ‘c-library...end-c-library’.

‘clear-libs’ ( –  ) gforth-0.7 “clear-libs”
   Clear the list of libs

‘add-lib’ ( c-addr u –  ) gforth-0.7 “add-lib”
   Add library libstring to the list of libraries, where string is
represented by c-addr u.

‘add-libpath’ ( c-addr u –  ) gforth-0.7 “add-libpath”
   Add path string to the list of library search pathes, where string is
represented by c-addr u.

‘add-framework’ ( c-addr u –  ) gforth-1.0 “add-framework”
   Add framework libstring to the list of frameworks, where string is
represented by c-addr u.

‘add-incdir’ ( c-addr u –  ) gforth-1.0 “add-incdir”
   Add path c-addr u to the list of include search pathes

‘add-cflags’ ( c-addr u –  ) gforth-1.0 “add-cflags”
   add any kind of cflags to compilation

‘add-ldflags’ ( c-addr u –  ) gforth-1.0 “add-ldflags”
   add flag to linker


File: gforth.info,  Node: Callbacks,  Next: C interface internals,  Prev: Declaring OS-level libraries,  Up: C Interface

6.28.6 Callbacks
----------------

In some cases you have to pass a function pointer to a C function, i.e.,
the library wants to call back to your application (and the pointed-to
function is called a callback function).  You can pass the address of an
existing C function (that you get with ‘lib-sym’, *note Low-Level C
Interface Words::), but if there is no appropriate C function, you
probably want to define the function as a Forth word.  Then you need to
generate a callback as described below:

   You can generate C callbacks from Forth code with ‘c-callback’.

‘c-callback’ ( "forth-name" "{type}" "—" "type" –  ) gforth-1.0 “c-callback”
   Define a callback instantiator with the given signature.  The
callback instantiator forth-name ‘( xt -- addr )’ takes an XT, and
returns the ADDRess of the C function handling that callback.

‘c-callback-thread’ ( "forth-name" "{type}" "—" "type" –  ) gforth-1.0 “c-callback-thread”
   Define a callback instantiator with the given signature.  The
callback instantiator forth-name ‘( xt -- addr )’ takes an XT, and
returns the ADDRess of the C function handling that callback.  This
callback is safe when called from another thread

   This precompiles a number of callback functions (up to the value
‘callback#’).  The prototype of the C function is deduced from its Forth
signature.  If this is not sufficient, you can add types in curly braces
after the Forth type.

     c-callback vector4double: f f f f -- void
     c-callback vector4single: f{float} f{float} f{float} f{float} -- void


File: gforth.info,  Node: C interface internals,  Next: Low-Level C Interface Words,  Prev: Callbacks,  Up: C Interface

6.28.7 How the C interface works
--------------------------------

The documented C interface works by generating a C code out of the
declarations.

   In particular, for every Forth word declared with ‘c-function’, it
generates a wrapper function in C that takes the Forth data from the
Forth stacks, and calls the target C function with these data as
arguments.  The C compiler then performs an implicit conversion between
the Forth type from the stack, and the C type for the parameter, which
is given by the C function prototype.  After the C function returns, the
return value is likewise implicitly converted to a Forth type and
written back on the stack.

   The ‘\c’ lines are literally included in the C code (but without the
‘\c’), and provide the necessary declarations so that the C compiler
knows the C types and has enough information to perform the conversion.

   These wrapper functions are eventually compiled and dynamically
linked into Gforth, and then they can be called.

   The libraries added with ‘add-lib’ are used in the compile command
line to specify dependent libraries with ‘-lLIB’, causing these
libraries to be dynamically linked when the wrapper function is linked.


File: gforth.info,  Node: Low-Level C Interface Words,  Next: Automated interface generation using SWIG,  Prev: C interface internals,  Up: C Interface

6.28.8 Low-Level C Interface Words
----------------------------------

‘open-lib’ ( c-addr1 u1 – u2 ) gforth-0.4 “open-lib”

‘lib-sym’ ( c-addr1 u1 u2 – u3 ) gforth-0.4 “lib-sym”

‘lib-error’ ( – c-addr u ) gforth-0.7 “lib-error”
   Error message for last failed ‘open-lib’ or ‘lib-sym’.

‘call-c’ ( ... w – ... ) gforth-0.2 “call-c”
   Call the C function pointed to by w.  The C function has to access
the stack itself.  The stack pointers are exported into a ptrpair
structure passed to the C function, and returned in that form.


File: gforth.info,  Node: Automated interface generation using SWIG,  Next: Migrating the C interface from earlier Gforth,  Prev: Low-Level C Interface Words,  Up: C Interface

6.28.9 Automated interface generation using SWIG
------------------------------------------------

SWIG, the Simple Wrapper Interface Generator, is used to create C
interfaces for a lot of programming languages.  The SWIG version
extended with a Forth module can be found on github
(https://github.com/GeraldWodni/swig).

6.28.9.1 Basic operation
........................

C-headers are parsed and converted to Forth-Sourcecode which uses the
previously describe C interface functions.

6.28.9.2 Detailed operation:
............................

  1. Select a target, in this example we are using ‘example.h’
  2. Create an interface file for the header.  This can be used to pass
     options, switches and define variables.  In the simplest case it
     just instructs to translate all of ‘example.h’:
          %module example
          %insert("include")
          {
              #include "example.h"
          }
          %include "example.h"
  3. Use SWIG to create a ‘.fsi-c’ file.
     ‘swig -forth -stackcomments -use-structs -enumcomments -o
     example-fsi.c example.i’.
     FSI stands “Forth Source Independent” meaning it can be transferred
     to any host having a C-compiler.  SWIG is not required past this
     point.
  4. On the target machine compile the ‘.fsi-c’ file to a ‘.fsx’ (x
     stands for executable)
     ‘gcc -o example.fsx example-fsi.c’
     The compilation will resolve all constants to the values on the
     target.
  5. The last step is to run the executable and capture its output to a
     ‘.fs’ “Forth Source” file.
     ‘./example.fsx -gforth > example.fs’
     This code can now be used on the target platform.

6.28.9.3 Examples
.................

You can find some examples in SWIG’s Forth Example section
(https://github.com/GeraldWodni/swig/tree/master/Examples/forth).

   A lot of interface files can be found in Forth Posix C-Interface
(https://github.com/GeraldWodni/posix) and Forth C-Interface Modules
(https://github.com/GeraldWodni/forth-c-interfaces).

   Contribution to the Forth C-Interface Module repository
(https://github.com/GeraldWodni/forth-c-interfaces) is always welcome.


File: gforth.info,  Node: Migrating the C interface from earlier Gforth,  Prev: Automated interface generation using SWIG,  Up: C Interface

6.28.10 Migrating from Gforth 0.7
---------------------------------

In this version, you can use ‘\c’, ‘c-function’ and ‘add-lib’ only
inside ‘c-library’...‘end-c-library’.  ‘add-lib’ now always starts from
a clean slate inside a ‘c-library’, so you don’t need to use
‘clear-libs’ in most cases.

   If you have a program that uses these words outside
‘c-library’...‘end-c-library’, just wrap them in
‘c-library’...‘end-c-library’.  You may have to add some instances of
‘add-lib’, however.


File: gforth.info,  Node: Assembler and Code Words,  Next: Carnal words,  Prev: C Interface,  Up: Words

6.29 Assembler and Code Words
=============================

* Menu:

* Assembler Definitions::    Definitions in assembly language
* Common Assembler::         アセンブラ文法
* Common Disassembler::
* 386 Assembler::            逸脱(deviations)と特殊ケース
* AMD64 Assembler::
* Alpha Assembler::          逸脱(deviations)と特殊ケース
* MIPS assembler::           逸脱(deviations)と特殊ケース
* PowerPC assembler::        逸脱(deviations)と特殊ケース
* ARM Assembler::            逸脱(deviations)と特殊ケース
* Other assemblers::         アセンブラ自体の書き方


File: gforth.info,  Node: Assembler Definitions,  Next: Common Assembler,  Prev: Assembler and Code Words,  Up: Assembler and Code Words

6.29.1 Definitions in assembly language
---------------------------------------

Gforth は、 アセンブリ言語でワードを実装する方法(‘abi-code’ … ‘end-code’
を使用)と、 任意の実行時の振る舞いを持つ定義ワードを定義する方法(‘does>’
のようなの)を提供し、 ここで、 この実行時の振る舞いを(‘does>’ とは異なり
、) Forth ではなくアセンブリ言語で定義します。

   ただし、 Gforth のマシン非依存の性質により、 いくつかの問題が生じます
。 まず、 Gforth は複数のアーキテクチャ上で実行されるため、 標準のアセン
ブラを提供できません。 ただし、 実行されるいくつかのアーキテクチャ用のア
センブラは提供されています。 さらに言えば、 Gforth ではシステムに依存し
ないアセンブラを使用したり、 ‘,’ や ‘c,’ を使用してマシン・コードを直接
コンパイルしたりできます。

   もう 1 つの問題は、Gforth の仮想マシンのレジスタ(スタック・ポインタと
仮想マシン命令ポインタ)がインストールとエンジンに依存することです。 また
、 どのレジスタを自由に使用できるかは、 インストールとエンジンによって異
なります。 したがって、 Gforth 仮想マシンのコンテキストで実行するように
記述されたコードは、 基本的に、 そのコードが開発されたインストールとエン
ジンに限定されます(たまたま、 他の場所でも動く可能性はありますが、 それ
に頼ることはできません)。

   幸いなことに、 同じ呼び出し規約(ABI)を持つプラットフォーム上で実行さ
れている Gforth に移植可能(portable)な ‘abi-code’ ワードを Gforth で定義
できます。 通常、 これは同じアーキテクチャと OS の組み合わせへの移植性を
意味し、 しばしば OS の境を越えることができます。

‘assembler’ ( –  ) tools-ext “assembler”
   ボキャブラリ: 検索順序スタック(the search order)のTOSのワードリストを
assembler ワードリストに置き換えます。

‘init-asm’ ( –  ) gforth-0.2 “init-asm”
   assembler ワードリストを検索順序スタック(the search order)にプッシュ
します(訳注:つまり assembler ワードリストが検索順序スタックのTOSになる
)。

‘abi-code’ ( "name" – colon-sys  ) gforth-1.0 “abi-code”
   C言語プロトタイプ(C-prototype)に対応するプラットフォームの ABI 規則を
使用して呼び出されるネイティブ・コード定義を開始します:
     Cell *function(Cell *sp, Float **fpp);
   ここで、 FP スタック・ポインタは、 FP スタック・ポインタを含むメモリ
位置への参照を提供することによって渡され、 (必要な場合)変更された FP ス
タック・ポインタをそこに格納することによって渡されます。

‘;abi-code’ ( –  ) gforth-1.0 “semicolon-abi-code”
   コロン定義を終了しますが、 実行時に最後に定義されたワード X (‘create’
で作られたワードである必要があります)の変更もして、 C言語プロトタイプに
対応するプラットフォームの ABI 規約を使用してネイティブ・コードを呼び出
します:
      Cell *function(Cell *sp, Float **fpp, Address body);
   The FP stack pointer is passed in by providing a reference to a
memory location containing the FP stack pointer and is passed out by
storing the changed FP stack pointer there (if necessary).  The
parameter body is the body of X.

‘end-code’ ( colon-sys –  ) gforth-0.2 “end-code”
   End a code definition.  Note that you have to assemble the return
from the ABI call (for ‘abi-code’) or the dispatch to the next VM
instruction (for ‘code’ and ‘;code’) yourself.

‘code’ ( "name" – colon-sys  ) tools-ext “code”
   Start a native code definition that runs in the context of the Gforth
virtual machine (engine).  Such a definition is not portable between
Gforth installations, so we recommend using ‘abi-code’ instead of
‘code’.  You have to end a ‘code’ definition with a dispatch to the next
virtual machine instruction.

‘;code’ ( compilation. colon-sys1 – colon-sys2  ) tools-ext “semicolon-code”
   The code after ‘;code’ becomes the behaviour of the last defined word
(which must be a ‘create’d word).  The same caveats apply as for ‘code’,
so we recommend using ‘;abi-code’ instead.

‘flush-icache’ ( c-addr u – ) gforth-0.2 “flush-icache”
   Make sure that the instruction cache of the processor (if there is
one) does not contain stale data at c-addr and u bytes afterwards.
‘END-CODE’ performs a ‘flush-icache’ automatically.  Caveat:
‘flush-icache’ might not work on your installation; this is usually the
case if direct threading is not supported on your machine (take a look
at your ‘machine.h’) and your machine has a separate instruction cache.
In such cases, ‘flush-icache’ does nothing instead of flushing the
instruction cache.

   If ‘flush-icache’ does not work correctly, ‘abi-code’ words etc.
will not work (reliably), either.

   The typical usage of these words can be shown most easily by analogy
to the equivalent high-level defining words:

     : foo                              abi-code foo
        <high-level Forth words>              <assembler>
     ;                                  end-code

     : bar                              : bar
        <high-level Forth words>           <high-level Forth words>
        CREATE                             CREATE
           <high-level Forth words>           <high-level Forth words>
        DOES>                              ;code
           <high-level Forth words>           <assembler>
     ;                                  end-code

   For using ‘abi-code’, take a look at the ABI documentation of your
platform to see how the parameters are passed (so you know where you get
the stack pointers) and how the return value is passed (so you know
where the data stack pointer is returned).  The ABI documentation also
tells you which registers are saved by the caller (caller-saved), so you
are free to destroy them in your code, and which registers have to be
preserved by the called word (callee-saved), so you have to save them
before using them, and restore them afterwards.  For some architectures
and OSs we give short summaries of the parts of the calling convention
in the appropriate sections.  More reverse-engineering oriented people
can also find out about the passing and returning of the stack pointers
through ‘see abi-call’.

   Most ABIs pass the parameters through registers, but some (in
particular the most common 386 (aka IA-32) calling conventions) pass
them on the architectural stack.  The common ABIs all pass the return
value in a register.

   Other things you need to know for using ‘abi-code’ is that both the
data and the FP stack grow downwards (towards lower addresses) in
Gforth, with ‘1 cells’ size per cell, and ‘1 floats’ size per FP value.

   Here’s an example of using ‘abi-code’ on the 386 architecture:

     abi-code my+ ( n1 n2 -- n )
     4 sp d) ax mov \ sp into return reg
     ax )    cx mov \ tos
     4 #     ax add \ update sp (pop)
     cx    ax ) add \ sec = sec+tos
     ret            \ return from my+
     end-code

   An AMD64 variant of this example can be found in *note AMD64
Assembler::.

   Here’s a 386 example that deals with FP values:

     abi-code my-f+ ( r1 r2 -- r )
     8 sp d) cx mov  \ load address of fp
     cx )    dx mov  \ load fp
     .fl dx )   fld  \ r2
     8 #     dx add  \ update fp
     .fl dx )   fadd \ r1+r2
     .fl dx )   fstp \ store r
     dx    cx ) mov  \ store new fp
     4 sp d) ax mov  \ sp into return reg
     ret             \ return from my-f+
     end-code


File: gforth.info,  Node: Common Assembler,  Next: Common Disassembler,  Prev: Assembler Definitions,  Up: Assembler and Code Words

6.29.2 Common Assembler
-----------------------

The assemblers in Gforth generally use a postfix syntax, i.e., the
instruction name follows the operands.

   The operands are passed in the usual order (the same that is used in
the manual of the architecture).  Since they all are Forth words, they
have to be separated by spaces; you can also use Forth words to compute
the operands.

   The instruction names usually end with a ‘,’.  This makes it easier
to visually separate instructions if you put several of them on one
line; it also avoids shadowing other Forth words (e.g., ‘and’).

   Registers are usually specified by number; e.g., (decimal) ‘11’
specifies registers R11 and F11 on the Alpha architecture (which one,
depends on the instruction).  The usual names are also available, e.g.,
‘s2’ for R11 on Alpha.

   Control flow is specified similar to normal Forth code (*note
Arbitrary control structures::), with ‘if,’, ‘ahead,’, ‘then,’,
‘begin,’, ‘until,’, ‘again,’, ‘cs-roll’, ‘cs-pick’, ‘else,’, ‘while,’,
and ‘repeat,’.  The conditions are specified in a way specific to each
assembler.

   The rest of this section is of interest mainly for those who want to
define ‘code’ words (instead of the more portable ‘abi-code’ words).

   Note that the register assignments of the Gforth engine can change
between Gforth versions, or even between different compilations of the
same Gforth version (e.g., if you use a different GCC version).  If you
are using ‘CODE’ instead of ‘ABI-CODE’, and you want to refer to
Gforth’s registers (e.g., the stack pointer or TOS), I recommend
defining your own words for refering to these registers, and using them
later on; then you can adapt to a changed register assignment.

   The most common use of these registers is to end a ‘code’ definition
with a dispatch to the next word (the ‘next’ routine).  A portable way
to do this is to jump to ‘' noop >code-address’ (of course, this is less
efficient than integrating the ‘next’ code and scheduling it well).
When using ‘ABI-CODE’, you can just assemble a normal subroutine return
(but make sure you return the data stack pointer).

   Another difference between Gforth versions is that the top of stack
is kept in memory in ‘gforth’ and, on most platforms, in a register in
‘gforth-fast’.  For ‘ABI-CODE’ definitions, any stack caching registers
are guaranteed to be flushed to the stack, allowing you to reliably
access the top of stack in memory.


File: gforth.info,  Node: Common Disassembler,  Next: 386 Assembler,  Prev: Common Assembler,  Up: Assembler and Code Words

6.29.3 Common Disassembler
--------------------------

You can disassemble a ‘code’ word with ‘see’ (*note Debugging::).  You
can disassemble a section of memory with

‘discode’ ( addr u –  ) gforth-0.2 “discode”
   hook for the disassembler: disassemble u bytes of code at addr

   There are two kinds of disassembler for Gforth: The Forth
disassembler (available on some CPUs) and the gdb disassembler
(available on platforms with ‘gdb’ and ‘mktemp’).  If both are
available, the Forth disassembler is used by default.  If you prefer the
gdb disassembler, say

     ' disasm-gdb is discode

   If neither is available, ‘discode’ performs ‘dump’.

   The Forth disassembler generally produces output that can be fed into
the assembler (i.e., same syntax, etc.).  It also includes additional
information in comments.  In particular, the address of the instruction
is given in a comment before the instruction.

   The gdb disassembler produces output in the same format as the gdb
‘disassemble’ command (*note Source and machine code: (gdb)Machine
Code.), in the default flavour (AT&T syntax for the 386 and AMD64
architectures).

   ‘See’ may display more or less than the actual code of the word,
because the recognition of the end of the code is unreliable.  You can
use ‘discode’ if it did not display enough.  It may display more, if the
code word is not immediately followed by a named word.  If you have
something else there, you can follow the word with ‘align latest ,’ to
ensure that the end is recognized.


File: gforth.info,  Node: 386 Assembler,  Next: AMD64 Assembler,  Prev: Common Disassembler,  Up: Assembler and Code Words

6.29.4 386 Assembler
--------------------

The 386 assembler included in Gforth was written by Bernd Paysan, it’s
available under GPL, and originally part of bigFORTH.

   The 386 disassembler included in Gforth was written by Andrew McKewan
and is in the public domain.

   The disassembler displays code in an Intel-like prefix syntax.

   The assembler uses a postfix syntax with AT&T-style parameter order
(i.e., destination last).

   The assembler includes all instruction of the Athlon, i.e.  486 core
instructions, Pentium and PPro extensions, floating point, MMX, 3Dnow!,
but not ISSE. It’s an integrated 16- and 32-bit assembler.  Default is
32 bit, you can switch to 16 bit with .86 and back to 32 bit with .386.

   There are several prefixes to switch between different operation
sizes, ‘.b’ for byte accesses, ‘.w’ for word accesses, ‘.d’ for
double-word accesses.  Addressing modes can be switched with ‘.wa’ for
16 bit addresses, and ‘.da’ for 32 bit addresses.  You don’t need a
prefix for byte register names (‘AL’ et al).

   For floating point operations, the prefixes are ‘.fs’ (IEEE single),
‘.fl’ (IEEE double), ‘.fx’ (extended), ‘.fw’ (word), ‘.fd’
(double-word), and ‘.fq’ (quad-word).  The default is ‘.fx’, so you need
to specify ‘.fl’ explicitly when dealing with Gforth FP values.

   The MMX opcodes don’t have size prefixes, they are spelled out like
in the Intel assembler.  Instead of move from and to memory, there are
PLDQ/PLDD and PSTQ/PSTD.

   The registers lack the ’e’ prefix; even in 32 bit mode, eax is called
ax.  Immediate values are indicated by postfixing them with ‘#’, e.g.,
‘3 #’.  Here are some examples of addressing modes in various syntaxes:

     Gforth          Intel (NASM)   AT&T (gas)      Name
     .w ax           ax             %ax             register (16 bit)
     ax              eax            %eax            register (32 bit)
     3 #             offset 3       $3              immediate
     1000 #)         byte ptr 1000  1000            displacement
     bx )            [ebx]          (%ebx)          base
     100 di d)       100[edi]       100(%edi)       base+displacement
     20 ax *4 i#)    20[eax*4]      20(,%eax,4)     (index*scale)+displacement
     di ax *4 i)     [edi][eax*4]   (%edi,%eax,4)   base+(index*scale)
     4 bx cx di)     4[ebx][ecx]    4(%ebx,%ecx)    base+index+displacement
     12 sp ax *2 di) 12[esp][eax*2] 12(%esp,%eax,2) base+(index*scale)+displacement

   You can use ‘L)’ and ‘LI)’ instead of ‘D)’ and ‘DI)’ to enforce
32-bit displacement fields (useful for later patching).

   Some example of instructions are:

     ax bx mov             \ move ebx,eax
     3 # ax mov            \ mov eax,3
     100 di d) ax mov      \ mov eax,100[edi]
     4 bx cx di) ax mov    \ mov eax,4[ebx][ecx]
     .w ax bx mov          \ mov bx,ax

   The following forms are supported for binary instructions:

     <reg> <reg> <inst>
     <n> # <reg> <inst>
     <mem> <reg> <inst>
     <reg> <mem> <inst>
     <n> # <mem> <inst>

   The shift/rotate syntax is:

     <reg/mem> 1 # shl \ shortens to shift without immediate
     <reg/mem> 4 # shl
     <reg/mem> cl shl

   Precede string instructions (‘movs’ etc.)  with ‘.b’ to get the byte
version.

   The control structure words ‘IF’ ‘UNTIL’ etc.  must be preceded by
one of these conditions: ‘vs vc u< u>= 0= 0<> u<= u> 0< 0>= ps pc < >=
<= >’.  (Note that most of these words shadow some Forth words when
‘assembler’ is in front of ‘forth’ in the search path, e.g., in ‘code’
words).  Currently the control structure words use one stack item, so
you have to use ‘roll’ instead of ‘cs-roll’ to shuffle them (you can
also use ‘swap’ etc.).

   Based on the Intel ABI (used in Linux), ‘abi-code’ words can find the
data stack pointer at ‘4 sp d)’, and the address of the FP stack pointer
at ‘8 sp d)’; the data stack pointer is returned in ‘ax’; ‘Ax’, ‘cx’,
and ‘dx’ are caller-saved, so you do not need to preserve their values
inside the word.  You can return from the word with ‘ret’, the
parameters are cleaned up by the caller.

   For examples of 386 ‘abi-code’ words, see *note Assembler
Definitions::.


File: gforth.info,  Node: AMD64 Assembler,  Next: Alpha Assembler,  Prev: 386 Assembler,  Up: Assembler and Code Words

6.29.5 AMD64 (x86_64) Assembler
-------------------------------

AMD64 アセンブラは、 386 アセンブラをわずかに変更したバージョンであり、
構文の大部分を共有しています。 2 つの新しい接頭辞 ‘.q’ と ‘.qa’ が、 そ
れぞれ 64 ビット・サイズのオペランドやアドレスを選択するために提供されて
います。 64 ビット・サイズがデフォルトであるため、 通常は他のプレフィッ
クスを使用するだけで済みます。 また、 追加のレジスタ・オペランド ‘R8’ ～
‘R15’ もあります。

   レジスタには「e」または「r」プレフィックスがありません。 64 ビット・
モードでも、 ‘rax’ は ‘ax’ と呼ばれます。 すべてのレジスタで最下位バイト
を参照するために追加のレジスタ・オペランドを使用できます: ‘R8L’ 〜
-‘R15L’, ‘SPL’, ‘BPL’, ‘SIL’, ‘DIL’

   Linux-AMD64 の呼び出し規則では、 最初の 6 つの整数パラメーターを rdi,
rsi, rdx, rcx, r8, r9 で渡し、 結果を rax , rdx で返します。 最初の 8 つ
の FP パラメータを xmm0 ～ xmm7 に渡し、 FP 結果を xmm0 ～ xmm1 に返しま
す。 したがって、‘abi-code’ ワードは、 ‘di’ でデータ・スタック・ポインタ
を取得し、 ‘si’ で FP スタック・ポインタのアドレスを取得し、 リターン時
は ‘ax’ にデータ・スタック ポインタをセットします。 呼び出し元が保存する
他のレジスタは、 r10, r11 xmm8 ～ xmm15 です。 この呼び出し規約は、
Microsoft 以外の他の OS でも使用されていると報告されています。

   Windows x64 は、 最初の 4 つの整数パラメータを rcx, rdx, r8, r9 に渡
し、 整数の結果を rax に返します。 他の、呼び出し元保存レジスタは r10 と
r11 です。

   <https://uclibc.org/docs/psABI-x86_64.pdf> の 21ページによると、
Linux プラットフォームでは、 レジスタ AX CX DX SI DI R8 R9 R10 R11 が自
由(scratch)に使えます。

   AMD64 のアドレッシング・モードは以下のとおりです:

     \ ご注意: ワード A を実行すると、レジスタが初期化されていないため、 メモリ・エラーが発生します ;-)
     ABI-CODE A  ( -- )
         500        #               AX  MOV     \ immediate
             DX              AX  MOV     \ register
             200             AX  MOV     \ direct addressing
             DX  )           AX  MOV     \ indirect addressing
         40  DX  D)          AX  MOV     \ base with displacement
             DX  CX      I)  AX  MOV     \ scaled index
             DX  CX  *4  I)  AX  MOV     \ scaled index
         40  DX  CX  *4  DI) AX  MOV     \ scaled index with displacement

             DI              AX  MOV     \ SP Out := SP in
                                 RET
     END-CODE

   AMD64 ‘abi-code’ ワードの例をいくつか示します:

     abi-code my+  ( n1 n2 -- n3 )
     \ SP passed in di, returned in ax,  address of FP passed in si
     8 di d) ax lea        \ compute new sp in result reg ( 結果として di+8 → ax つまり drop と同じ)
     di )    dx mov        \ get old tos ( [di] つまり n2   → dx )
     dx    ax ) add        \ add to new tos ( dx + [ax] → [ax]
     ret
     end-code

     \ Do nothing
     ABI-CODE aNOP  ( -- )
            DI  )       AX      LEA          \ SP out := SP in
                                RET
     END-CODE

     \ Drop TOS
     ABI-CODE aDROP  ( n -- )
        8   DI  D)      AX      LEA          \ SPout := SPin - 1
                                RET
     END-CODE

     \ Push 5 on the data stack
     ABI-CODE aFIVE   ( -- 5 )
        -8  DI  D)      AX      LEA          \ SPout := SPin + 1
        5   #           AX  )   MOV          \ TOS := 5
                                RET
     END-CODE

     \ Push 10 and 20 into data stack
     ABI-CODE aTOS2  ( -- n n )
        -16 DI  D)      AX      LEA          \ SPout := SPin + 2
        10  #       8   AX  D)  MOV          \ TOS - 1 := 10
        20  #           AX  )   MOV          \ TOS := 20
                                RET
     END-CODE

     \ Get Time Stamp Counter as two 32 bit integers
     \ The TSC is incremented every CPU clock pulse
     ABI-CODE aRDTSC   ( -- TSCl TSCh )
                                RDTSC        \ DX:AX := TSC
        $FFFFFFFF #     AX      AND          \ Clear upper 32 bit AX
       0xFFFFFFFF #     DX      AND          \ Clear upper 32 bit DX
            AX          R8      MOV          \ Tempory save AX
        -16 DI  D)      AX      LEA          \ SPout := SPin + 2
            R8      8   AX  D)  MOV          \ TOS-1 := saved AX = TSC low
            DX          AX  )   MOV          \ TOS := Dx = TSC high
                                RET
     END-CODE

     \ Get Time Stamp Counter as 64 bit integer
     ABI-CODE RDTSC   ( -- TSC )
                                RDTSC        \ DX:AX := TSC
        $FFFFFFFF #     AX      AND          \ Clear upper 32 bit AX
        32  #           DX      SHL          \ Move lower 32 bit DX to upper 32 bit
            AX          DX      OR           \ Combine AX wit DX in DX
        -8  DI  D)      AX      LEA          \ SPout := SPin + 1
            DX          AX  )   MOV          \ TOS := DX
                                RET
     END-CODE

     VARIABLE V

     \ Assign 4 to variable V
     ABI-CODE V=4 ( -- )
            BX                  PUSH         \ Save BX, used by gforth
        V   #           BX      MOV          \ BX := address of V
        4   #           BX )    MOV          \ Write 4 to V
            BX                  POP          \ Restore BX
            DI  )       AX      LEA          \ SPout := SPin
                                RET
     END-CODE

     VARIABLE V

     \ Assign 5 to variable V
     ABI-CODE V=5 ( -- )
        V   #           CX      MOV          \ CX := address of V
        5   #           CX )    MOV          \ Write 5 to V
        DI )            AX      LEA          \ SPout := SPin
                                RET
     END-CODE

     ABI-CODE TEST2  ( -- n n )
        -16 DI  D)  AX          LEA          \ SPout := SPin + 2
        5   #       CX          MOV          \ CX := 5
        5   #       CX          CMP
        0= IF
            1   #   8   AX  D)      MOV      \ If CX = 5 then TOS - 1 := 1  <--
        ELSE
            2   #   8   AX  D)      MOV      \ else TOS - 1 := 2
        THEN
        6   #       CX          CMP
        0= IF
            3   #       AX  )       MOV      \ If CX = 6 then TOS := 3
        ELSE
            4   #       AX  )       MOV      \ else TOS := 4  <--
        THEN
                                RET
     END-CODE

     \ Do four loops. Expect : ( 4 3 2 1 -- )
     ABI-CODE LOOP4  ( -- n n n n )
            DI          AX      MOV          \ SPout := SPin
        4   #           DX      MOV          \ DX := 4  loop counter
        BEGIN
            8   #           AX      SUB      \ SP := SP + 1
                DX          AX  )   MOV      \ TOS := DX
            1   #           DX      SUB      \ DX := DX - 1
        0= UNTIL
                                RET
     END-CODE

   Here’s a AMD64 example that deals with FP values:

     abi-code my-f+  ( r1 r2 -- r )
     \ SP passed in di, returned in ax,  address of FP passed in si
     si )       dx mov         \ load fp
     8 dx d)  xmm0 movsd       \ r2
     dx )     xmm0 addsd       \ r1+r2
     xmm0  8 dx d) movsd       \ store r
     8 #      si ) add         \ update fp
     di         ax mov         \ sp into return reg
     ret
     end-code


File: gforth.info,  Node: Alpha Assembler,  Next: MIPS assembler,  Prev: AMD64 Assembler,  Up: Assembler and Code Words

6.29.6 Alpha Assembler
----------------------

The Alpha assembler and disassembler were originally written by Bernd
Thallner.

   The register names ‘a0’–‘a5’ are not available to avoid shadowing hex
numbers.

   Immediate forms of arithmetic instructions are distinguished by a ‘#’
just before the ‘,’, e.g., ‘and#,’ (note: ‘lda,’ does not count as
arithmetic instruction).

   You have to specify all operands to an instruction, even those that
other assemblers consider optional, e.g., the destination register for
‘br,’, or the destination register and hint for ‘jmp,’.

   You can specify conditions for ‘if,’ by removing the first ‘b’ and
the trailing ‘,’ from a branch with a corresponding name; e.g.,

     11 fgt if, \ if F11>0e
       ...
     endif,

   ‘fbgt,’ gives ‘fgt’.


File: gforth.info,  Node: MIPS assembler,  Next: PowerPC assembler,  Prev: Alpha Assembler,  Up: Assembler and Code Words

6.29.7 MIPS assembler
---------------------

The MIPS assembler was originally written by Christian Pirker.

   Currently the assembler and disassembler covers most of the MIPS32
architecture and doesn’t support FP instructions.

   The register names ‘$a0’–‘$a3’ are not available to avoid shadowing
hex numbers.  Use register numbers ‘$4’–‘$7’ instead.

   Nothing distinguishes registers from immediate values.  Use explicit
opcode names with the ‘i’ suffix for instructions with immediate
argument.  E.g.  ‘addiu,’ in place of ‘addu,’.

   Where the architecture manual specifies several formats for the
instruction (e.g., for ‘jalr,’),use the one with more arguments (i.e.
two for ‘jalr,’).  When in doubt, see ‘arch/mips/testasm.fs’ for an
example of correct use.

   Branches and jumps in the MIPS architecture have a delay slot.  You
have to fill it manually (the simplest way is to use ‘nop,’), the
assembler does not do it for you (unlike ‘as’).  Even ‘if,’, ‘ahead,’,
‘until,’, ‘again,’, ‘while,’, ‘else,’ and ‘repeat,’ need a delay slot.
Since ‘begin,’ and ‘then,’ just specify branch targets, they are not
affected.  For branches the argument specifying the target is a relative
address.  Add the address of the delay slot to get the absolute address.

   Note that you must not put branches nor jumps (nor control-flow
instructions) into the delay slot.  Also it is a bad idea to put
pseudo-ops such as ‘li,’ into a delay slot, as these may expand to
several instructions.  The MIPS I architecture also had load delay
slots, and newer MIPSes still have restrictions on using ‘mfhi,’ and
‘mflo,’.  Be careful to satisfy these restrictions, the assembler does
not do it for you.

   Some example of instructions are:

     $ra  12 $sp  sw,         \ sw    ra,12(sp)
     $4    8 $s0  lw,         \ lw    a0,8(s0)
     $v0  $0  lui,            \ lui   v0,0x0
     $s0  $s4  $12  addiu,    \ addiu s0,s4,0x12
     $s0  $s4  $4  addu,      \ addu  s0,s4,$a0
     $ra  $t9  jalr,          \ jalr  t9

   You can specify the conditions for ‘if,’ etc.  by taking a
conditional branch and leaving away the ‘b’ at the start and the ‘,’ at
the end.  E.g.,

     4 5 eq if,
       ... \ do something if $4 equals $5
     then,

   The calling conventions for 32-bit MIPS machines is to pass the first
4 arguments in registers ‘$4’..‘$7’, and to use ‘$v0’-‘$v1’ for return
values.  In addition to these registers, it is ok to clobber registers
‘$t0’-‘$t8’ without saving and restoring them.

   If you use ‘jalr,’ to call into dynamic library routines, you must
first load the called function’s address into ‘$t9’, which is used by
position-indirect code to do relative memory accesses.

   Here is an example of a MIPS32 ‘abi-code’ word:

     abi-code my+  ( n1 n2 -- n3 )
       \ SP passed in $4, returned in $v0
       $t0  4 $4  lw,         \ load n1, n2 from stack
       $t1  0 $4  lw,
       $t0  $t0  $t1  addu,   \ add n1+n2, result in $t0
       $t0  4 $4  sw,         \ store result (overwriting n1)
       $ra  jr,               \ return to caller
       $v0  $4  4  addiu,     \ (delay slot) return uptated SP in $v0
     end-code


File: gforth.info,  Node: PowerPC assembler,  Next: ARM Assembler,  Prev: MIPS assembler,  Up: Assembler and Code Words

6.29.8 PowerPC assembler
------------------------

The PowerPC assembler and disassembler were contributed by Michal
Revucky.

   This assembler does not follow the convention of ending mnemonic
names with a “,”, so some mnemonic names shadow regular Forth words (in
particular: ‘and or xor fabs’); so if you want to use the Forth words,
you have to make them visible first, e.g., with ‘also forth’.

   Registers are referred to by their number, e.g., ‘9’ means the
integer register 9 or the FP register 9 (depending on the instruction).

   Because there is no way to distinguish registers from immediate
values, you have to explicitly use the immediate forms of instructions,
i.e., ‘addi,’, not just ‘add,’.

   The assembler and disassembler usually support the most general form
of an instruction, but usually not the shorter forms (especially for
branches).


File: gforth.info,  Node: ARM Assembler,  Next: Other assemblers,  Prev: PowerPC assembler,  Up: Assembler and Code Words

6.29.9 ARM Assembler
--------------------

The ARM assembler includes all instruction of ARM architecture version
4, and the BLX instruction from architecture 5.  It does not (yet) have
support for Thumb instructions.  It also lacks support for any
co-processors.

   The assembler uses a postfix syntax with the same operand order as
used in the ARM Architecture Reference Manual.  Mnemonics are suffixed
by a comma.

   Registers are specified by their names ‘r0’ through ‘r15’, with the
aliases ‘pc’, ‘lr’, ‘sp’, ‘ip’ and ‘fp’ provided for convenience.  Note
that ‘ip’ refers to the“intra procedure call scratch register” (‘r12’)
and does not refer to an instruction pointer.  ‘sp’ refers to the ARM
ABI stack pointer (‘r13’) and not the Forth stack pointer.

   Condition codes can be specified anywhere in the instruction, but
will be most readable if specified just in front of the mnemonic.  The
’S’ flag is not a separate word, but encoded into instruction mnemonics,
ie.  just use ‘adds,’ instead of ‘add,’ if you want the status register
to be updated.

   The following table lists the syntax of operands for general
instructions:

     Gforth          normal assembler      description
     123 #           #123                  immediate
     r12             r12                   register
     r12 4 #LSL      r12, LSL #4           shift left by immediate
     r12 r1 LSL      r12, LSL r1           shift left by register
     r12 4 #LSR      r12, LSR #4           shift right by immediate
     r12 r1 LSR      r12, LSR r1           shift right by register
     r12 4 #ASR      r12, ASR #4           arithmetic shift right
     r12 r1 ASR      r12, ASR r1           ... by register
     r12 4 #ROR      r12, ROR #4           rotate right by immediate
     r12 r1 ROR      r12, ROR r1           ... by register
     r12 RRX         r12, RRX              rotate right with extend by 1

   Memory operand syntax is listed in this table:

     Gforth            normal assembler      description
     r4 ]              [r4]                  register
     r4 4 #]           [r4, #+4]             register with immediate offset
     r4 -4 #]          [r4, #-4]             with negative offset
     r4 r1 +]          [r4, +r1]             register with register offset
     r4 r1 -]          [r4, -r1]             with negated register offset
     r4 r1 2 #LSL -]   [r4, -r1, LSL #2]     with negated and shifted offset
     r4 4 #]!          [r4, #+4]!            immediate preincrement
     r4 r1 +]!         [r4, +r1]!            register preincrement
     r4 r1 -]!         [r4, +r1]!            register predecrement
     r4 r1 2 #LSL +]!  [r4, +r1, LSL #2]!    shifted preincrement
     r4 -4 ]#          [r4], #-4             immediate postdecrement
     r4 r1 ]+          [r4], r1              register postincrement
     r4 r1 ]-          [r4], -r1             register postdecrement
     r4 r1 2 #LSL ]-   [r4], -r1, LSL #2     shifted postdecrement
     ' xyz >body [#]   xyz                   PC-relative addressing

   Register lists for load/store multiple instructions are started and
terminated by using the words ‘{’ and ‘}’ respectively.  Between braces,
register names can be listed one by one or register ranges can be formed
by using the postfix operator ‘r-r’.  The ‘^’ flag is not encoded in the
register list operand, but instead directly encoded into the instruction
mnemonic, ie.  use ‘^ldm,’ and ‘^stm,’.

   Addressing modes for load/store multiple are not encoded as
instruction suffixes, but instead specified like an addressing mode, Use
one of ‘DA’, ‘IA’, ‘DB’, ‘IB’, ‘DA!’, ‘IA!’, ‘DB!’ or ‘IB!’.

   The following table gives some examples:

     Gforth                           normal assembler
     r4 ia  { r0 r7 r8 }  stm,        stmia    r4, {r0,r7,r8}
     r4 db!  { r0 r7 r8 }  ldm,       ldmdb    r4!, {r0,r7,r8}
     sp ia!  { r0 r15 r-r }  ^ldm,    ldmfd    sp!, {r0-r15}^

   Control structure words typical for Forth assemblers are available:
‘if,’ ‘ahead,’ ‘then,’ ‘else,’ ‘begin,’ ‘until,’ ‘again,’ ‘while,’
‘repeat,’ ‘repeat-until,’.  Conditions are specified in front of these
words:

     r1 r2 cmp,    \ compare r1 and r2
     eq if,        \ equal?
        ...          \ code executed if r1 == r2
     then,

   Example of a definition using the ARM assembler:

     abi-code my+ ( n1 n2 --  n3 )
        \ arm abi: r0=SP, r1=&FP, r2,r3,r12 saved by caller
        r0 IA!  { r2 r3 }  ldm,     \ pop r2 = n2, r3 = n1
        r3  r2  r3         add,     \ r3 = n1+n1
        r3  r0 -4 #]!      str,     \ push r3
        pc  lr             mov,     \ return to caller, new SP in r0
     end-code

