\ automatically generated by makedoc.fs

make-doc --objects-class-inst-size class -- addr  )objects
Give the size specification for an instance (i.e. an object)
of @var{class};
used as @code{class-inst-size 2@ ( class -- align size )}.

make-doc --objects-current-interface -- addr  )objects
Variable: contains the class or interface currently being
defined.

make-doc --objects-method xt "name" --  )objects
@code{name} execution: @code{... object -- ...}@*
Create selector @var{name} and makes @var{xt} its method in
the current class.

make-doc --objects-selector "name" --  )objects
@var{name} execution: @code{... object -- ...}@*
Create selector @var{name} for the current class and its
descendents; you can set a method for the selector in the
current class with @code{overrides}.

make-doc --objects-class->map class -- map  )objects
@var{map} is the pointer to @var{class}'s method map; it
points to the place in the map to which the selector offsets
refer (i.e., where @var{object-map}s point to).

make-doc --objects-class-override! xt sel-xt class-map --  )objects
@var{xt} is the new method for the selector @var{sel-xt} in
@var{class-map}.

make-doc --objects-overrides xt "selector" --  )objects
replace default method for @var{selector} in the current class
with @var{xt}. @code{overrides} must not be used during an
interface definition.

make-doc --objects-interface --  )objects
Start an interface definition.

make-doc --objects-end-interface-noname -- interface  )objects
End an interface definition. The resulting interface is
@var{interface}.

make-doc --objects-end-interface "name" --  )objects
@code{name} execution: @code{-- interface}@*
End an interface definition. The resulting interface is
@var{interface}.

make-doc --objects-protected --  )objects
Set the compilation wordlist to the current class's wordlist

make-doc --objects-public --  )objects
Restore the compilation wordlist that was in effect before the
last @code{protected} that actually changed the compilation
wordlist.

make-doc --objects-class>order class --  )objects
Add @var{class}'s wordlists to the head of the search-order.

make-doc --objects-methods class --  )objects
Makes @var{class} the current class. This is intended to be
used for defining methods to override selectors; you cannot
define new fields or selectors.

make-doc --objects-class parent-class -- align offset  )objects
Start a new class definition as a child of
@var{parent-class}. @var{align offset} are for use by
@var{field} etc.

make-doc --objects-class-previous class --  )objects
Drop @var{class}'s wordlists from the search order. No
checking is made whether @var{class}'s wordlists are actually
on the search order.

make-doc --objects-end-methods --  )objects
Switch back from defining methods of a class to normal mode
(currently this just restores the old search order).

make-doc --objects-end-class-noname align offset -- class  )objects
End a class definition. The resulting class is @var{class}.

make-doc --objects-end-class align offset "name" --  )objects
@var{name} execution: @code{-- class}@*
End a class definition. The resulting class is @var{class}.

make-doc --objects-implementation interface --  )objects
The current class implements @var{interface}. I.e., you can
use all selectors of the interface in the current class and its
descendents.

make-doc --objects-this -- object  )objects
the receiving object of the current method (aka active object).

make-doc --objects-to-this object --  )objects
Set @code{this} (used internally, but useful when debugging).

make-doc --objects-m: -- xt colon-sys; run-time: object --  )objects
Start a method definition; @var{object} becomes new @code{this}.

make-doc --objects-:m "name" -- xt; run-time: object --  )objects
Start a named method definition; @var{object} becomes new
@code{this}.  Has to be ended with @code{;m}.

make-doc --objects-exitm --  )objects
@code{exit} from a method; restore old @code{this}.

make-doc --objects-;m colon-sys --; run-time: --  )objects
End a method definition; restore old @code{this}.

make-doc catch ... xt -- ... n  ) exception

make-doc --objects-inst-var align1 offset1 align size "name" -- align2 offset2  )objects
@var{name} execution: @code{-- addr}@*
@var{addr} is the address of the field @var{name} in
@code{this} object.

make-doc --objects-inst-value align1 offset1 "name" -- align2 offset2  )objects
@var{name} execution: @code{-- w}@*
@var{w} is the value of the field @var{name} in @code{this}
object.

make-doc --objects-<to-inst> w xt --  )objects
store @var{w} into the field @var{xt} in @code{this} object.

make-doc --objects-[to-inst] compile-time: "name" -- ; run-time: w --  )objects
store @var{w} into field @var{name} in @code{this} object.

make-doc --objects-<bind> class selector-xt -- xt  )objects
@var{xt} is the method for the selector @var{selector-xt} in
@var{class}.

make-doc --objects-bind' "class" "selector" -- xt  )objects
@var{xt} is the method for @var{selector} in @var{class}.

make-doc --objects-bind ... "class" "selector" -- ...  )objects
Execute the method for @var{selector} in @var{class}.

make-doc --objects-[bind] compile-time: "class" "selector" -- ; run-time: ... object -- ...  )objects
Compile the method for @var{selector} in @var{class}.

make-doc --objects-current' "selector" -- xt  )objects
@var{xt} is the method for @var{selector} in the current class.

make-doc --objects-[current] compile-time: "selector" -- ; run-time: ... object -- ...  )objects
Compile the method for @var{selector} in the current class.

make-doc --objects-[parent] compile-time: "selector" -- ; run-time: ... object -- ...  )objects
Compile the method for @var{selector} in the parent of the
current class.

make-doc --objects-construct ... object --  )objects
Initialize the data fields of @var{object}. The method for the
class @var{object} just does nothing: @code{( object -- )}.

make-doc --objects-print object --  )objects
Print the object. The method for the class @var{object} prints
the address of the object and the address of its class.

make-doc --objects-object -- class  )objects
the ancestor of all classes.

make-doc --objects-init-object ... class object --  )objects
Initialize a chunk of memory (@var{object}) to an object of
class @var{class}; then performs @code{construct}.

make-doc --objects-xt-new ... class xt -- object  )objects
Make a new object, using @code{xt ( align size -- addr )} to
get memory.

make-doc --objects-dict-new ... class -- object  )objects
@code{allot} and initialize an object of class @var{class} in
the dictionary.

make-doc --objects-heap-new ... class -- object  )objects
@code{allocate} and initialize an object of class @var{class}.

make-doc --oof-static --  )oof
Create a class-wide cell-sized variable.

make-doc --oof-method --  )oof
Create a method selector.

make-doc --oof-early --  )oof
Create a method selector for early binding.

make-doc --oof-var size --  )oof
Create an instance variable

make-doc --oof-defer --  )oof
Create an instance defer

make-doc --oof-how: --  )oof how-to
End declaration, start implementation

make-doc --oof-class; --  )oof end-class
End class declaration or implementation

make-doc --oof-ptr --  )oof
Create an instance pointer

make-doc --oof-asptr class --  )oof
Create an alias to an instance pointer, cast to another class.

make-doc --oof-: <methodname> --  )oof colon

make-doc --oof-; xt colon-sys --  )oof

make-doc --oof-object-init ... --  )oof

make-doc --oof-object-dispose --  )oof

make-doc --oof-object-class "name" --  )oof

make-doc --oof-object-new -- o  )oof

make-doc --oof-object-new[] n -- o  )oof new-array

make-doc --oof-object-: "name" --  )oof define

make-doc --oof-object-ptr "name" --  )oof

make-doc --oof-object-asptr o "name" --  )oof

make-doc --oof-object-[] n "name" --  )oof array

make-doc --oof-object-:: "name" --  )oof scope

make-doc --oof-object-class? o -- flag  )oof class-query

make-doc --oof-object-super "name" --  )oof

make-doc --oof-object-self -- o  )oof

make-doc --oof-object-bind o "name" --  )oof

make-doc --oof-object-bound class addr "name" --  )oof

make-doc --oof-object-link "name" -- class addr  )oof

make-doc --oof-object-is xt "name" --  )oof

make-doc --oof-object-send xt --  )oof

make-doc --oof-object-with o --  )oof

make-doc --oof-object-endwith --  )oof

make-doc --oof-object-' "name" -- xt  )oof tick

make-doc --oof-object-postpone "name" --  )oof

make-doc --oof-object-definitions --  )oof

make-doc --oof-interface-implement interface --  )oof

make-doc --oof-interface-inter-method, interface --  )oof

make-doc --oof-interface-method --  )oof

make-doc --oof-interface-how: --  )oof

make-doc --oof-interface-interface; --  )oof

make-doc --oof-interface-: <methodname> --  )oof colon

make-doc --oof-interface-; xt colon-sys --  )oof

make-doc --oof-interface-interface --  )oof

make-doc method m v "name" -- m' v  ) mini-oof
Define a selector.

make-doc var m v size "name" -- m v'  ) mini-oof
Define a variable with @var{size} bytes.

make-doc class class -- class selectors vars  ) mini-oof
Start the definition of a class.

make-doc end-class class selectors vars "name" --  ) mini-oof
End the definition of a class.

make-doc defines xt class "name" --  ) mini-oof
Bind @var{xt} to the selector @var{name} in class @var{class}.

make-doc new class -- o  ) mini-oof
Create a new incarnation of the class @var{class}.

make-doc :: class "name" --  ) mini-oof colon-colon
Compile the method for the selector @var{name} of the class
@var{class} (not immediate!).

make-doc object -- a-addr  ) mini-oof
@var{object} is the base class of all objects.

make-doc FORK compilation -- orig ; run-time f --  ) gforth
AHEAD-like control structure: calls the code after JOIN.

make-doc JOIN orig --  ) gforth
THEN-like control structure for FORK

make-doc charclass --  ) regexp-cg
Create a charclass

make-doc +char char --  ) regexp-cg
add a char to the current charclass

make-doc -char char --  ) regexp-cg
remove a char from the current charclass

make-doc ..char start end --  ) regexp-cg
add a range of chars to the current charclass

make-doc +chars addr u --  ) regexp-cg
add a string of chars to the current charclass

make-doc +class class --  ) regexp-cg
union of charclass @var{class} and the current charclass

make-doc -class class --  ) regexp-cg
subtract the charclass @var{class} from the current charclass

make-doc c? addr class --  ) regexp-pattern
check @var{addr} for membership in charclass @var{class}

make-doc -c? addr class --  ) regexp-pattern
check @var{addr} for not membership in charclass @var{class}

make-doc \d addr -- addr'  ) regexp-pattern
check for digit

make-doc \s addr -- addr'  ) regexp-pattern
check for blanks

make-doc .? addr -- addr'  ) regexp-pattern
check for any single charachter

make-doc -\d addr -- addr'  ) regexp-pattern
check for not digit

make-doc -\s addr -- addr'  ) regexp-pattern
check for not blank

make-doc ` "char" --  ) regexp-pattern
check for particular char

make-doc `? "char" --  ) regexp-pattern

make-doc -` "char" --  ) regexp-pattern
check for particular char

make-doc \^ addr -- addr  ) regexp-pattern
check for string start

make-doc \$ addr -- addr  ) regexp-pattern
check for string end

make-doc str=? addr1 addr u -- addr2  ) regexp-pattern
check for a computed string on the stack (possibly a backreference)

make-doc =" <string>" --  ) regexp-pattern
check for string

make-doc (( addr u --  ) regexp-pattern
start regexp block

make-doc )) -- flag  ) regexp-pattern
end regexp block

make-doc {** addr -- addr addr  ) regexp-pattern begin-greedy-star
greedy zero-or-more pattern

make-doc {++ addr -- addr addr  ) regexp-pattern begin-greedy-plus
greedy one-or-more pattern

make-doc **} sys --  ) regexp-pattern end-greedy-star
end of greedy zero-or-more pattern

make-doc ++} sys --  ) regexp-pattern end-greedy-plus
end of greedy one-or-more pattern

make-doc {+ addr -- addr addr  ) regexp-pattern begin-non-greedy-plus
non-greedy one-or-more pattern

make-doc {* addr -- addr addr  ) regexp-pattern begin-non-greedy-star
non-greedy zero-or-more pattern

make-doc *} addr addr' -- addr'  ) regexp-pattern end-non-greedy-star
end of non-greedy zero-or-more pattern

make-doc +} addr addr' -- addr'  ) regexp-pattern end-non-greedy-plus
end of non-greedy one-or-more pattern

make-doc // --  ) regexp-pattern
search for string

make-doc {{ addr -- addr addr  ) regexp-pattern begin-alternatives
Start of alternatives

make-doc || addr addr -- addr addr  ) regexp-pattern next-alternative
separator between alternatives

make-doc }} addr addr -- addr  ) regexp-pattern end-alternatives
end of alternatives

make-doc \( addr -- addr  ) regexp-pattern
start of matching variable; variables are referred as \\1--9

make-doc \) addr -- addr  ) regexp-pattern
end of matching variable

make-doc \0 -- addr u  ) regexp-pattern
the whole string

make-doc s>> addr -- addr  ) regexp-replace
Start replace pattern region

make-doc << run-addr addr u -- run-addr  ) regexp-replace
Replace string from start of replace pattern region with
@var{addr} @var{u}

make-doc <<" "string<">" --  ) regexp-replace
Replace string from start of replace pattern region with
@var{string}

make-doc s// addr u -- ptr  ) regexp-replace
start search/replace loop

make-doc >> addr -- addr  ) regexp-replace
Start arbitrary replacement code, the code shall compute a string
on the stack and pass it to @code{<<}

make-doc //s ptr --  ) regexp-replace
search end

make-doc //o ptr addr u -- addr' u'  ) regexp-replace
end search/replace single loop

make-doc //g ptr addr u -- addr' u'  ) regexp-replace
end search/replace all loop

make-doc unquote addr u -- addr' u'  ) gforth-experimental
remove surrounding quotes

make-doc un-dquote addr u --  ) gforth-experimental
replace double quotes with single quotes

make-doc next-field addr u -- addr' u'  ) gforth-experimental

make-doc next-csv addr u -- addr' u' addr1 u1  ) gforth-experimental

make-doc csv-line addr u xt --  ) gforth-experimental

make-doc csv-read-loop xt --  ) gforth-experimental

make-doc read-csv addr u xt --  ) gforth-experimental
read CVS file @var{addr u} and execute @var{xt} for every item found.
@var{xt} takes @code{( addr u col line -- )}, i.e. the string, the
current column (starting with 0), and the current line (starting with
1).

make-doc .quoted-csv addr u --  ) gforth-experimental
print a quoted CSV entry

make-doc set-compsem xt --  ) gforth-experimental
change compilation semantics of the last defined word

make-doc intsem: --  ) gforth-experimental
The current definition's compilation semantics are changed to
perform its execution semantics (the word becomes immediate).
Then its interpretation semantics are changed to perform the
definition starting at the @code{intsem:}.  Note that if you
then call @code{immediate}, the compilation semantics are
changed to perform the word's new interpretation semantics.

make-doc compsem: --  ) gforth-experimental
Changes the compilation semantics of the current definition to
perform the definition starting at the @code{compsem:}.

make-doc native@ lsid -- addr u  ) gforth-experimental native-fetch
fetch native string from an @var{lsid}

make-doc L" "lsid<">" -- lsid  ) gforth-experimental l-quote
Parse a string and define a new lsid, if the string is uniquely new.
Identical strings result in identical lsids, which allows to refer
to the same lsid from multiple locations using the same string.

make-doc LU" "lsid<">" -- lsid  ) gforth-experimental l-unique-quote
Parse a string and always define a new lsid, even if the string is not
unique.

make-doc .lsids locale --  ) gforth-experimental dot-lsids
print the string for all lsids

make-doc Language "name" --  ) gforth-experimental
define a locale.  Executing that locale makes it the current locale.

make-doc Country <lang> "name" --  ) gforth-experimental
define a variant (typical: country) for the current locale.  Executing
that locale makes it the current locale.  You can create variants of
variants (a country may have variants within, e.g. think of how many
words for rolls/buns there are in many languages).

make-doc locale@ lsid -- addr u  ) gforth-experimental locale-fetch
fetch the localized string in the current language and country

make-doc locale! addr u lsid --  ) gforth-experimental locale-store
Store localized string @var{addr u} for the current locale and country
in @var{lsid}.

make-doc locale-file fid --  ) gforth-experimental locale-file
read lines from @var{fid} into the current locale.

make-doc included-locale addr u --  ) gforth-experimental included-locale
read lines from the file @var{addr u} into the current locale.

make-doc include-locale "name" --  ) gforth-experimental include-locale
read lines from the file @var{"name"} into the current locale.

make-doc define-locale addr u -- xt  ) gforth-experimental
Define a locale named @var{addr u} and return its @var{xt}.

make-doc insert-locale addr u col line --  ) gforth-experimental
insert a locale entry @var{addr u} from a table in column
@var{col} and line @var{line}.  Line 1 is special, it contains
the name of the corresponding locale.

make-doc locale-csv "name" --  ) gforth-experimental locale-csv
import comma-separated value table into locales.  first line contains
locale names, “program” and “default” are special entries; generic
languages must preceed translations for specific countries.  Entries
under “program” (must be leftmost) are used to search for the lsid; if
empty, the line number-1 is the lsid index.

make-doc .locale-csv --  ) gforth-experimental dot-locale-csv
write the locale database in CSV format to the terminal output.

make-doc locale-csv-out "name" --  ) gforth-experimental locale-csv
Create file @var{"name"} and write the locale database out to the file
@var{"name"} in CSV format.

make-doc pthread_cond_signal cond -- r  ) gforth-experimental

make-doc pthread_cond_broadcast cond -- r  ) gforth-experimental

make-doc pthread_cond_wait cond mutex -- r  ) gforth-experimental

make-doc pthread_cond_timedwait cond mutex abstime -- r  ) gforth-experimental

make-doc errno-throw errno --  ) gforth
throws code from a C error code on the stack (if not 0)

make-doc ?errno-throw f --  ) gforth
throw code computed from errno if f!=0

make-doc ?ior x --  ) gforth
use errno to generate throw when failing

make-doc user' "name" -- u  ) gforth-experimental
@i{U} is the offset of the user variable @i{name} in the user
area of each task.

make-doc 's addr1 task -- addr2  ) gforth-experimental
With @i{addr1} being an address in the user data of the current
task, @i{addr2} is the corresponding address in @i{task}'s user
data.

make-doc newtask4 u-data u-return u-fp u-locals -- task  ) gforth-experimental
creates @i{task} with data stack size @i{u-data}, return stack
size @i{u-return}, FP stack size @i{u-fp} and locals stack size
@i{u-locals}.

make-doc newtask stacksize -- task  ) gforth-experimental
creates @i{task}; each stack (data, return, FP, locals) has size
@i{stacksize}.

make-doc task ustacksize "name" --  ) gforth-experimental
creates a task @i{name}; each stack (data, return, FP, locals)
has size @i{ustacksize}.@*
@i{name} execution: ( -- @i{task} )

make-doc (activate) task --  ) gforth-experimental
activates task, the current procedure will be continued there

make-doc activate run-time nest-sys1 task --  ) gforth-experimental
Let @i{task} perform the code behind @code{activate}, and
return to the caller of the word containing @code{activate}.
When the task returns from the code behind @code{activate}, it
terminates itself.

make-doc (pass) x1 .. xn n task --  ) gforth-experimental

make-doc pass x1 .. xn n task --  ) gforth-experimental
Pull @i{x1 .. xn n} from the current task's data stack and push
@i{x1 .. xn} on @i{task}'s data stack.  Let @i{task} perform
the code behind @code{pass}, and return to the caller of the
word containing @code{pass}.  When the task returns from the
code behind @code{pass}, it terminates itself.

make-doc initiate xt task --  ) gforth-experimental
Let @i{task} execute @i{xt}.  Upon return from the @i{xt}, the task
terminates itself (VFX compatible).  Use one-time executable closures
to pass arbitrary paramenters to a task.

make-doc semaphore "name" --  ) gforth-experimental
create a named semaphore @i{name}@*
@i{name} execution: ( -- @i{semaphore} )

make-doc cond "name" --  ) gforth-experimental
create a named condition

make-doc lock semaphore --  ) gforth-experimental
lock the semaphore

make-doc unlock semaphore --  ) gforth-experimental
unlock the semaphore

make-doc critical-section xt semaphore --  ) gforth-experimental
Execute @i{xt} while locking @i{semaphore}.  After leaving
@i{xt}, @i{semaphore} is unlocked even if an exception is
thrown.

make-doc >pagealign-stack n addr -- n'  ) gforth-experimental

make-doc stacksize -- u  ) gforth-experimental
@i{u} is the data stack size of the main task.

make-doc stacksize4 -- u-data u-return u-fp u-locals  ) gforth-experimental
Pushes the data, return, FP, and locals stack sizes of the main task.

make-doc execute-task xt -- task  ) gforth-experimental
Create a new task @var{task} with the same stack sizes as the
main task. Let @i{task} execute @i{xt}.  Upon return from the
@i{xt}, the task terminates itself.

make-doc send-event xt task --  ) gforth-experimental
Task IPC: send @var{xt} to @var{task}.  The xt is executed
there.  Use a one-shot closure to pass parameters with the xt.

make-doc ?events --  ) gforth-experimental question-events
Perform all event sequences in the current task's message
queue, one event sequence at a time.

make-doc stop --  ) gforth-experimental
stops the current task, and waits for events (which may restart it)

make-doc stop-ns timeout --  ) gforth-experimental
Stop with timeout (in nanoseconds), better replacement for ms

make-doc stop-dns dtimeout --  ) gforth-experimental
Stop with dtimeout (in nanoseconds), better replacement for ms

make-doc event-loop --  ) gforth-experimental
Wait for event sequences, and execute any event sequences when
they arrive.  Return to waiting if no event sequences are in
the queue.  This word never returns.

make-doc pause --  ) gforth-experimental
voluntarily switch to the next waiting task (@code{pause} is
the traditional cooperative task switcher; in the pthread
multitasker, you don't need @code{pause} for cooperation, but
you still can use it e.g. when you have to resort to polling
for some reason).  This also checks for events in the queue.

make-doc thread-deadline d --  ) gforth-experimental
wait until absolute time @var{d} in nanoseconds, base is 1970-1-1 0:00
UTC

make-doc restart task --  ) gforth-experimental
Wake a task

make-doc wake task --  ) gforth-experimental

make-doc halt task --  ) gforth-experimental
Stop a task

make-doc sleep task --  ) gforth-experimental

make-doc event-block task --  ) gforth-experimental
send an event and wait for the answer

make-doc kill task --  ) gforth-experimental
Terminate @i{task}.

make-doc UDefer "name" --  ) gforth
@i{Name} is a task-local deferred word.@*
@i{Name} execution: ( ... -- ... )

make-doc cores -- u  ) cilk
A value containing the number of worker tasks to use.  By default
this is the number of hardware threads (with SMT/HT), if we can
determine that, otherwise 1.  If you want to use a different
number, change @code{cores} before calling @code{cilk-init}.

make-doc worker-thread invoker --  ) cilk

make-doc cilk-sync --  ) cilk
Wait for all subproblems to complete.

make-doc cilk-init --  ) cilk
Start the worker tasks if not already done.

make-doc spawn xt --  ) cilk
Execute @i{xt} ( -- ) in a worker task.
Use one-time executable closures to pass heap-allocated closures,
allowing to pass arbitrary data from the spawner to the code
running in the worker.@*
E.g.: @code{( n r ) [@{: n f: r :@}h1 code ;] spawn}

make-doc spawn1 x xt --  ) cilk
Execute @i{xt} ( x -- ) in a worker task.

make-doc spawn2 x1 x2 xt --  ) cilk
Execute @i{xt} ( x1 x2 -- ) in a worker task.

make-doc cilk-bye --  ) cilk
Terminate all workers.

make-doc cov+ --  ) gforth-experimental
(Immediate) Place a coverage counter here.

make-doc ?cov+ flag -- flag  ) gforth-experimental
(Immediate) A coverage counter for a flag; in the coverage
output you see three numbers behind @code{?cov}: The first is
the number of executions where the top-of-stack was non-zero;
the second is the number of executions where it was zero; the
third is the total number of executions.

make-doc cov% --  ) gforth-experimental cov-percent
Print the percentage of basic blocks loaded after
@file{coverage.fs} that are executed at least once.

make-doc .cover-raw --  ) gforth-experimental
Print raw execution counts.

make-doc color-cover --  ) gforth
Print execution counts in colours (default).

make-doc bw-cover --  ) gforth
Print execution counts in parentheses (source-code compatible).

make-doc .cover-file fn --  ) gforth-experimental
Print coverage in included file with index @var{fn}.

make-doc covered? fn -- flag  ) gforth-experimental
Check if included file with index @var{fn} has coverage information.

make-doc .coverage --  ) gforth-experimental
Show code with execution frequencies.

make-doc annotate-cov --  ) gforth-experimental
For every file with coverage information, produce a @code{.cov}
file that has the execution frequencies inserted.  We recommend
to use @code{bw-cover} first (with the default
@code{color-cover} you get escape sequences in the files).

make-doc hash-cover -- addr u  ) gforth-experimental

make-doc cover-filename -- addr u  ) gforth-experimental

make-doc save-cov --  ) gforth-experimental
Save coverage counters.

make-doc load-cov --  ) gforth-experimental
Load coverage counters.
