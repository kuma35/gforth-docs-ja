This is gforth.info, produced by makeinfo version 6.8 from gforth.texi.

このマニュアルは、 標準 Forth 言語の高速で移植可能な実装である Gforth (バ
ージョン 0.7.9_20240418, April 18, 2024)用です。 これはリファレンス・マ
ニュアルとして機能しますが、 Forth の概要と Forth チュートリアルも含まれ
ています。

   Authors: Bernd Paysan, Anton Ertl, Gerald Wodni Copyright © 1995,
1996, 1997, 1998, 2000, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
2011, 2012, 2013, 2014,2015,2016,2017,2018,2019,2020,2021,2022,2023 Free
Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by the
     Free Software Foundation raise funds for GNU development.”
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Gforth: (gforth).          forth言語のための高速インタプリタ
END-INFO-DIR-ENTRY


File: gforth.info,  Node: Forth-related information,  Next: Licenses,  Prev: Origin,  Up: Top

Appendix C Other Forth-related information
******************************************

There is an active news group (comp.lang.forth) discussing Forth
(including Gforth) and Forth-related issues.  Its FAQs
(https://www.complang.tuwien.ac.at/forth/faq/faq-general-2.html)
(frequently asked questions and their answers) contains a lot of
information on Forth.  You should read it before posting to
comp.lang.forth.

   The Forth standard is most usable in its HTML form
(https://forth-standard.org/).


File: gforth.info,  Node: Licenses,  Next: Word Index,  Prev: Forth-related information,  Up: Top

Appendix D Licenses
*******************

* Menu:

* GNU Free Documentation License::  このマニュアルのコピー時のライセンス
* Copying::                  GPL (このソフトウェアのコピー用)


File: gforth.info,  Node: GNU Free Documentation License,  Next: Copying,  Prev: Licenses,  Up: Licenses

D.1 GNU Free Documentation License
==================================

                      Version 1.2, November 2002

     Copyright © 2000,2001,2002 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses terminated
     so long as such parties remain in full compliance.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.

D.1.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: gforth.info,  Node: Copying,  Prev: GNU Free Documentation License,  Up: Licenses

D.2 GNU GENERAL PUBLIC LICENSE
==============================

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program—to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers’ and authors’ protection, the GPL clearly explains
that there is no warranty for this free software.  For both users’ and
authors’ sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users’ freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     “This License” refers to version 3 of the GNU General Public
     License.

     “Copyright” also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     “The Program” refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as “you”.  “Licensees” and
     “recipients” may be individuals or organizations.

     To “modify” a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a “modified
     version” of the earlier work or a work “based on” the earlier work.

     A “covered work” means either the unmodified Program or a work
     based on the Program.

     To “propagate” a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To “convey” a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays “Appropriate Legal Notices”
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The “source code” for a work means the preferred form of the work
     for making modifications to it.  “Object code” means any non-source
     form of a work.

     A “Standard Interface” means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The “System Libraries” of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A “Major Component”, in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The “Corresponding Source” for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work’s System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users’ Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work’s users, your or third parties’ legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program’s source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to “keep intact all notices”.

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an “aggregate” if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation’s users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A “User Product” is either (1) a “consumer product”, which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     “normally used” refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     “Installation Information” for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     “Additional permissions” are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered “further
     restrictions” within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An “entity transaction” is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party’s predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A “contributor” is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor’s “contributor
     version”.

     A contributor’s “essential patent claims” are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, “control”
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor’s essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a “patent license” is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To “grant”
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  “Knowingly relying” means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient’s use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is “discriminatory” if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others’ Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS”
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
“copyright” line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type ‘show w’.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program’s commands might be different; for a GUI interface, you would
use an “about box”.

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a “copyright disclaimer” for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: gforth.info,  Node: Word Index,  Next: Concept Index,  Prev: Licenses,  Up: Top

Word Index
**********

This index is a list of Forth words that have “glossary” entries within
this manual.  Each word is listed with its stack effect and wordset.

 [index ]
* Menu:

* ! ( W A-ADDR -- ) core:                Memory Access.       (line   9)
* !!FIXME!! ( -- ) gforth-1.0:           Debugging.           (line  62)
* !@ ( U1 A-ADDR -- U2 ) gforth-experimental: Hardware operations for multi-tasking.
                                                              (line  13)
* !resize ( RX RY RW RH RD -- ) minos2:  widget methods.      (line  93)
* !size ( -- ) minos2:                   widget methods.      (line  96)
* # ( UD1 -- UD2 ) core:                 Formatted numeric output.
                                                              (line  51)
* #! ( -- ) gforth-0.2:                  Running Image Files. (line  68)
* #> ( XD -- ADDR U ) core:              Formatted numeric output.
                                                              (line  74)
* #>> ( -- ) gforth-0.5:                 Formatted numeric output.
                                                              (line  81)
* #bell ( -- C ) gforth-0.2:             String and character literals.
                                                              (line  91)
* #bs ( -- C ) gforth-0.2:               String and character literals.
                                                              (line  87)
* #cr ( -- C ) gforth-0.2:               String and character literals.
                                                              (line  83)
* #del ( -- C ) gforth-0.2:              String and character literals.
                                                              (line  89)
* #eof ( -- C ) gforth-0.7:              String and character literals.
                                                              (line  95)
* #esc ( -- C ) gforth-0.5:              String and character literals.
                                                              (line  93)
* #ff ( -- C ) gforth-0.2:               String and character literals.
                                                              (line  85)
* #lf ( -- C ) gforth-0.2:               String and character literals.
                                                              (line  81)
* #line ( "U" "["FILE"]" -- ) gforth-1.0: Interpreter Directives.
                                                              (line  99)
* #loc ( NLINE NCHAR "FILE" -- ) gforth-1.0: Debugging.       (line  80)
* #locals ( -- N ) environment:          Environmental Queries.
                                                              (line  73)
* #s ( UD -- 0 0 ) core:                 Formatted numeric output.
                                                              (line  56)
* #tab ( -- C ) gforth-0.2:              String and character literals.
                                                              (line  79)
* #tib ( -- ADDR ) core-ext-obsolescent: The Text Interpreter.
                                                              (line 131)
* $! ( ADDR1 U $ADDR -- ) gforth-0.7:    $tring words.        (line  24)
* $!len ( U $ADDR -- ) gforth-0.7:       $tring words.        (line  34)
* $+! ( ADDR1 U $ADDR -- ) gforth-0.7:   $tring words.        (line  48)
* $+!len ( U $ADDR -- ADDR ) gforth-1.0: $tring words.        (line  38)
* $+slurp ( FID ADDR -- ) gforth-1.0:    $tring words.        (line  89)
* $+slurp-file ( C-ADDR U ADDR -- ) gforth-1.0: $tring words. (line  93)
* $+[]! ( C-ADDR U $[]ADDR -- ) gforth-1.0: $tring words.     (line 108)
* $. ( ADDR -- ) gforth-1.0:             $tring words.        (line  79)
* $? ( -- N ) gforth-0.2:                Passing Commands to the OS.
                                                              (line  25)
* $@ ( $ADDR -- ADDR2 U ) gforth-0.7:    $tring words.        (line  28)
* $@len ( $ADDR -- U ) gforth-0.7:       $tring words.        (line  31)
* $boot ( $ADDR -- ) gforth-1.0:         $tring words.        (line 143)
* $del ( ADDR OFF U -- ) gforth-0.7:     $tring words.        (line  42)
* $exec ( XT ADDR -- ) gforth-1.0:       $tring words.        (line  72)
* $free ( $ADDR -- ) gforth-1.0:         $tring words.        (line  54)
* $init ( $ADDR -- ) gforth-1.0:         $tring words.        (line  57)
* $ins ( ADDR1 U $ADDR OFF -- ) gforth-0.7: $tring words.     (line  45)
* $iter ( .. $ADDR CHAR XT -- .. ) gforth-0.7: $tring words.  (line  64)
* $over ( ADDR U $ADDR OFF -- ) gforth-1.0: $tring words.     (line  69)
* $save ( $ADDR -- ) gforth-1.0:         $tring words.        (line 137)
* $saved ( ADDR -- ) gforth-1.0:         $tring words.        (line 150)
* $slurp ( FID ADDR -- ) gforth-1.0:     $tring words.        (line  82)
* $slurp-file ( C-ADDR U ADDR -- ) gforth-1.0: $tring words.  (line  86)
* $split ( ADDR U CHAR -- ADDR1 U1 ADDR2 U2 ) gforth-0.7: $tring words.
                                                              (line  60)
* $substitute ( ADDR1 LEN1 -- ADDR2 LEN2 N/IOR ) gforth-experimental: Substitute.
                                                              (line  25)
* $tmp ( XT -- ADDR U ) gforth-1.0:      $tring words.        (line  76)
* $unescape ( ADDR1 U1 -- ADDR2 U2 ) gforth-experimental: Substitute.
                                                              (line  40)
* $Variable ( -- ) gforth-1.0:           $tring words.        (line 156)
* $[] ( U $[]ADDR -- ADDR' ) gforth-1.0: $tring words.        (line  96)
* $[]! ( C-ADDR U N $[]ADDR -- ) gforth-1.0: $tring words.    (line 100)
* $[]# ( ADDR -- LEN ) gforth-1.0:       $tring words.        (line 116)
* $[]+! ( C-ADDR U N $[]ADDR -- ) gforth-1.0: $tring words.   (line 104)
* $[]. ( ADDR -- ) gforth-1.0:           $tring words.        (line 129)
* $[]@ ( N $[]ADDR -- ADDR U ) gforth-1.0: $tring words.      (line 112)
* $[]boot ( ADDR -- ) gforth-1.0:        $tring words.        (line 147)
* $[]free ( ADDR -- ) gforth-1.0:        $tring words.        (line 132)
* $[]map ( ADDR XT -- ) gforth-1.0:      $tring words.        (line 119)
* $[]save ( ADDR -- ) gforth-1.0:        $tring words.        (line 140)
* $[]saved ( ADDR -- ) gforth-1.0:       $tring words.        (line 153)
* $[]slurp ( FID ADDR -- ) gforth-1.0:   $tring words.        (line 123)
* $[]slurp-file ( ADDR U $ADDR -- ) gforth-1.0: $tring words. (line 126)
* $[]Variable ( -- ) gforth-1.0:         $tring words.        (line 159)
* %align ( ALIGN SIZE -- ) gforth-0.4:   Structure Glossary.  (line   6)
* %alignment ( ALIGN SIZE -- ALIGN ) gforth-0.4: Structure Glossary.
                                                              (line   9)
* %alloc ( ALIGN SIZE -- ADDR ) gforth-0.4: Structure Glossary.
                                                              (line  12)
* %allocate ( ALIGN SIZE -- ADDR IOR ) gforth-0.4: Structure Glossary.
                                                              (line  16)
* %allot ( ALIGN SIZE -- ADDR ) gforth-0.4: Structure Glossary.
                                                              (line  20)
* %size ( ALIGN SIZE -- SIZE ) gforth-0.4: Structure Glossary.
                                                              (line  48)
* ' ( "NAME" -- XT ) core:               Execution token.     (line  24)
* 'cold ( -- ) gforth-0.2:               Modifying the Startup Sequence.
                                                              (line  47)
* 's ( ADDR1 TASK -- ADDR2 ) gforth-experimental: Task-local data.
                                                              (line  43)
* ( ( COMPILATION 'CCC<CLOSE-PAREN>' -- ; RUN-TIME -- ) core,file: Comments.
                                                              (line   9)
* (( ( ADDR U -- ) regexp-pattern:       Regular Expressions. (line  28)
* (local) ( ADDR U -- ) local:           Standard Forth locals.
                                                              (line  23)
* (to) ( VAL OPERATION XT -- ) gforth-1.0: User-defined TO and DEFER@.
                                                              (line  13)
* ) ( -- ) gforth-0.2:                   Assertions.          (line  46)
* )) ( -- FLAG ) regexp-pattern:         Regular Expressions. (line  31)
* * ( N1 N2 -- N ) core:                 Single precision.    (line  25)
* **} ( SYS -- ) regexp-pattern:         Regular Expressions. (line 113)
* */ ( ( N1 N2 N3 -- N4 ) core:          Integer division.    (line  91)
* */f ( N1 N2 N3 -- N4 ) gforth-1.0:     Integer division.    (line  97)
* */mod ( N1 N2 N3 -- N4 N5 ) core:      Integer division.    (line 103)
* */modf ( N1 N2 N3 -- N4 N5 ) gforth-1.0: Integer division.  (line 111)
* */mods ( N1 N2 N3 -- N4 N5 ) gforth-1.0: Integer division.  (line 107)
* */s ( N1 N2 N3 -- N4 ) gforth-1.0:     Integer division.    (line  94)
* *align ( N -- ) gforth-1.0:            Address arithmetic.  (line 121)
* *aligned ( ADDR1 N -- ADDR2 ) gforth-1.0: Address arithmetic.
                                                              (line 117)
* *} ( ADDR ADDR' -- ADDR' ) regexp-pattern: Regular Expressions.
                                                              (line 125)
* + ( N1 N2 -- N ) core:                 Single precision.    (line  14)
* +! ( N A-ADDR -- ) core:               Memory Access.       (line  12)
* +!@ ( U1 A-ADDR -- U2 ) gforth-experimental: Hardware operations for multi-tasking.
                                                              (line  16)
* ++} ( SYS -- ) regexp-pattern:         Regular Expressions. (line 119)
* +char ( CHAR -- ) regexp-cg:           Regular Expressions. (line  42)
* +chars ( ADDR U -- ) regexp-cg:        Regular Expressions. (line  51)
* +class ( CLASS -- ) regexp-cg:         Regular Expressions. (line  54)
* +DO ( COMPILATION -- DO-SYS ; RUN-TIME N1 N2 -- | LOOP-SYS ) gforth-0.2: Counted Loops.
                                                              (line 180)
* +field ( NOFFSET1 NSIZE "NAME" -- NOFFSET2 ) facility-ext: Forth200x Structures.
                                                              (line  49)
* +fmode ( FAM1 RWXRWXRWX -- FAM2 ) gforth-1.0: General files.
                                                              (line  17)
* +load ( I*X N -- J*X ) gforth-0.2:     Blocks.              (line 190)
* +LOOP ( COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 N -- | LOOP-SYS2 ) core: Counted Loops.
                                                              (line 227)
* +ltrace ( -- ) gforth-1.0:             Debugging.           (line  74)
* +thru ( I*X N1 N2 -- J*X ) gforth-0.2: Blocks.              (line 194)
* +TO ( VALUE "NAME" -- ) gforth-1.0:    Values.              (line  36)
* +x/string ( XC-ADDR1 U1 -- XC-ADDR2 U2 ) xchar-ext: Xchars and Unicode.
                                                              (line  90)
* +} ( ADDR ADDR' -- ADDR' ) regexp-pattern: Regular Expressions.
                                                              (line 131)
* , ( W -- ) core:                       Dictionary allocation.
                                                              (line  48)
* - ( N1 N2 -- N ) core:                 Single precision.    (line  21)
* -- ( HMADDR U LATEST LATESTNT WID 0 ... -- ) gforth-0.2: Locals definition words.
                                                              (line  14)
* --> ( -- ) gforth-0.2:                 Blocks.              (line 198)
* ->here ( ADDR -- ) gforth-1.0:         Dictionary allocation.
                                                              (line  38)
* -c? ( ADDR CLASS -- ) regexp-pattern:  Regular Expressions. (line  67)
* -char ( CHAR -- ) regexp-cg:           Regular Expressions. (line  45)
* -class ( CLASS -- ) regexp-cg:         Regular Expressions. (line  57)
* -DO ( COMPILATION -- DO-SYS ; RUN-TIME N1 N2 -- | LOOP-SYS ) gforth-0.2: Counted Loops.
                                                              (line 201)
* -infinity ( -- R ) gforth-1.0:         Floating Point.      (line 188)
* -LOOP ( COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 U -- | LOOP-SYS2 ) gforth-0.2: Counted Loops.
                                                              (line 230)
* -ltrace ( -- ) gforth-1.0:             Debugging.           (line  77)
* -rot ( W1 W2 W3 -- W3 W1 W2 ) gforth-0.2: Data stack.       (line  27)
* -trailing ( C_ADDR U1 -- C_ADDR U2 ) string: String words.  (line  41)
* -trailing-garbage ( XC-ADDR U1 -- XC-ADDR U2 ) xchar-ext: Xchars and Unicode.
                                                              (line 101)
* -[do ( COMPILATION -- DO-SYS ; RUN-TIME N1 N2 -- | LOOP-SYS ) gforth-experimental: Counted Loops.
                                                              (line 191)
* -\d ( ADDR -- ADDR' ) regexp-pattern:  Regular Expressions. (line  79)
* -\s ( ADDR -- ADDR' ) regexp-pattern:  Regular Expressions. (line  82)
* -` ( "CHAR" -- ) regexp-pattern:       Regular Expressions. (line  90)
* . ( N -- ) core:                       Simple numeric output.
                                                              (line  10)
* ." ( COMPILATION 'CCC"' -- ; RUN-TIME -- ) core: Miscellaneous output.
                                                              (line  29)
* .( ( COMPILATION&INTERPRETATION "CCC<PAREN>" -- ) core-ext: Miscellaneous output.
                                                              (line  35)
* ... ( X1 .. XN -- X1 .. XN ) gforth-1.0: Examining data.    (line   8)
* ..char ( START END -- ) regexp-cg:     Regular Expressions. (line  48)
* .? ( ADDR -- ADDR' ) regexp-pattern:   Regular Expressions. (line  76)
* .cover-raw ( -- ) gforth-experimental: Code Coverage.       (line  49)
* .coverage ( -- ) gforth-experimental:  Code Coverage.       (line  36)
* .debugline ( NFILE NLINE -- ) gforth-0.6: Debugging.        (line  34)
* .fpath ( -- ) gforth-0.4:              Source Search Paths. (line  12)
* .hm ( NT -- ) gforth-1.0:              Header methods.      (line  24)
* .id ( NT -- ) gforth-0.6:              Name token.          (line  68)
* .included ( -- ) gforth-0.5:           Forth source files.  (line  64)
* .locale-csv ( -- ) gforth-experimental: i18n and l10n.      (line  62)
* .path ( PATH-ADDR -- ) gforth-0.4:     General Search Paths.
                                                              (line  29)
* .r ( N1 N2 -- ) core-ext:              Simple numeric output.
                                                              (line  30)
* .recognizers ( -- ) gforth-experimental: Default Recognizers.
                                                              (line  47)
* .s ( -- ) tools:                       Examining data.      (line  11)
* .substitute ( ADDR1 LEN1 -- N / IOR ) gforth-experimental: Substitute.
                                                              (line  21)
* .unresolved ( -- ) gforth-1.0:         Forward.             (line  17)
* .voc ( WID -- ) gforth-0.2:            Word Lists.          (line  95)
* .widget ( -- ) minos2:                 widget methods.      (line 102)
* .\" ( COMPILATION 'CCC"' -- ; RUN-TIME -- ) gforth-0.6: Miscellaneous output.
                                                              (line  26)
* / ( N1 N2 -- N ) core:                 Integer division.    (line  44)
* // ( -- ) regexp-pattern:              Regular Expressions. (line 137)
* //g ( PTR ADDR U -- ADDR' U' ) regexp-replace: Regular Expressions.
                                                              (line 187)
* //o ( PTR ADDR U -- ADDR' U' ) regexp-replace: Regular Expressions.
                                                              (line 184)
* //s ( PTR -- ) regexp-replace:         Regular Expressions. (line 181)
* /COUNTED-STRING ( -- N ) environment:  Environmental Queries.
                                                              (line  31)
* /f ( N1 N2 -- N ) gforth-1.0:          Integer division.    (line  49)
* /f-stage1m ( N ADDR-RECI -- ) gforth-1.0: Two-stage integer division.
                                                              (line  52)
* /f-stage2m ( N1 A-RECI -- NQUOTIENT ) gforth-1.0: Two-stage integer division.
                                                              (line  56)
* /HOLD ( -- N ) environment:            Environmental Queries.
                                                              (line  34)
* /l ( -- U ) gforth-0.7:                Address arithmetic.  (line 149)
* /mod ( N1 N2 -- N3 N4 ) core:          Integer division.    (line  62)
* /modf ( N1 N2 -- N3 N4 ) gforth-1.0:   Integer division.    (line  68)
* /modf-stage2m ( N1 A-RECI -- UMODULUS NQUOTIENT ) gforth-1.0: Two-stage integer division.
                                                              (line  64)
* /mods ( N1 N2 -- N3 N4 ) gforth-1.0:   Integer division.    (line  65)
* /PAD ( -- N ) environment:             Environmental Queries.
                                                              (line  37)
* /s ( N1 N2 -- N ) gforth-1.0:          Integer division.    (line  47)
* /string ( C-ADDR1 U1 N -- C-ADDR2 U2 ) string: String words.
                                                              (line  45)
* /w ( -- U ) gforth-0.7:                Address arithmetic.  (line 146)
* /x ( -- U ) gforth-1.0:                Address arithmetic.  (line 152)
* 0< ( N -- F ) core:                    Numeric comparison.  (line  21)
* 0<= ( N -- F ) gforth-0.2:             Numeric comparison.  (line  23)
* 0<> ( N -- F ) core-ext:               Numeric comparison.  (line  25)
* 0= ( N -- F ) core:                    Numeric comparison.  (line  27)
* 0> ( N -- F ) core-ext:                Numeric comparison.  (line  29)
* 0>= ( N -- F ) gforth-0.2:             Numeric comparison.  (line  31)
* 1+ ( N1 -- N2 ) core:                  Single precision.    (line  16)
* 1- ( N1 -- N2 ) core:                  Single precision.    (line  23)
* 1/f ( R1 -- R2 ) gforth-0.2:           Floating Point.      (line  90)
* 2! ( W1 W2 A-ADDR -- ) core:           Memory Access.       (line  25)
* 2* ( N1 -- N2 ) core:                  Bitwise operations.  (line  41)
* 2, ( W1 W2 -- ) gforth-0.2:            Dictionary allocation.
                                                              (line  51)
* 2/ ( N1 -- N2 ) core:                  Bitwise operations.  (line  44)
* 2>r ( W1 W2 -- R:W1 R:W2 ) core-ext:   Return stack.        (line  21)
* 2@ ( A-ADDR -- W1 W2 ) core:           Memory Access.       (line  21)
* 2Constant ( W1 W2 "NAME" -- ) double:  Constants.           (line  33)
* 2drop ( W1 W2 -- ) core:               Data stack.          (line  35)
* 2dup ( W1 W2 -- W1 W2 W1 W2 ) core:    Data stack.          (line  39)
* 2field: ( U1 "NAME" -- U2 ) gforth-0.7: Forth200x Structures.
                                                              (line  59)
* 2Literal ( COMPILATION W1 W2 -- ; RUN-TIME -- W1 W2 ) double: Literals.
                                                              (line  57)
* 2nip ( W1 W2 W3 W4 -- W3 W4 ) gforth-0.2: Data stack.       (line  37)
* 2over ( W1 W2 W3 W4 -- W1 W2 W3 W4 W1 W2 ) core: Data stack.
                                                              (line  41)
* 2r> ( R:W1 R:W2 -- W1 W2 ) core-ext:   Return stack.        (line  23)
* 2r@ ( R:W1 R:W2 -- R:W1 R:W2 W1 W2 ) core-ext: Return stack.
                                                              (line  25)
* 2rdrop ( R:W1 R:W2 -- ) gforth-0.2:    Return stack.        (line  27)
* 2rot ( W1 W2 W3 W4 W5 W6 -- W3 W4 W5 W6 W1 W2 ) double-ext: Data stack.
                                                              (line  47)
* 2swap ( W1 W2 W3 W4 -- W3 W4 W1 W2 ) core: Data stack.      (line  45)
* 2tuck ( W1 W2 W3 W4 -- W3 W4 W1 W2 W3 W4 ) gforth-0.2: Data stack.
                                                              (line  43)
* 2Value ( D "NAME" -- ) double-ext:     Values.              (line  27)
* 2Variable ( "NAME" -- ) double:        Variables.           (line  39)
* 2varue ( X1 X2 "NAME" -- ) gforth-1.0: Varues.              (line  15)
* : ( "NAME" -- COLON-SYS ) core:        Colon Definitions.   (line  17)
* :: ( CLASS "NAME" -- ) mini-oof:       Basic Mini-OOF Usage.
                                                              (line  32)
* :m ( "NAME" -- XT; RUN-TIME: OBJECT -- ) objects: Objects Glossary.
                                                              (line 103)
* :noname ( -- XT COLON-SYS ) core-ext:  Anonymous Definitions.
                                                              (line   9)
* :} ( HMADDR U LATEST LATESTNT WID 0 XT1 ... XTN -- ) gforth-1.0: Locals definition words.
                                                              (line  23)
* :}d ( HMADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- ) gforth-1.0: Closures.
                                                              (line  29)
* :}h ( HMADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- ) gforth-1.0: Closures.
                                                              (line  33)
* :}h1 ( HMADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- ) gforth-1.0: Closures.
                                                              (line  37)
* :}l ( HMADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- ) gforth-1.0: Closures.
                                                              (line  25)
* :}xt ( HMADDR U LATEST LATESTNT WID 0 A-ADDR1 U1 ... -- ) gforth-1.0: Closures.
                                                              (line  41)
* ; ( COMPILATION COLON-SYS -- ; RUN-TIME NEST-SYS -- ) core: Colon Definitions.
                                                              (line  19)
* ;> ( -- ) gforth-experimental:         Closures.            (line  93)
* ;abi-code ( -- ) gforth-1.0:           Assembler Definitions.
                                                              (line  47)
* ;code ( COMPILATION. COLON-SYS1 -- COLON-SYS2 ) tools-ext: Assembler Definitions.
                                                              (line  70)
* ;inline ( INLINE:-SYS -- ) gforth-experimental: Colon Definitions.
                                                              (line  32)
* ;m ( COLON-SYS --; RUN-TIME: -- ) objects: Objects Glossary.
                                                              (line 107)
* ;s ( R:W -- ) gforth-0.2:              Calls and returns.   (line  53)
* ;] ( COMPILE-TIME: QUOTATION-SYS -- ; RUN-TIME: -- XT ) gforth-1.0: Quotations.
                                                              (line  30)
* < ( N1 N2 -- F ) core:                 Numeric comparison.  (line   9)
* <# ( -- ) core:                        Formatted numeric output.
                                                              (line  42)
* << ( RUN-ADDR ADDR U -- RUN-ADDR ) regexp-replace: Regular Expressions.
                                                              (line 172)
* <<" ( "STRING<">" -- ) regexp-replace: Regular Expressions. (line 175)
* <<# ( -- ) gforth-0.5:                 Formatted numeric output.
                                                              (line  45)
* <= ( N1 N2 -- F ) gforth-0.2:          Numeric comparison.  (line  11)
* <> ( N1 N2 -- F ) core-ext:            Numeric comparison.  (line  13)
* <bind> ( CLASS SELECTOR-XT -- XT ) objects: Objects Glossary.
                                                              (line   9)
* <to-inst> ( W XT -- ) objects:         Objects Glossary.    (line 148)
* <{: ( -- HMADDR U LATEST LATESTNT WID 0 ) gforth-experimental: Closures.
                                                              (line  90)
* = ( N1 N2 -- F ) core:                 Numeric comparison.  (line  15)
* =mkdir ( C-ADDR U WMODE -- WIOR ) gforth-0.7: Directories.  (line  51)
* > ( N1 N2 -- F ) core:                 Numeric comparison.  (line  17)
* >= ( N1 N2 -- F ) gforth-0.2:          Numeric comparison.  (line  19)
* >> ( ADDR -- ADDR ) regexp-replace:    Regular Expressions. (line 168)
* >addr ( XT -- ADDR ) gforth-experimental: Closures.         (line  46)
* >animate ( RDELTA ADDR XT -- ) minos2: widget methods.      (line 120)
* >body ( XT -- A_ADDR ) core:           CREATE..DOES> details.
                                                              (line  75)
* >code-address ( XT -- C_ADDR ) gforth-0.2: Threading Words. (line  73)
* >compile ( TRANSLATOR -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line 110)
* >definer ( XT -- DEFINER ) gforth-0.2: Threading Words.     (line 134)
* >does-code ( XT1 -- XT2 ) gforth-0.2:  Threading Words.     (line 116)
* >float ( C-ADDR U -- F:... FLAG ) floating: Line input and conversion.
                                                              (line  43)
* >float1 ( C-ADDR U C -- F:... FLAG ) gforth-1.0: Line input and conversion.
                                                              (line  51)
* >in ( -- ADDR ) core:                  The Text Interpreter.
                                                              (line 121)
* >interpret ( TRANSLATOR -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line 107)
* >l ( W -- ) gforth-0.2:                Locals implementation.
                                                              (line  24)
* >name ( XT -- NT|0 ) gforth-0.2:       Name token.          (line  35)
* >number ( UD1 C-ADDR1 U1 -- UD2 C-ADDR2 U2 ) core: Line input and conversion.
                                                              (line  30)
* >o ( C-ADDR -- R:C-OLD ) new:          Mini-OOF2.           (line  12)
* >order ( WID -- ) gforth-0.5:          Word Lists.          (line  70)
* >postpone ( TRANSLATOR -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line 113)
* >pow2 ( U1 -- U2 ) gforth-1.0:         Bitwise operations.  (line  55)
* >r ( W -- R:W ) core:                  Return stack.        (line  13)
* >string-execute ( ... XT -- ... ADDR U ) gforth-1.0: String words.
                                                              (line  88)
* >time&date&tz ( UDTIME -- NSEC NMIN NHOUR NDAY NMONTH NYEAR FDST NDSTOFF C-ADDRTZ UTZ ) gforth-1.0: Keeping track of Time.
                                                              (line  14)
* ? ( A-ADDR -- ) tools:                 Examining data.      (line  54)
* ?!@ ( UNEW UOLD A-ADDR -- UPREV ) gforth-experimental: Hardware operations for multi-tasking.
                                                              (line  20)
* ??? ( -- ) gforth-0.2:                 Debugging.           (line  56)
* ?cov+ ( FLAG -- FLAG ) gforth-experimental: Code Coverage.  (line  29)
* ?DO ( COMPILATION -- DO-SYS ; RUN-TIME W1 W2 -- | LOOP-SYS ) core-ext: Counted Loops.
                                                              (line 177)
* ?dup ( W -- S:... W ) core:            Data stack.          (line  29)
* ?DUP-0=-IF ( COMPILATION -- ORIG ; RUN-TIME N -- N| ) gforth-0.2: Arbitrary control structures.
                                                              (line  83)
* ?dup-IF ( COMPILATION -- ORIG ; RUN-TIME N -- N| ) gforth-0.2: Arbitrary control structures.
                                                              (line  78)
* ?events ( -- ) gforth-experimental:    Message queues.      (line  21)
* ?EXIT ( -- ) gforth-0.2:               Calls and returns.   (line  50)
* ?inside ( RX RY -- ACT / 0 ) minos2:   actor methods.       (line  33)
* ?LEAVE ( COMPILATION -- ; RUN-TIME F | F LOOP-SYS -- ) gforth-0.2: Counted Loops.
                                                              (line 254)
* ?of ( COMPILATION -- OF-SYS ; RUN-TIME F -- ) gforth-1.0: Arbitrary control structures.
                                                              (line 104)
* @ ( A-ADDR -- W ) core:                Memory Access.       (line   6)
* @localn ( NOFFSET -- W ) gforth-internal: Locals implementation.
                                                              (line  14)
* [ ( -- ) core:                         Literals.            (line  36)
* ['] ( COMPILATION. "NAME" -- ; RUN-TIME. -- XT ) core: Execution token.
                                                              (line  28)
* [+LOOP] ( N -- ) gforth-0.2:           Interpreter Directives.
                                                              (line  66)
* [: ( COMPILE-TIME: -- QUOTATION-SYS FLAG COLON-SYS ) gforth-1.0: Quotations.
                                                              (line  27)
* [?DO] ( N-LIMIT N-INDEX -- ) gforth-0.2: Interpreter Directives.
                                                              (line  60)
* [AGAIN] ( -- ) gforth-0.2:             Interpreter Directives.
                                                              (line  86)
* [BEGIN] ( -- ) gforth-0.2:             Interpreter Directives.
                                                              (line  82)
* [bind] ( COMPILE-TIME: "CLASS" "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... ) objects: Objects Glossary.
                                                              (line  15)
* [char] ( COMPILATION '<SPACES>CCC' -- ; RUN-TIME -- C ) core,xchar-ext: String and character literals.
                                                              (line  49)
* [COMP'] ( COMPILATION "NAME" -- ; RUN-TIME -- W XT ) gforth-0.2: Compilation token.
                                                              (line  23)
* [compile] ( COMPILATION "NAME" -- ; RUN-TIME ? -- ? ) core-ext: Macros.
                                                              (line 202)
* [current] ( COMPILE-TIME: "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... ) objects: Objects Glossary.
                                                              (line  48)
* [defined] ( "<SPACES>NAME" -- FLAG ) tools-ext: Interpreter Directives.
                                                              (line  44)
* [DO] ( N-LIMIT N-INDEX -- ) gforth-0.2: Interpreter Directives.
                                                              (line  62)
* [ELSE] ( -- ) tools-ext:               Interpreter Directives.
                                                              (line  28)
* [ENDIF] ( -- ) gforth-0.2:             Interpreter Directives.
                                                              (line  41)
* [FOR] ( N -- ) gforth-0.2:             Interpreter Directives.
                                                              (line  68)
* [IFDEF] ( "<SPACES>NAME" -- ) gforth-0.2: Interpreter Directives.
                                                              (line  50)
* [IFUNDEF] ( "<SPACES>NAME" -- ) gforth-0.2: Interpreter Directives.
                                                              (line  55)
* [IF] ( FLAG -- ) tools-ext:            Interpreter Directives.
                                                              (line  20)
* [I] ( RUN-TIME -- N ) gforth-0.2:      Interpreter Directives.
                                                              (line  72)
* [LOOP] ( -- ) gforth-0.2:              Interpreter Directives.
                                                              (line  64)
* [NEXT] ( N -- ) gforth-0.2:            Interpreter Directives.
                                                              (line  70)
* [parent] ( COMPILE-TIME: "SELECTOR" -- ; RUN-TIME: ... OBJECT -- ... ) objects: Objects Glossary.
                                                              (line 126)
* [REPEAT] ( -- ) gforth-0.2:            Interpreter Directives.
                                                              (line  90)
* [THEN] ( -- ) tools-ext:               Interpreter Directives.
                                                              (line  37)
* [to-inst] ( COMPILE-TIME: "NAME" -- ; RUN-TIME: W -- ) objects: Objects Glossary.
                                                              (line 151)
* [undefined] ( "<SPACES>NAME" -- FLAG ) tools-ext: Interpreter Directives.
                                                              (line  47)
* [UNTIL] ( FLAG -- ) gforth-0.2:        Interpreter Directives.
                                                              (line  84)
* [WHILE] ( FLAG -- ) gforth-0.2:        Interpreter Directives.
                                                              (line  88)
* [{: ( -- HMADDR U LATEST LATESTNT WID 0 ) gforth-experimental: Closures.
                                                              (line  14)
* \ ( COMPILATION 'CCC<NEWLINE>' -- ; RUN-TIME -- ) core-ext,block-ext: Comments.
                                                              (line  16)
* \$ ( ADDR -- ADDR ) regexp-pattern:    Regular Expressions. (line  99)
* \( ( ADDR -- ADDR ) regexp-pattern:    Regular Expressions. (line 154)
* \) ( ADDR -- ADDR ) regexp-pattern:    Regular Expressions. (line 157)
* \0 ( -- ADDR U ) regexp-pattern:       Regular Expressions. (line 160)
* \c ( "REST-OF-LINE" -- ) gforth-0.7:   Declaring C Functions.
                                                              (line  76)
* \d ( ADDR -- ADDR' ) regexp-pattern:   Regular Expressions. (line  70)
* \G ( COMPILATION 'CCC<NEWLINE>' -- ; RUN-TIME -- ) gforth-0.2: Comments.
                                                              (line  22)
* \s ( ADDR -- ADDR' ) regexp-pattern:   Regular Expressions. (line  73)
* \\\ ( -- ) gforth-1.0:                 Forth source files.  (line  61)
* \^ ( ADDR -- ADDR ) regexp-pattern:    Regular Expressions. (line  96)
* ] ( -- ) core:                         Literals.            (line  39)
* ]L ( COMPILATION: N -- ; RUN-TIME: -- N ) gforth-0.5: Literals.
                                                              (line  51)
* ]nocov ( -- ) gforth-1.0:              Code Coverage.       (line  20)
* ]] ( -- ) gforth-0.6:                  Macros.              (line  46)
* ` ( "CHAR" -- ) regexp-pattern:        Regular Expressions. (line  85)
* `? ( "CHAR" -- ) regexp-pattern:       Regular Expressions. (line  88)
* { ( -- HMADDR U LATEST LATESTNT WID 0 ) gforth-0.2: Locals definition words.
                                                              (line  26)
* {* ( ADDR -- ADDR ADDR ) regexp-pattern: Regular Expressions.
                                                              (line 122)
* {** ( ADDR -- ADDR ADDR ) regexp-pattern: Regular Expressions.
                                                              (line 110)
* {+ ( ADDR -- ADDR ADDR ) regexp-pattern: Regular Expressions.
                                                              (line 128)
* {++ ( ADDR -- ADDR ADDR ) regexp-pattern: Regular Expressions.
                                                              (line 116)
* {: ( -- HMADDR U LATEST LATESTNT WID 0 ) local-ext: Locals definition words.
                                                              (line  11)
* {{ ( ADDR -- ADDR ADDR ) regexp-pattern: Regular Expressions.
                                                              (line 142)
* | ( -- ) gforth-1.0:                   Locals definition words.
                                                              (line  19)
* || ( ADDR ADDR -- ADDR ADDR ) regexp-pattern: Regular Expressions.
                                                              (line 145)
* } ( HMADDR U LATEST LATESTNT WID 0 XT1 ... XTN -- ) gforth-0.2: Locals definition words.
                                                              (line  30)
* }} ( ADDR ADDR -- ADDR ) regexp-pattern: Regular Expressions.
                                                              (line 148)
* ~~ ( -- ) gforth-0.2:                  Debugging.           (line  28)
* ~~1bt ( -- ) gforth-1.0:               Debugging.           (line  53)
* ~~bt ( -- ) gforth-1.0:                Debugging.           (line  50)
* ~~Value ( N "NAME" -- ) gforth-1.0:    Debugging.           (line  71)
* ~~Variable ( "NAME" -- ) gforth-1.0:   Debugging.           (line  68)
* A, ( ADDR -- ) gforth-0.2:             Dictionary allocation.
                                                              (line  63)
* abi-code ( "NAME" -- COLON-SYS ) gforth-1.0: Assembler Definitions.
                                                              (line  39)
* abort ( ?? -- ?? ) core,exception-ext: Exception Handling.  (line 247)
* ABORT" ( COMPILATION 'CCC"' -- ; RUN-TIME F -- ) core,exception-ext: Exception Handling.
                                                              (line 242)
* abs ( N -- U ) core:                   Single precision.    (line  29)
* absolute-file? ( ADDR U -- FLAG ) gforth-1.0: Search Paths. (line  31)
* accept ( C-ADDR +N1 -- +N2 ) core:     Line input and conversion.
                                                              (line  11)
* AConstant ( ADDR "NAME" -- ) gforth-0.2: Constants.         (line  29)
* act ( -- OPTR ) minos2:                widget methods.      (line   9)
* act-name$ ( -- ADDR U ) minos2:        actor methods.       (line  12)
* action-of ( INTERPRETATION "NAME" -- XT; COMPILATION "NAME" -- ; RUN-TIME -- XT ) core-ext: Deferred Words.
                                                              (line  91)
* activate ( RUN-TIME NEST-SYS1 TASK -- ) gforth-experimental: Basic multi-tasking.
                                                              (line  46)
* active-w ( -- OPTR ) minos2:           actor methods.       (line   9)
* actor ( -- CLASS ) minos2:             MINOS2 object framework.
                                                              (line  14)
* add-cflags ( C-ADDR U -- ) gforth-1.0: Declaring OS-level libraries.
                                                              (line  48)
* add-framework ( C-ADDR U -- ) gforth-1.0: Declaring OS-level libraries.
                                                              (line  41)
* add-incdir ( C-ADDR U -- ) gforth-1.0: Declaring OS-level libraries.
                                                              (line  45)
* add-ldflags ( C-ADDR U -- ) gforth-1.0: Declaring OS-level libraries.
                                                              (line  51)
* add-lib ( C-ADDR U -- ) gforth-0.7:    Declaring OS-level libraries.
                                                              (line  33)
* add-libpath ( C-ADDR U -- ) gforth-0.7: Declaring OS-level libraries.
                                                              (line  37)
* addr ( "NAME" -- ADDR ) gforth-1.0:    Varues.              (line  23)
* ADDRESS-UNIT-BITS ( -- N ) environment: Environmental Queries.
                                                              (line  25)
* adjust-buffer ( U ADDR -- ) gforth-experimental: Heap Allocation.
                                                              (line  64)
* after-locate ( -- U ) gforth-1.0:      Locating source code definitions.
                                                              (line  59)
* AGAIN ( COMPILATION DEST -- ; RUN-TIME -- ) core-ext: Arbitrary control structures.
                                                              (line  37)
* AHEAD ( COMPILATION -- ORIG ; RUN-TIME -- ) tools-ext: Arbitrary control structures.
                                                              (line  21)
* Alias ( XT "NAME" -- ) gforth-0.2:     Aliases.             (line  27)
* align ( -- ) core:                     Dictionary allocation.
                                                              (line  82)
* aligned ( C-ADDR -- A-ADDR ) core:     Address arithmetic.  (line  64)
* ALiteral ( COMPILATION ADDR -- ; RUN-TIME -- ADDR ) gforth-0.2: Literals.
                                                              (line  47)
* allocate ( U -- A_ADDR WIOR ) memory:  Heap Allocation.     (line  16)
* allot ( N -- ) core:                   Dictionary allocation.
                                                              (line  31)
* also ( -- ) search-ext:                Word Lists.          (line  76)
* also-path ( C-ADDR LEN PATH-ADDR -- ) gforth-0.4: General Search Paths.
                                                              (line  26)
* and ( W1 W2 -- W ) core:               Bitwise operations.  (line   6)
* annotate-cov ( -- ) gforth-experimental: Code Coverage.     (line  39)
* append ( C-ADDR1 U1 C-ADDR2 U2 -- C-ADDR U ) gforth-0.7: String words.
                                                              (line  83)
* arg ( U -- ADDR COUNT ) gforth-0.2:    OS command line arguments.
                                                              (line  41)
* argc ( -- ADDR ) gforth-0.2:           OS command line arguments.
                                                              (line  55)
* argv ( -- ADDR ) gforth-0.2:           OS command line arguments.
                                                              (line  59)
* arshift ( N1 U -- N2 ) gforth-1.0:     Bitwise operations.  (line  26)
* asptr ( CLASS -- ) oof:                Class Declaration.   (line  16)
* assembler ( -- ) tools-ext:            Assembler Definitions.
                                                              (line  32)
* assert( ( -- ) gforth-0.2:             Assertions.          (line  43)
* assert-level ( -- A-ADDR ) gforth-0.2: Assertions.          (line  62)
* assert0( ( -- ) gforth-0.2:            Assertions.          (line  30)
* assert1( ( -- ) gforth-0.2:            Assertions.          (line  33)
* assert2( ( -- ) gforth-0.2:            Assertions.          (line  36)
* assert3( ( -- ) gforth-0.2:            Assertions.          (line  39)
* ASSUME-LIVE ( ORIG -- ORIG ) gforth-0.2: Where are locals visible by name?.
                                                              (line 141)
* at-deltaxy ( DX DY -- ) gforth-0.7:    Terminal output.     (line  13)
* at-xy ( X Y -- ) facility:             Terminal output.     (line   9)
* AUser ( "NAME" -- ) gforth-0.2:        Task-local data.     (line  17)
* authors ( -- ) gforth-1.0:             Help on Gforth.      (line  19)
* AValue ( W "NAME" -- ) gforth-0.6:     Values.              (line  23)
* AVariable ( "NAME" -- ) gforth-0.2:    Variables.           (line  35)
* b ( -- ) gforth-1.0:                   Locating source code definitions.
                                                              (line  45)
* barrier ( -- ) gforth-experimental:    Hardware operations for multi-tasking.
                                                              (line  29)
* base ( -- A-ADDR ) core:               Number Conversion.   (line  23)
* base-execute ( I*X XT U -- J*X ) gforth-0.7: Number Conversion.
                                                              (line  19)
* baseline ( -- R ) minos2:              widget methods.      (line  33)
* basename ( C-ADDR1 U1 -- C-ADDR2 U2 ) gforth-0.7: Directories.
                                                              (line   8)
* before-line ( -- ) gforth-1.0:         Text Interpreter Hooks.
                                                              (line   6)
* before-locate ( -- U ) gforth-1.0:     Locating source code definitions.
                                                              (line  56)
* before-word ( -- ) gforth-0.7:         Text Interpreter Hooks.
                                                              (line   9)
* BEGIN ( COMPILATION -- DEST ; RUN-TIME -- ) core: Arbitrary control structures.
                                                              (line  29)
* begin-structure ( "NAME" -- STRUCT-SYS 0 ) facility-ext: Forth200x Structures.
                                                              (line  40)
* bin ( FAM1 -- FAM2 ) file:             General files.       (line  15)
* bind ( ... "CLASS" "SELECTOR" -- ... ) objects: Objects Glossary.
                                                              (line   6)
* bind' ( "CLASS" "SELECTOR" -- XT ) objects: Objects Glossary.
                                                              (line  12)
* bl ( -- C-CHAR ) core:                 String and character literals.
                                                              (line  76)
* blank ( C-ADDR U -- ) string:          Memory Blocks.       (line  40)
* blk ( -- ADDR ) block:                 Input Sources.       (line  23)
* block ( U -- A-ADDR ) block:           Blocks.              (line 146)
* block-included ( A-ADDR U -- ) gforth-0.2: Blocks.          (line 205)
* block-offset ( -- ADDR ) gforth-0.5:   Blocks.              (line 125)
* block-position ( U -- ) block:         Blocks.              (line 135)
* bootmessage ( -- ) gforth-0.4:         Modifying the Startup Sequence.
                                                              (line  52)
* border ( -- R ) minos2:                widget methods.      (line  42)
* borderl ( -- R ) minos2:               widget methods.      (line  51)
* bordert ( -- R ) minos2:               widget methods.      (line  48)
* borderv ( -- R ) minos2:               widget methods.      (line  45)
* bounds ( U1 U2 -- U3 U1 ) gforth-0.2:  Counted Loops.       (line 186)
* break" ( 'CCC"' -- ) gforth-0.4:       Singlestep Debugger. (line  69)
* break: ( -- ) gforth-0.4:              Singlestep Debugger. (line  67)
* broken-pipe-error ( -- N ) gforth-0.6: Pipes.               (line  21)
* browse ( "SUBNAME" -- ) gforth-1.0:    Locating source code definitions.
                                                              (line  70)
* bt ( -- ) gforth-1.0:                  Locating exception source.
                                                              (line  10)
* buffer ( U -- A-ADDR ) block:          Blocks.              (line 153)
* buffer% ( U1 U2 -- ) gforth-experimental: Heap Allocation.  (line  59)
* buffer: ( U "NAME" -- ) core-ext:      Variables.           (line  45)
* bw ( -- ) gforth-1.0:                  Locating uses of a word.
                                                              (line  20)
* bw-cover ( -- ) gforth-1.0:            Code Coverage.       (line  56)
* c! ( C C-ADDR -- ) core:               Memory Access.       (line  18)
* C" ( COMPILATION "CCC<QUOTE>" -- ; RUN-TIME -- C-ADDR ) core-ext: Counted string words.
                                                              (line  21)
* c$+! ( CHAR $ADDR -- ) gforth-1.0:     $tring words.        (line  51)
* c, ( C -- ) core:                      Dictionary allocation.
                                                              (line  41)
* c-callback ( "FORTH-NAME" "{TYPE}" "---" "TYPE" -- ) gforth-1.0: Callbacks.
                                                              (line  16)
* c-callback-thread ( "FORTH-NAME" "{TYPE}" "---" "TYPE" -- ) gforth-1.0: Callbacks.
                                                              (line  21)
* c-function ( "FORTH-NAME" "C-NAME" "{TYPE}" "---" "TYPE" -- ) gforth-0.7: Declaring C Functions.
                                                              (line  79)
* c-funptr ( "FORTH-NAME" <{>"C-TYPECAST"<}> "{TYPE}" "---" "TYPE" -- ) gforth-1.0: Calling C function pointers.
                                                              (line  11)
* c-library ( "NAME" -- ) gforth-0.7:    Defining library interfaces.
                                                              (line  51)
* c-library-name ( C-ADDR U -- ) gforth-0.7: Defining library interfaces.
                                                              (line  48)
* c-value ( "FORTH-NAME" "C-NAME" "---" "TYPE" -- ) gforth-1.0: Declaring C Functions.
                                                              (line  83)
* c-variable ( "FORTH-NAME" "C-NAME" -- ) gforth-1.0: Declaring C Functions.
                                                              (line  87)
* C: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME C -- ) gforth-0.2: Locals definition words.
                                                              (line  52)
* c>s ( X -- N ) gforth-1.0:             Special Memory Accesses.
                                                              (line 100)
* c? ( ADDR CLASS -- ) regexp-pattern:   Regular Expressions. (line  64)
* c@ ( C-ADDR -- C ) core:               Memory Access.       (line  15)
* CA: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME C -- ) gforth-1.0: Locals definition words.
                                                              (line  55)
* call-c ( ... W -- ... ) gforth-0.2:    Low-Level C Interface Words.
                                                              (line  13)
* caller-w ( -- OPTR ) minos2:           actor methods.       (line   6)
* capscompare ( C-ADDR1 U1 C-ADDR2 U2 -- N ) gforth-0.7: String words.
                                                              (line  62)
* capssearch ( C-ADDR1 U1 C-ADDR2 U2 -- C-ADDR3 U3 FLAG ) gforth-1.0: String words.
                                                              (line  73)
* capsstring-prefix? ( C-ADDR1 U1 C-ADDR2 U2 -- F ) gforth-1.0: String words.
                                                              (line  69)
* case ( COMPILATION -- CASE-SYS ; RUN-TIME -- ) core-ext: Arbitrary control structures.
                                                              (line  87)
* catch ( X1 .. XN XT -- Y1 .. YM 0 / Z1 .. ZN ERROR ) exception: Exception Handling.
                                                              (line  83)
* cell ( -- U ) gforth-0.2:              Address arithmetic.  (line  61)
* cell% ( -- ALIGN SIZE ) gforth-0.4:    Structure Glossary.  (line  24)
* cell+ ( A-ADDR1 -- A-ADDR2 ) core:     Address arithmetic.  (line  52)
* cell- ( A-ADDR1 -- A-ADDR2 ) core:     Address arithmetic.  (line  55)
* cell/ ( N1 -- N2 ) gforth-1.0:         Address arithmetic.  (line  58)
* cells ( N1 -- N2 ) core:               Address arithmetic.  (line  49)
* cfalign ( -- ) gforth-0.2:             Dictionary allocation.
                                                              (line 101)
* cfaligned ( ADDR1 -- ADDR2 ) gforth-0.2: Address arithmetic.
                                                              (line 113)
* cfield: ( U1 "NAME" -- U2 ) facility-ext: Forth200x Structures.
                                                              (line  53)
* char ( '<SPACES>CCC' -- C ) core,xchar-ext: String and character literals.
                                                              (line  45)
* char% ( -- ALIGN SIZE ) gforth-0.4:    Structure Glossary.  (line  26)
* char+ ( C-ADDR1 -- C-ADDR2 ) core:     Address arithmetic.  (line  44)
* char- ( C-ADDR1 -- C-ADDR2 ) gforth-0.7: Address arithmetic.
                                                              (line  47)
* charclass ( -- ) regexp-cg:            Regular Expressions. (line  39)
* chars ( N1 -- N2 ) core:               Address arithmetic.  (line  41)
* cilk-bye ( -- ) cilk:                  Cilk.                (line  49)
* cilk-init ( -- ) cilk:                 Cilk.                (line  31)
* cilk-sync ( -- ) cilk:                 Cilk.                (line  46)
* class ( CLASS -- CLASS SELECTORS VARS ) mini-oof: Basic Mini-OOF Usage.
                                                              (line  20)
* class ( PARENT-CLASS -- ALIGN OFFSET ) objects: Objects Glossary.
                                                              (line  18)
* class->map ( CLASS -- MAP ) objects:   Objects Glossary.    (line  22)
* class-inst-size ( CLASS -- ADDR ) objects: Objects Glossary.
                                                              (line  27)
* class-override! ( XT SEL-XT CLASS-MAP -- ) objects: Objects Glossary.
                                                              (line  31)
* class-previous ( CLASS -- ) objects:   Objects Glossary.    (line  34)
* class; ( -- ) oof:                     Class Declaration.   (line  42)
* class>order ( CLASS -- ) objects:      Objects Glossary.    (line  38)
* clear-libs ( -- ) gforth-0.7:          Declaring OS-level libraries.
                                                              (line  30)
* clear-path ( PATH-ADDR -- ) gforth-0.5: General Search Paths.
                                                              (line  23)
* clearstack ( ... -- ) gforth-0.2:      Examining data.      (line  43)
* clearstacks ( ... -- ) gforth-0.7:     Examining data.      (line  49)
* clicked ( RX RY BMASK N -- ) minos2:   actor methods.       (line  15)
* close-dir ( WDIRID -- WIOR ) gforth-0.5: Directories.       (line  35)
* close-file ( WFILEID -- WIOR ) file:   General files.       (line  29)
* close-pipe ( WFILEID -- WRETVAL WIOR ) gforth-0.2: Pipes.   (line  12)
* cmove ( C-FROM C-TO U -- ) string:     Memory Blocks.       (line  24)
* cmove> ( C-FROM C-TO U -- ) string:    Memory Blocks.       (line  29)
* code ( "NAME" -- COLON-SYS ) tools-ext: Assembler Definitions.
                                                              (line  63)
* code-address! ( C_ADDR XT -- ) gforth-obsolete: Threading Words.
                                                              (line  76)
* color-cover ( -- ) gforth-1.0:         Code Coverage.       (line  59)
* color: ( RGBA "NAME" -- ) minos2:      widget methods.      (line 128)
* common-list ( LIST1 LIST2 -- LIST3 ) gforth-internal: Locals implementation.
                                                              (line  94)
* COMP' ( "NAME" -- W XT ) gforth-0.2:   Compilation token.   (line  26)
* compare ( C-ADDR1 U1 C-ADDR2 U2 -- N ) string: Memory Blocks.
                                                              (line  51)
* compile, ( XT -- ) core-ext:           Macros.              (line 157)
* compile-lp+! ( N -- ) gforth-0.2:      Locals implementation.
                                                              (line  34)
* compile-only ( -- ) gforth-0.2:        Interpretation and Compilation Semantics.
                                                              (line  52)
* compile-only? ( NT -- FLAG ) gforth-1.0: Header fields.     (line  49)
* const-does> ( RUN-TIME: W*UW R*UR UW UR "NAME" -- ) gforth-obsolete: Const-does>.
                                                              (line   9)
* Constant ( W "NAME" -- ) core:         Constants.           (line  24)
* construct ( ... OBJECT -- ) objects:   Objects Glossary.    (line  41)
* context ( -- ADDR ) gforth-0.2:        Word Lists.          (line 160)
* contof ( COMPILATION CASE-SYS1 OF-SYS -- CASE-SYS2 ; RUN-TIME -- ) gforth-1.0: Arbitrary control structures.
                                                              (line 111)
* convert ( UD1 C-ADDR1 -- UD2 C-ADDR2 ) core-ext-obsolescent: Line input and conversion.
                                                              (line  61)
* CORE ( -- F ) environment:             Environmental Queries.
                                                              (line  40)
* CORE-EXT ( -- F ) environment:         Environmental Queries.
                                                              (line  44)
* cores ( -- U ) cilk:                   Cilk.                (line  25)
* count ( C-ADDR1 -- C-ADDR2 U ) core:   Counted string words.
                                                              (line  13)
* Country ( <LANG> "NAME" -- ) gforth-experimental: i18n and l10n.
                                                              (line  40)
* cov% ( -- ) gforth-experimental:       Code Coverage.       (line  45)
* cov+ ( -- ) gforth-experimental:       Code Coverage.       (line  26)
* coverage? ( -- F ) gforth-internal:    Code Coverage.       (line  23)
* cputime ( -- DUSER DSYSTEM ) gforth-0.5: Keeping track of Time.
                                                              (line  26)
* cr ( -- ) core:                        Miscellaneous output.
                                                              (line   6)
* Create ( "NAME" -- ) core:             CREATE.              (line  19)
* create-file ( C-ADDR U WFAM -- WFILEID WIOR ) file: General files.
                                                              (line  27)
* create-from ( NT "NAME" -- ) gforth-1.0: Creating from a prototype.
                                                              (line  28)
* critical-section ( XT SEMAPHORE -- ) gforth-experimental: Semaphores.
                                                              (line  30)
* CS-DROP ( DEST -- ) gforth-1.0:        Arbitrary control structures.
                                                              (line  45)
* CS-PICK ( ORIG0/DEST0 ORIG1/DEST1 ... ORIGU/DESTU U -- ... ORIG0/DEST0 ) tools-ext: Arbitrary control structures.
                                                              (line  41)
* CS-ROLL ( DESTU/ORIGU .. DEST0/ORIG0 U -- .. DEST0/ORIG0 DESTU/ORIGU ) tools-ext: Arbitrary control structures.
                                                              (line  43)
* cs-vocabulary ( "NAME" -- ) gforth-1.0: Word Lists.         (line  67)
* cs-wordlist ( -- WID ) gforth-1.0:     Word Lists.          (line  64)
* cstring>sstring ( C-ADDR -- C-ADDR U ) gforth-0.2: String words.
                                                              (line  54)
* ctz ( X -- U ) gforth-1.0:             Bitwise operations.  (line  66)
* current ( -- ADDR ) gforth-0.2:        Word Lists.          (line 157)
* current' ( "SELECTOR" -- XT ) objects: Objects Glossary.    (line  45)
* current-interface ( -- ADDR ) objects: Objects Glossary.    (line  51)
* C^ ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME C -- ) gforth-0.2: Locals definition words.
                                                              (line  58)
* d ( -- R ) minos2:                     widget methods.      (line  27)
* d+ ( UD1 UD2 -- UD ) double:           Double precision.    (line  25)
* d- ( D1 D2 -- D ) double:              Double precision.    (line  27)
* d. ( D -- ) double:                    Simple numeric output.
                                                              (line  43)
* d.r ( D N -- ) double:                 Simple numeric output.
                                                              (line  51)
* d0< ( D -- F ) double:                 Numeric comparison.  (line  62)
* d0<= ( D -- F ) gforth-0.2:            Numeric comparison.  (line  64)
* d0<> ( D -- F ) gforth-0.2:            Numeric comparison.  (line  66)
* d0= ( D -- F ) double:                 Numeric comparison.  (line  68)
* d0> ( D -- F ) gforth-0.2:             Numeric comparison.  (line  70)
* d0>= ( D -- F ) gforth-0.2:            Numeric comparison.  (line  72)
* d2* ( D1 -- D2 ) double:               Bitwise operations.  (line  48)
* d2/ ( D1 -- D2 ) double:               Bitwise operations.  (line  51)
* D: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME X1 X2 -- ) gforth-0.2: Locals definition words.
                                                              (line  43)
* d< ( D1 D2 -- F ) double:              Numeric comparison.  (line  50)
* d<= ( D1 D2 -- F ) gforth-0.2:         Numeric comparison.  (line  52)
* d<> ( D1 D2 -- F ) gforth-0.2:         Numeric comparison.  (line  54)
* d= ( D1 D2 -- F ) double:              Numeric comparison.  (line  56)
* d> ( D1 D2 -- F ) gforth-0.2:          Numeric comparison.  (line  58)
* d>= ( D1 D2 -- F ) gforth-0.2:         Numeric comparison.  (line  60)
* d>f ( D -- R ) floating:               Floating Point.      (line  26)
* d>s ( D -- N ) double:                 Double precision.    (line  23)
* DA: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME X1 X2 -- ) gforth-1.0: Locals definition words.
                                                              (line  46)
* dabs ( D -- UD ) double:               Double precision.    (line  31)
* dark-mode ( -- ) gforth-1.0:           Terminal output.     (line  72)
* darshift ( D1 U -- D2 ) gforth-1.0:    Bitwise operations.  (line  37)
* dbg ( "NAME" -- ) gforth-0.2:          Singlestep Debugger. (line  65)
* debug-fid ( -- FILE-ID ) gforth-1.0:   Debugging.           (line  39)
* dec. ( N -- ) gforth-0.2:              Simple numeric output.
                                                              (line  14)
* dec.r ( U N -- ) gforth-0.5:           Simple numeric output.
                                                              (line  40)
* decimal ( -- ) core:                   Number Conversion.   (line  32)
* default-color ( -- ) gforth-1.0:       Terminal output.     (line  36)
* default-w: ( -- ) gforth-experimental: Gforth locals.       (line  86)
* default-wa: ( -- ) gforth-experimental: Gforth locals.      (line  82)
* Defer ( "NAME" -- ) core-ext:          Deferred Words.      (line  77)
* defer ( -- ) oof:                      Class Declaration.   (line  21)
* defer! ( XT XT-DEFERRED -- ) core-ext: Deferred Words.      (line  81)
* defer@ ( XT-DEFERRED -- XT ) core-ext: Deferred Words.      (line  87)
* defers ( COMPILATION "NAME" -- ; RUN-TIME ... -- ... ) gforth-0.2: Deferred Words.
                                                              (line  97)
* definer! ( DEFINER XT -- ) gforth-obsolete: Threading Words.
                                                              (line 139)
* defines ( XT CLASS "NAME" -- ) mini-oof: Basic Mini-OOF Usage.
                                                              (line  26)
* definitions ( -- ) search:             Word Lists.          (line  34)
* defocus ( -- ) minos2:                 actor methods.       (line  39)
* delete ( BUFFER SIZE U -- ) gforth-0.7: Memory Blocks.      (line  47)
* delete-file ( C-ADDR U -- WIOR ) file: General files.       (line  31)
* delta-i ( R:ULIMIT R:U -- R:ULIMIT R:U U2 ) gforth-1.0: Counted Loops.
                                                              (line 248)
* depth ( -- +N ) core:                  Examining data.      (line  35)
* df! ( R DF-ADDR -- ) floating-ext:     Memory Access.       (line  46)
* df@ ( DF-ADDR -- R ) floating-ext:     Memory Access.       (line  42)
* dfalign ( -- ) floating-ext:           Dictionary allocation.
                                                              (line  94)
* dfaligned ( C-ADDR -- DF-ADDR ) floating-ext: Address arithmetic.
                                                              (line 105)
* dffield: ( U1 "NAME" -- U2 ) floating-ext: Forth200x Structures.
                                                              (line  68)
* dfloat% ( -- ALIGN SIZE ) gforth-0.4:  Structure Glossary.  (line  28)
* dfloat+ ( DF-ADDR1 -- DF-ADDR2 ) floating-ext: Address arithmetic.
                                                              (line 100)
* dfloat/ ( N1 -- N2 ) gforth-1.0:       Address arithmetic.  (line 103)
* dfloats ( N1 -- N2 ) floating-ext:     Address arithmetic.  (line  96)
* dglue ( -- RTYP RSUB RADD ) minos2:    widget methods.      (line  72)
* dglue@ ( -- RTYP RSUB RADD ) minos2:   widget methods.      (line  81)
* dict-new ( ... CLASS -- OBJECT ) objects: Objects Glossary. (line  54)
* dirname ( C-ADDR1 U1 -- C-ADDR1 U2 ) gforth-0.7: Directories.
                                                              (line  12)
* discode ( ADDR U -- ) gforth-0.2:      Common Disassembler. (line   9)
* dispose-widget ( -- ) minos2:          widget methods.      (line  99)
* dlshift ( UD1 U -- UD2 ) gforth-1.0:   Bitwise operations.  (line  30)
* dmax ( D1 D2 -- D ) double:            Double precision.    (line  35)
* dmin ( D1 D2 -- D ) double:            Double precision.    (line  33)
* dnegate ( D1 -- D2 ) double:           Double precision.    (line  29)
* DO ( COMPILATION -- DO-SYS ; RUN-TIME W1 W2 -- LOOP-SYS ) core: Counted Loops.
                                                              (line 218)
* doabicode, ( -- ) gforth-1.0:          Threading Words.     (line  53)
* doabicode: ( -- ADDR ) gforth-1.0:     Threading Words.     (line 106)
* docol, ( -- ) gforth-1.0:              Threading Words.     (line  32)
* docol: ( -- ADDR ) gforth-0.2:         Threading Words.     (line  82)
* docon, ( -- ) gforth-1.0:              Threading Words.     (line  35)
* docon: ( -- ADDR ) gforth-0.2:         Threading Words.     (line  85)
* dodefer, ( -- ) gforth-1.0:            Threading Words.     (line  44)
* dodefer: ( -- ADDR ) gforth-0.2:       Threading Words.     (line  94)
* dodoes: ( -- ADDR ) gforth-0.6:        Threading Words.     (line 103)
* does-code! ( XT2 XT1 -- ) gforth-0.2:  Threading Words.     (line 126)
* DOES> ( COMPILATION COLON-SYS1 -- COLON-SYS2 ) core: CREATE..DOES> details.
                                                              (line   6)
* dofield, ( -- ) gforth-1.0:            Threading Words.     (line  47)
* dofield: ( -- ADDR ) gforth-0.2:       Threading Words.     (line  97)
* DONE ( COMPILATION DO-SYS -- ; RUN-TIME -- ) gforth-0.2: Counted Loops.
                                                              (line 259)
* double% ( -- ALIGN SIZE ) gforth-0.4:  Structure Glossary.  (line  30)
* douser, ( -- ) gforth-1.0:             Threading Words.     (line  41)
* douser: ( -- ADDR ) gforth-0.2:        Threading Words.     (line  91)
* dovalue, ( -- ) gforth-1.0:            Threading Words.     (line  50)
* dovalue: ( -- ADDR ) gforth-0.7:       Threading Words.     (line 100)
* dovar, ( -- ) gforth-1.0:              Threading Words.     (line  38)
* dovar: ( -- ADDR ) gforth-0.2:         Threading Words.     (line  88)
* dpl ( -- A-ADDR ) gforth-0.2:          Number Conversion.   (line  36)
* draw ( -- ) minos2:                    widget methods.      (line  60)
* draw-init ( -- ) minos2:               widget methods.      (line  57)
* drol ( UD1 U -- UD2 ) gforth-1.0:      Bitwise operations.  (line  97)
* drop ( W -- ) core:                    Data stack.          (line   6)
* dror ( UD1 U -- UD2 ) gforth-1.0:      Bitwise operations.  (line 100)
* drshift ( UD1 U -- UD2 ) gforth-1.0:   Bitwise operations.  (line  33)
* du/mod ( D U -- N U1 ) gforth-1.0:     Integer division.    (line  88)
* du< ( UD1 UD2 -- F ) double-ext:       Numeric comparison.  (line  74)
* du<= ( UD1 UD2 -- F ) gforth-0.2:      Numeric comparison.  (line  76)
* du> ( UD1 UD2 -- F ) gforth-0.2:       Numeric comparison.  (line  78)
* du>= ( UD1 UD2 -- F ) gforth-0.2:      Numeric comparison.  (line  80)
* dump ( ADDR U -- ) tools:              Examining data.      (line  57)
* dup ( W -- W W ) core:                 Data stack.          (line  10)
* D^ ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME X1 X2 -- ) gforth-0.2: Locals definition words.
                                                              (line  49)
* early ( -- ) oof:                      Class Declaration.   (line  26)
* edit ( "NAME" -- ) gforth-1.0:         Locating source code definitions.
                                                              (line  65)
* edit-line ( C-ADDR N1 N2 -- N3 ) gforth-0.6: Line input and conversion.
                                                              (line  18)
* ekey ( -- U ) facility-ext:            Single-key input.    (line  44)
* ekey>char ( U -- U FALSE | C TRUE ) facility-ext: Single-key input.
                                                              (line  50)
* ekey>fkey ( U1 -- U2 F ) facility-ext: Single-key input.    (line  55)
* ekey>xchar ( U -- U FALSE | XC TRUE ) xchar-ext: Single-key input.
                                                              (line  47)
* ekey? ( -- FLAG ) facility-ext:        Single-key input.    (line  59)
* ekeyed ( EKEY -- ) minos2:             actor methods.       (line  30)
* ELSE ( COMPILATION ORIG1 -- ORIG2 ; RUN-TIME -- ) core: Arbitrary control structures.
                                                              (line  58)
* emit ( C -- ) core:                    Displaying characters and strings.
                                                              (line  13)
* emit-file ( C WFILEID -- WIOR ) gforth-0.2: General files.  (line  74)
* empty-buffer ( BUFFER -- ) gforth-0.2: Blocks.              (line 166)
* empty-buffers ( -- ) block-ext:        Blocks.              (line 162)
* end-c-library ( -- ) gforth-0.7:       Defining library interfaces.
                                                              (line  54)
* end-class ( ALIGN OFFSET "NAME" -- ) objects: Objects Glossary.
                                                              (line  57)
* end-class ( CLASS SELECTORS VARS "NAME" -- ) mini-oof: Basic Mini-OOF Usage.
                                                              (line  23)
* end-class-noname ( ALIGN OFFSET -- CLASS ) objects: Objects Glossary.
                                                              (line  61)
* end-code ( COLON-SYS -- ) gforth-0.2:  Assembler Definitions.
                                                              (line  58)
* end-interface ( "NAME" -- ) objects:   Objects Glossary.    (line  64)
* end-interface-noname ( -- INTERFACE ) objects: Objects Glossary.
                                                              (line  68)
* end-methods ( -- ) objects:            Objects Glossary.    (line  71)
* end-struct ( ALIGN SIZE "NAME" -- ) gforth-0.2: Structure Glossary.
                                                              (line  32)
* end-structure ( STRUCT-SYS +N -- ) facility-ext: Forth200x Structures.
                                                              (line  46)
* endcase ( COMPILATION CASE-SYS -- ; RUN-TIME X -- ) core-ext: Arbitrary control structures.
                                                              (line  90)
* ENDIF ( COMPILATION ORIG -- ; RUN-TIME -- ) gforth-0.2: Arbitrary control structures.
                                                              (line  75)
* endof ( COMPILATION CASE-SYS1 OF-SYS -- CASE-SYS2 ; RUN-TIME -- ) core-ext: Arbitrary control structures.
                                                              (line 107)
* endscope ( COMPILATION SCOPE -- ; RUN-TIME -- ) gforth-0.2: Where are locals visible by name?.
                                                              (line  13)
* endtry ( COMPILATION -- ; RUN-TIME R:SYS1 -- ) gforth-0.5: Exception Handling.
                                                              (line 132)
* endtry-iferror ( COMPILATION ORIG1 -- ORIG2 ; RUN-TIME R:SYS1 -- ) gforth-0.7: Exception Handling.
                                                              (line 211)
* entered ( -- ) minos2:                 actor methods.       (line  42)
* environment ( -- ) gforth-0.6:         Environmental Queries.
                                                              (line 162)
* environment-wordlist ( -- WID ) gforth-0.2: Environmental Queries.
                                                              (line 158)
* environment? ( C-ADDR U -- FALSE / ... TRUE ) core: Environmental Queries.
                                                              (line  11)
* erase ( ADDR U -- ) core-ext:          Memory Blocks.       (line  37)
* error-color ( -- ) gforth-1.0:         Terminal output.     (line  39)
* error-hl-inv ( -- ) gforth-1.0:        Terminal output.     (line  42)
* error-hl-ul ( -- ) gforth-1.0:         Terminal output.     (line  45)
* evaluate ( ... ADDR U -- ... ) core,block: Input Sources.   (line  41)
* event-loop ( -- ) gforth-experimental: Message queues.      (line  25)
* exception ( ADDR U -- N ) gforth-0.2:  Exception Handling.  (line  35)
* exceptions ( XT N1 -- N2 ) gforth-1.0: Exception Handling.  (line  45)
* execute ( XT -- ) core:                Execution token.     (line  83)
* execute-exit ( COMPILATION -- ; RUN-TIME XT NEST-SYS -- ) gforth-1.0: Execution token.
                                                              (line  86)
* execute-parsing ( ... ADDR U XT -- ... ) gforth-0.6: The Input Stream.
                                                              (line  71)
* execute-parsing-file ( I*X FILEID XT -- J*X ) gforth-0.6: The Input Stream.
                                                              (line  87)
* execute-task ( XT -- TASK ) gforth-experimental: Basic multi-tasking.
                                                              (line  59)
* EXIT ( COMPILATION -- ; RUN-TIME NEST-SYS -- ) core: Calls and returns.
                                                              (line  44)
* exitm ( -- ) objects:                  Objects Glossary.    (line  75)
* expand-where ( -- ) gforth-1.0:        Locating uses of a word.
                                                              (line  43)
* expect ( C-ADDR +N -- ) core-ext-obsolescent: Line input and conversion.
                                                              (line  64)
* extend-mem ( ADDR1 U1 U -- ADDR ADDR2 U2 ) gforth-experimental: Heap Allocation.
                                                              (line  46)
* extend-structure ( N "NAME" -- STRUCT-SYS N ) gforth-1.0: Forth200x Structures.
                                                              (line  42)
* f! ( R F-ADDR -- ) floating:           Memory Access.       (line  31)
* f* ( R1 R2 -- R3 ) floating:           Floating Point.      (line  38)
* f** ( R1 R2 -- R3 ) floating-ext:      Floating Point.      (line  63)
* f+ ( R1 R2 -- R3 ) floating:           Floating Point.      (line  34)
* f, ( F -- ) gforth-0.2:                Dictionary allocation.
                                                              (line  44)
* f- ( R1 R2 -- R3 ) floating:           Floating Point.      (line  36)
* f-rot ( R1 R2 R3 -- R3 R1 R2 ) floating: Floating point stack.
                                                              (line  27)
* f. ( R -- ) floating-ext:              Floating-point output.
                                                              (line   8)
* f.rdp ( RF +NR +ND +NP -- ) gforth-0.6: Floating-point output.
                                                              (line  44)
* f.s ( -- ) gforth-0.2:                 Examining data.      (line  16)
* f.s-precision ( -- U ) gforth-1.0:     Examining data.      (line  21)
* f/ ( R1 R2 -- R3 ) floating:           Floating Point.      (line  40)
* f0< ( R -- F ) floating:               Floating Point.      (line 169)
* f0<= ( R -- F ) gforth-0.2:            Floating Point.      (line 171)
* f0<> ( R -- F ) gforth-0.2:            Floating Point.      (line 173)
* f0= ( R -- F ) floating:               Floating Point.      (line 175)
* f0> ( R -- F ) gforth-0.2:             Floating Point.      (line 177)
* f0>= ( R -- F ) gforth-0.2:            Floating Point.      (line 179)
* f2* ( R1 -- R2 ) gforth-0.2:           Floating Point.      (line  84)
* f2/ ( R1 -- R2 ) gforth-0.2:           Floating Point.      (line  87)
* F: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME R -- ) gforth-0.2: Locals definition words.
                                                              (line  61)
* f< ( R1 R2 -- F ) floating:            Floating Point.      (line 161)
* f<= ( R1 R2 -- F ) gforth-0.2:         Floating Point.      (line 163)
* f<> ( R1 R2 -- F ) gforth-0.2:         Floating Point.      (line 159)
* f= ( R1 R2 -- F ) gforth-0.2:          Floating Point.      (line 157)
* f> ( R1 R2 -- F ) gforth-0.2:          Floating Point.      (line 165)
* f>= ( R1 R2 -- F ) gforth-0.2:         Floating Point.      (line 167)
* f>buf-rdp ( RF C-ADDR +NR +ND +NP -- ) gforth-0.6: Floating-point output.
                                                              (line  89)
* f>d ( R -- D ) floating:               Floating Point.      (line  30)
* f>l ( R -- ) gforth-0.2:               Locals implementation.
                                                              (line  26)
* f>s ( R -- N ) floating-ext:           Floating Point.      (line  28)
* f>str-rdp ( RF +NR +ND +NP -- C-ADDR NR ) gforth-0.6: Floating-point output.
                                                              (line  83)
* f@ ( F-ADDR -- R ) floating:           Memory Access.       (line  28)
* f@localn ( NOFFSET -- R ) gforth-1.0:  Locals implementation.
                                                              (line  16)
* FA: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME F -- ) gforth-1.0: Locals definition words.
                                                              (line  64)
* fabs ( R1 -- R2 ) floating-ext:        Floating Point.      (line  44)
* facos ( R1 -- R2 ) floating-ext:       Floating Point.      (line 117)
* facosh ( R1 -- R2 ) floating-ext:      Floating Point.      (line 133)
* fade-color: ( RGBA1 RGBA2 "NAME" -- ) minos2: widget methods.
                                                              (line 142)
* falign ( -- ) floating:                Dictionary allocation.
                                                              (line  86)
* faligned ( C-ADDR -- F-ADDR ) floating: Address arithmetic. (line  79)
* falog ( R1 -- R2 ) floating-ext:       Floating Point.      (line  81)
* false ( -- F ) core-ext:               Boolean Flags.       (line  14)
* fasin ( R1 -- R2 ) floating-ext:       Floating Point.      (line 115)
* fasinh ( R1 -- R2 ) floating-ext:      Floating Point.      (line 131)
* fast-throw ( ... WBALL -- ... WBALL ) gforth-experimental: Exception Handling.
                                                              (line  15)
* fatan ( R1 -- R2 ) floating-ext:       Floating Point.      (line 119)
* fatan2 ( R1 R2 -- R3 ) floating-ext:   Floating Point.      (line 121)
* fatanh ( R1 -- R2 ) floating-ext:      Floating Point.      (line 135)
* faxpy ( RA F-X NSTRIDEX F-Y NSTRIDEY UCOUNT -- ) gforth-0.5: Floating Point.
                                                              (line 100)
* fclearstack ( R0 .. RN -- ) gforth-1.0: Examining data.     (line  46)
* fconstant ( R "NAME" -- ) floating:    Constants.           (line  35)
* fcopysign ( R1 R2 -- R3 ) gforth-1.0:  Floating Point.      (line  46)
* fcos ( R1 -- R2 ) floating-ext:        Floating Point.      (line 108)
* fcosh ( R1 -- R2 ) floating-ext:       Floating Point.      (line 127)
* fdepth ( -- +N ) floating:             Examining data.      (line  39)
* fdrop ( R -- ) floating:               Floating point stack.
                                                              (line   6)
* fdup ( R -- R R ) floating:            Floating point stack.
                                                              (line  10)
* fe. ( R -- ) floating-ext:             Floating-point output.
                                                              (line  12)
* fexp ( R1 -- R2 ) floating-ext:        Floating Point.      (line  68)
* fexpm1 ( R1 -- R2 ) floating-ext:      Floating Point.      (line  70)
* ffield: ( U1 "NAME" -- U2 ) floating-ext: Forth200x Structures.
                                                              (line  62)
* ffourth ( R1 R2 R3 R4 -- R1 R2 R3 R4 R1 ) gforth-1.0: Floating point stack.
                                                              (line  16)
* field ( ALIGN1 OFFSET1 ALIGN SIZE "NAME" -- ALIGN2 OFFSET2 ) gforth-0.2: Structure Glossary.
                                                              (line  37)
* field: ( U1 "NAME" -- U2 ) facility-ext: Forth200x Structures.
                                                              (line  56)
* file-eof? ( WFILEID -- FLAG ) gforth-0.6: General files.    (line  67)
* file-position ( WFILEID -- UD WIOR ) file: General files.   (line  80)
* file-size ( WFILEID -- UD WIOR ) file: General files.       (line  84)
* file-status ( C-ADDR U -- WFAM WIOR ) file-ext: General files.
                                                              (line  78)
* file>fpath ( ADDR1 U1 -- ADDR2 U2 ) gforth-1.0: Source Search Paths.
                                                              (line  15)
* file>path ( C-ADDR1 U1 PATH-ADDR -- C-ADDR2 U2 ) gforth-1.0: General Search Paths.
                                                              (line  17)
* filename-match ( C-ADDR1 U1 C-ADDR2 U2 -- FLAG ) gforth-0.5: Directories.
                                                              (line  38)
* fill ( C-ADDR U C -- ) core:           Memory Blocks.       (line  34)
* find ( C-ADDR -- XT +-1 | C-ADDR 0 ) core,search: Word Lists.
                                                              (line 100)
* find-name ( C-ADDR U -- NT | 0 ) gforth-0.2: Name token.    (line  20)
* find-name-in ( C-ADDR U WID -- NT | 0 ) gforth-1.0: Name token.
                                                              (line  24)
* fkey. ( U -- ) gforth-1.0:             Single-key input.    (line 178)
* FLiteral ( COMPILATION R -- ; RUN-TIME -- R ) floating: Literals.
                                                              (line  61)
* fln ( R1 -- R2 ) floating-ext:         Floating Point.      (line  73)
* flnp1 ( R1 -- R2 ) floating-ext:       Floating Point.      (line  75)
* float ( -- U ) gforth-0.3:             Address arithmetic.  (line  73)
* float% ( -- ALIGN SIZE ) gforth-0.4:   Structure Glossary.  (line  44)
* float+ ( F-ADDR1 -- F-ADDR2 ) floating: Address arithmetic. (line  70)
* float/ ( N1 -- N2 ) gforth-1.0:        Address arithmetic.  (line  77)
* floating-stack ( -- N ) environment:   Environmental Queries.
                                                              (line  69)
* floats ( N1 -- N2 ) floating:          Address arithmetic.  (line  67)
* flog ( R1 -- R2 ) floating-ext:        Floating Point.      (line  78)
* floor ( R1 -- R2 ) floating:           Floating Point.      (line  53)
* FLOORED ( -- F ) environment:          Environmental Queries.
                                                              (line  48)
* flush ( -- ) block:                    Blocks.              (line 181)
* flush-file ( WFILEID -- WIOR ) file-ext: General files.     (line  76)
* flush-icache ( C-ADDR U -- ) gforth-0.2: Assembler Definitions.
                                                              (line  75)
* fm/mod ( D1 N1 -- N2 N3 ) core:        Integer division.    (line  79)
* fmax ( R1 R2 -- R3 ) floating:         Floating Point.      (line  49)
* fmin ( R1 R2 -- R3 ) floating:         Floating Point.      (line  51)
* fnegate ( R1 -- R2 ) floating:         Floating Point.      (line  42)
* fnip ( R1 R2 -- R2 ) gforth-0.2:       Floating point stack.
                                                              (line   8)
* focus ( -- ) minos2:                   actor methods.       (line  36)
* FOR ( COMPILATION -- DO-SYS ; RUN-TIME U -- LOOP-SYS ) gforth-0.2: Counted Loops.
                                                              (line 221)
* FORK ( COMPILATION -- ORIG ; RUN-TIME F -- ) gforth-0.7: Regular Expressions.
                                                              (line  18)
* form ( -- NLINES NCOLS ) gforth-0.2:   Terminal output.     (line  19)
* Forth ( -- ) search-ext:               Word Lists.          (line  81)
* forth-recognize ( C-ADDR U -- ... TRANSLATE-XT ) recognizer: Dealing with existing Recognizers.
                                                              (line  77)
* forth-recognizer ( -- XT ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  80)
* forth-wordlist ( -- WID ) search:      Word Lists.          (line  29)
* forward ( "NAME" -- ) gforth-1.0:      Forward.             (line  11)
* fourth ( W1 W2 W3 W4 -- W1 W2 W3 W4 W1 ) gforth-1.0: Data stack.
                                                              (line  16)
* fover ( R1 R2 -- R1 R2 R1 ) floating:  Floating point stack.
                                                              (line  12)
* fp! ( F-ADDR -- F:... ) gforth-0.2:    Stack pointer manipulation.
                                                              (line  18)
* fp. ( R -- ) floating-ext:             Floating-point output.
                                                              (line  20)
* fp0 ( -- A-ADDR ) gforth-0.4:          Stack pointer manipulation.
                                                              (line  13)
* fp@ ( F:... -- F-ADDR ) gforth-0.2:    Stack pointer manipulation.
                                                              (line  16)
* fpath ( -- PATH-ADDR ) gforth-0.4:     Source Search Paths. (line  10)
* fpick ( F:... U -- F:... R ) gforth-0.4: Floating point stack.
                                                              (line  22)
* free ( A_ADDR -- WIOR ) memory:        Heap Allocation.     (line  23)
* free-closure ( XT -- ) gforth-internal: Closures.           (line  50)
* free-mem-var ( ADDR -- ) gforth-experimental: Heap Allocation.
                                                              (line  42)
* frot ( R1 R2 R3 -- R2 R3 R1 ) floating: Floating point stack.
                                                              (line  25)
* fround ( R1 -- R2 ) floating:          Floating Point.      (line  57)
* fs. ( R -- ) floating-ext:             Floating-point output.
                                                              (line  16)
* fsin ( R1 -- R2 ) floating-ext:        Floating Point.      (line 106)
* fsincos ( R1 -- R2 R3 ) floating-ext:  Floating Point.      (line 110)
* fsinh ( R1 -- R2 ) floating-ext:       Floating Point.      (line 125)
* fsqrt ( R1 -- R2 ) floating-ext:       Floating Point.      (line  66)
* fswap ( R1 R2 -- R2 R1 ) floating:     Floating point stack.
                                                              (line  20)
* ftan ( R1 -- R2 ) floating-ext:        Floating Point.      (line 113)
* ftanh ( R1 -- R2 ) floating-ext:       Floating Point.      (line 129)
* fthird ( R1 R2 R3 -- R1 R2 R3 R1 ) gforth-1.0: Floating point stack.
                                                              (line  14)
* ftrunc ( R1 -- R2 ) floating-ext:      Floating Point.      (line  60)
* ftuck ( R1 R2 -- R2 R1 R2 ) gforth-0.2: Floating point stack.
                                                              (line  18)
* fvalue ( R "NAME" -- ) floating-ext:   Values.              (line  29)
* fvariable ( "NAME" -- ) floating:      Variables.           (line  41)
* fvarue ( R "NAME" -- ) gforth-1.0:     Varues.              (line  19)
* F^ ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME R -- ) gforth-0.2: Locals definition words.
                                                              (line  67)
* f~ ( R1 R2 R3 -- FLAG ) floating-ext:  Floating Point.      (line 153)
* f~abs ( R1 R2 R3 -- FLAG ) gforth-0.5: Floating Point.      (line 150)
* f~rel ( R1 R2 R3 -- FLAG ) gforth-0.5: Floating Point.      (line 147)
* g ( -- ) gforth-0.7:                   Locating source code definitions.
                                                              (line  49)
* gap ( -- R ) minos2:                   widget methods.      (line  30)
* get ( -- SOMETHING ) minos2:           actor methods.       (line  54)
* get-block-fid ( -- WFILEID ) gforth-0.2: Blocks.            (line 131)
* get-current ( -- WID ) search:         Word Lists.          (line  38)
* get-dir ( C-ADDR1 U1 -- C-ADDR2 U2 ) gforth-0.7: Directories.
                                                              (line  43)
* get-order ( -- WIDN .. WID1 N ) search: Word Lists.         (line  44)
* get-recognizers ( -- XT1 .. XTN N ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  64)
* getenv ( C-ADDR1 U1 -- C-ADDR2 U2 ) gforth-0.2: Passing Commands to the OS.
                                                              (line  29)
* gforth ( -- C-ADDR U ) gforth-environment: Environmental Queries.
                                                              (line 135)
* gg ( -- ) gforth-1.0:                  Locating uses of a word.
                                                              (line  25)
* h ( -- R ) minos2:                     widget methods.      (line  24)
* h. ( U -- ) gforth-1.0:                Simple numeric output.
                                                              (line  17)
* halt ( TASK -- ) gforth-experimental:  Basic multi-tasking. (line  75)
* heap-new ( ... CLASS -- OBJECT ) objects: Objects Glossary. (line  78)
* help ( "REST-OF-LINE" -- ) gforth-1.0: Help on Gforth.      (line   9)
* here ( -- ADDR ) core:                 Dictionary allocation.
                                                              (line  24)
* hex ( -- ) core-ext:                   Number Conversion.   (line  28)
* hex. ( U -- ) gforth-0.2:              Simple numeric output.
                                                              (line  21)
* hglue ( -- RTYP RSUB RADD ) minos2:    widget methods.      (line  69)
* hglue@ ( -- RTYP RSUB RADD ) minos2:   widget methods.      (line  78)
* hide ( -- ) minos2:                    actor methods.       (line  51)
* hmcopy, ( XT -- ) gforth-experimental: Threading Words.     (line  28)
* hold ( CHAR -- ) core:                 Formatted numeric output.
                                                              (line  62)
* holds ( ADDR U -- ) core-ext:          Formatted numeric output.
                                                              (line  66)
* how: ( -- ) oof:                       Class Declaration.   (line  39)
* i ( R:N -- R:N N ) core:               Counted Loops.       (line 236)
* i' ( R:W R:W2 -- R:W R:W2 W ) gforth-0.2: Counted Loops.    (line 245)
* id. ( NT -- ) gforth-0.6:              Name token.          (line  65)
* IF ( COMPILATION -- ORIG ; RUN-TIME F -- ) core: Arbitrary control structures.
                                                              (line  16)
* iferror ( COMPILATION ORIG1 -- ORIG2 ; RUN-TIME -- ) gforth-0.7: Exception Handling.
                                                              (line 135)
* immediate ( -- ) core:                 Interpretation and Compilation Semantics.
                                                              (line  48)
* immediate? ( NT -- FLAG ) gforth-1.0:  Header methods.      (line 168)
* implementation ( INTERFACE -- ) objects: Objects Glossary.  (line  81)
* include ( ... "FILE" -- ... ) file-ext: Forth source files. (line  46)
* include-file ( I*X WFILEID -- J*X ) file: Forth source files.
                                                              (line  32)
* include-locale ( "NAME" -- ) gforth-experimental: i18n and l10n.
                                                              (line  52)
* included ( I*X C-ADDR U -- J*X ) file: Forth source files.  (line  36)
* included-locale ( ADDR U -- ) gforth-experimental: i18n and l10n.
                                                              (line  49)
* included? ( C-ADDR U -- F ) gforth-0.2: Forth source files. (line  39)
* infile-execute ( ... XT FILE-ID -- ... ) gforth-0.7: Redirection.
                                                              (line  29)
* infile-id ( -- FILE-ID ) gforth-0.4:   Redirection.         (line  32)
* infinity ( -- R ) gforth-1.0:          Floating Point.      (line 185)
* info-color ( -- ) gforth-1.0:          Terminal output.     (line  51)
* init-asm ( -- ) gforth-0.2:            Assembler Definitions.
                                                              (line  36)
* init-buffer ( ADDR -- ) gforth-experimental: Heap Allocation.
                                                              (line  62)
* init-object ( ... CLASS OBJECT -- ) objects: Objects Glossary.
                                                              (line  85)
* initiate ( XT TASK -- ) gforth-experimental: Basic multi-tasking.
                                                              (line  34)
* inline: ( "NAME" -- INLINE:-SYS ) gforth-experimental: Colon Definitions.
                                                              (line  24)
* input-color ( -- ) gforth-1.0:         Terminal output.     (line  57)
* insert ( STRING LENGTH BUFFER SIZE -- ) gforth-0.7: Memory Blocks.
                                                              (line  43)
* inst-value ( ALIGN1 OFFSET1 "NAME" -- ALIGN2 OFFSET2 ) objects: Objects Glossary.
                                                              (line  89)
* inst-var ( ALIGN1 OFFSET1 ALIGN SIZE "NAME" -- ALIGN2 OFFSET2 ) objects: Objects Glossary.
                                                              (line  93)
* INT-[I] ( -- N ) gforth-1.0:           Interpreter Directives.
                                                              (line  78)
* interface ( -- ) objects:              Objects Glossary.    (line  97)
* interpret ( ... -- ... ) gforth-0.2:   The Text Interpreter.
                                                              (line 136)
* interpret/compile: ( INTERP-XT COMP-XT "NAME" -- ) gforth-0.2: Combined words.
                                                              (line   9)
* invert ( W1 -- W2 ) core:              Bitwise operations.  (line  12)
* IS ( VALUE "NAME" -- ) core-ext:       Deferred Words.      (line  84)
* j ( R:N R:W1 R:W2 -- N R:N R:W1 R:W2 ) core: Counted Loops. (line 239)
* JOIN ( ORIG -- ) gforth-0.7:           Regular Expressions. (line  21)
* k ( R:N R:W1 R:W2 R:W3 R:W4 -- N R:N R:W1 R:W2 R:W3 R:W4 ) gforth-0.3: Counted Loops.
                                                              (line 242)
* k-alt-mask ( -- U ) facility-ext:      Single-key input.    (line 123)
* k-backspace ( -- U ) gforth-1.0:       Single-key input.    (line 131)
* k-ctrl-mask ( -- U ) facility-ext:     Single-key input.    (line 121)
* k-delete ( -- U ) facility-ext:        Single-key input.    (line  85)
* k-down ( -- U ) facility-ext:          Single-key input.    (line  70)
* k-end ( -- U ) facility-ext:           Single-key input.    (line  75)
* k-enter ( -- U ) gforth-1.0:           Single-key input.    (line 129)
* k-eof ( -- U ) gforth-1.0:             Single-key input.    (line 152)
* k-f1 ( -- U ) facility-ext:            Single-key input.    (line  90)
* k-f10 ( -- U ) facility-ext:           Single-key input.    (line 108)
* k-f11 ( -- U ) facility-ext:           Single-key input.    (line 110)
* k-f12 ( -- U ) facility-ext:           Single-key input.    (line 112)
* k-f2 ( -- U ) facility-ext:            Single-key input.    (line  92)
* k-f3 ( -- U ) facility-ext:            Single-key input.    (line  94)
* k-f4 ( -- U ) facility-ext:            Single-key input.    (line  96)
* k-f5 ( -- U ) facility-ext:            Single-key input.    (line  98)
* k-f6 ( -- U ) facility-ext:            Single-key input.    (line 100)
* k-f7 ( -- U ) facility-ext:            Single-key input.    (line 102)
* k-f8 ( -- U ) facility-ext:            Single-key input.    (line 104)
* k-f9 ( -- U ) facility-ext:            Single-key input.    (line 106)
* k-home ( -- U ) facility-ext:          Single-key input.    (line  72)
* k-insert ( -- U ) facility-ext:        Single-key input.    (line  83)
* k-left ( -- U ) facility-ext:          Single-key input.    (line  64)
* k-mute ( -- U ) gforth-1.0:            Single-key input.    (line 143)
* k-next ( -- U ) facility-ext:          Single-key input.    (line  80)
* k-pause ( -- U ) gforth-1.0:           Single-key input.    (line 141)
* k-prior ( -- U ) facility-ext:         Single-key input.    (line  77)
* k-right ( -- U ) facility-ext:         Single-key input.    (line  66)
* k-sel ( -- U ) gforth-1.0:             Single-key input.    (line 149)
* k-shift-mask ( -- U ) facility-ext:    Single-key input.    (line 119)
* k-tab ( -- U ) gforth-1.0:             Single-key input.    (line 133)
* k-up ( -- U ) facility-ext:            Single-key input.    (line  68)
* k-voldown ( -- U ) gforth-1.0:         Single-key input.    (line 147)
* k-volup ( -- U ) gforth-1.0:           Single-key input.    (line 145)
* k-winch ( -- U ) gforth-1.0:           Single-key input.    (line 137)
* kerning ( -- R ) minos2:               widget methods.      (line  36)
* key ( -- CHAR ) core:                  Single-key input.    (line   9)
* key-file ( FD -- KEY ) gforth-0.4:     General files.       (line  54)
* key-ior ( -- CHAR|IOR ) gforth-1.0:    Single-key input.    (line  12)
* key? ( -- FLAG ) facility:             Single-key input.    (line  16)
* key?-file ( WFILEID -- F ) gforth-0.4: General files.       (line  61)
* kill ( TASK -- ) gforth-experimental:  Basic multi-tasking. (line  70)
* kill-task ( -- ) gforth-experimental:  Basic multi-tasking. (line  67)
* l ( -- ) gforth-1.0:                   Locating source code definitions.
                                                              (line  38)
* l! ( W C-ADDR -- ) gforth-0.7:         Special Memory Accesses.
                                                              (line  45)
* L" ( "LSID<">" -- LSID ) gforth-experimental: i18n and l10n.
                                                              (line  18)
* l, ( L -- ) gforth-1.0:                Dictionary allocation.
                                                              (line  57)
* l>s ( X -- N ) gforth-1.0:             Special Memory Accesses.
                                                              (line 106)
* l@ ( C-ADDR -- U ) gforth-0.7:         Special Memory Accesses.
                                                              (line  42)
* lalign ( -- ) gforth-1.0:              Address arithmetic.  (line 133)
* laligned ( ADDR -- ADDR' ) gforth-1.0: Address arithmetic.  (line 130)
* Language ( "NAME" -- ) gforth-experimental: i18n and l10n.  (line  37)
* lastfit ( -- ) minos2:                 widget methods.      (line  66)
* latest ( -- NT ) gforth-0.6:           Name token.          (line  28)
* latestnt ( -- NT ) gforth-1.0:         Name token.          (line  32)
* latestxt ( -- XT ) gforth-0.6:         Anonymous Definitions.
                                                              (line  28)
* lbe ( U1 -- U2 ) gforth-1.0:           Special Memory Accesses.
                                                              (line  73)
* LEAVE ( COMPILATION -- ; RUN-TIME LOOP-SYS -- ) core: Counted Loops.
                                                              (line 251)
* left ( -- ) minos2:                    actor methods.       (line  45)
* lfield: ( U1 "NAME" -- U2 ) gforth-1.0: Forth200x Structures.
                                                              (line  74)
* lib-error ( -- C-ADDR U ) gforth-0.7:  Low-Level C Interface Words.
                                                              (line  10)
* lib-sym ( C-ADDR1 U1 U2 -- U3 ) gforth-0.4: Low-Level C Interface Words.
                                                              (line   8)
* license ( -- ) gforth-0.2:             Help on Gforth.      (line  22)
* light-mode ( -- ) gforth-1.0:          Terminal output.     (line  69)
* line-end-hook ( -- ) gforth-0.7:       Text Interpreter Hooks.
                                                              (line  12)
* list ( U -- ) block-ext:               Blocks.              (line 138)
* list-size ( LIST -- U ) gforth-internal: Locals implementation.
                                                              (line  98)
* Literal ( COMPILATION N -- ; RUN-TIME -- N ) core: Literals.
                                                              (line  42)
* ll ( -- ) gforth-1.0:                  Locating uses of a word.
                                                              (line  30)
* lle ( U1 -- U2 ) gforth-1.0:           Special Memory Accesses.
                                                              (line  77)
* load ( I*X U -- J*X ) block:           Blocks.              (line 184)
* load-cov ( -- ) gforth-experimental:   Code Coverage.       (line  68)
* locale! ( ADDR U LSID -- ) gforth-experimental: i18n and l10n.
                                                              (line  33)
* locale-csv ( "NAME" -- ) gforth-experimental: i18n and l10n.
                                                              (line  55)
* locale-csv-out ( "NAME" -- ) gforth-experimental: i18n and l10n.
                                                              (line  65)
* locale-file ( FID -- ) gforth-experimental: i18n and l10n.  (line  46)
* locale@ ( LSID -- ADDR U ) gforth-experimental: i18n and l10n.
                                                              (line  30)
* locate ( "NAME" -- ) gforth-1.0:       Locating source code definitions.
                                                              (line  26)
* lock ( SEMAPHORE -- ) gforth-experimental: Semaphores.      (line  18)
* log2 ( U -- N ) gforth-1.0:            Bitwise operations.  (line  58)
* LOOP ( COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 -- | LOOP-SYS2 ) core: Counted Loops.
                                                              (line 224)
* lp! ( C-ADDR -- ) gforth-internal:     Stack pointer manipulation.
                                                              (line  33)
* lp! ( C-ADDR -- ) gforth-internal <1>: Locals implementation.
                                                              (line  21)
* lp0 ( -- A-ADDR ) gforth-0.4:          Stack pointer manipulation.
                                                              (line  27)
* lp@ ( -- C-ADDR ) gforth-0.2:          Stack pointer manipulation.
                                                              (line  30)
* lp@ ( -- C-ADDR ) gforth-0.2 <1>:      Locals implementation.
                                                              (line  18)
* lrol ( U1 U -- U2 ) gforth-1.0:        Bitwise operations.  (line  83)
* lror ( U1 U -- U2 ) gforth-1.0:        Bitwise operations.  (line  87)
* lshift ( U1 U -- U2 ) core:            Bitwise operations.  (line  19)
* LU" ( "LSID<">" -- LSID ) gforth-experimental: i18n and l10n.
                                                              (line  23)
* m* ( N1 N2 -- D ) core:                Mixed precision.     (line   8)
* m*/ ( D1 N2 U3 -- DQUOT ) double:      Integer division.    (line 125)
* m+ ( D1 N -- D2 ) double:              Mixed precision.     (line   6)
* m: ( -- XT COLON-SYS; RUN-TIME: OBJECT -- ) objects: Objects Glossary.
                                                              (line 100)
* macros-wordlist ( -- WID ) gforth-experimental: Substitute. (line  14)
* magenta-input ( -- ) gforth-1.0:       Terminal output.     (line  78)
* make-latest ( NT -- ) gforth-1.0:      Making a word current.
                                                              (line  10)
* map-vocs ( ... XT -- ... ) gforth-1.0: Word Lists.          (line 164)
* marker ( "<SPACES> NAME" -- ) core-ext: Forgetting words.   (line   9)
* max ( N1 N2 -- N ) core:               Single precision.    (line  33)
* MAX-CHAR ( -- U ) environment:         Environmental Queries.
                                                              (line  28)
* MAX-D ( -- D ) environment:            Environmental Queries.
                                                              (line  57)
* max-float ( -- R ) environment:        Environmental Queries.
                                                              (line  79)
* MAX-N ( -- N ) environment:            Environmental Queries.
                                                              (line  51)
* MAX-U ( -- U ) environment:            Environmental Queries.
                                                              (line  54)
* MAX-UD ( -- UD ) environment:          Environmental Queries.
                                                              (line  60)
* MAX-XCHAR ( -- XCHAR ) environment:    Environmental Queries.
                                                              (line  90)
* maxalign ( -- ) gforth-0.2:            Dictionary allocation.
                                                              (line  98)
* maxaligned ( ADDR1 -- ADDR2 ) gforth-0.2: Address arithmetic.
                                                              (line 109)
* maxdepth-.s ( -- ADDR ) gforth-0.2:    Examining data.      (line  25)
* mem+do ( COMPILATION -- W XT DO-SYS; RUN-TIME ADDR UBYTES +NSTRIDE -- ) gforth-experimental: Counted Loops.
                                                              (line 207)
* mem, ( ADDR U -- ) gforth-0.6:         Dictionary allocation.
                                                              (line  68)
* mem-do ( COMPILATION -- W XT DO-SYS; RUN-TIME ADDR UBYTES +NSTRIDE -- ) gforth-experimental: Counted Loops.
                                                              (line 213)
* method ( -- ) oof:                     Class Declaration.   (line  29)
* method ( M V "NAME" -- M' V ) mini-oof: Basic Mini-OOF Usage.
                                                              (line  14)
* method ( XT "NAME" -- ) objects:       Objects Glossary.    (line 110)
* methods ( CLASS -- ) objects:          Objects Glossary.    (line 114)
* min ( N1 N2 -- N ) core:               Single precision.    (line  31)
* mkdir-parents ( C-ADDR U MODE -- IOR ) gforth-0.7: Directories.
                                                              (line  54)
* mod ( N1 N2 -- N ) core:               Integer division.    (line  53)
* modf ( N1 N2 -- N ) gforth-1.0:        Integer division.    (line  58)
* modf-stage2m ( N1 A-RECI -- UMODULUS ) gforth-1.0: Two-stage integer division.
                                                              (line  60)
* mods ( N1 N2 -- N ) gforth-1.0:        Integer division.    (line  56)
* move ( C-FROM C-TO UCOUNT -- ) core:   Memory Blocks.       (line  20)
* ms ( N -- ) facility-ext:              Keeping track of Time.
                                                              (line   6)
* mux ( U1 U2 U3 -- U ) gforth-1.0:      Bitwise operations.  (line  14)
* mwords ( ["PATTERN"] -- ) gforth-1.0:  Word Lists.          (line 134)
* n ( -- ) gforth-1.0:                   Locating source code definitions.
                                                              (line  41)
* n/a ( -- ) gforth-experimental:        User-defined TO and DEFER@.
                                                              (line  29)
* n>r ( X1 .. XN N -- R:XN..X1 R:N ) tools-ext: Return stack. (line  29)
* name ( -- C-ADDR U ) gforth-obsolete:  The Input Stream.    (line  42)
* name$ ( -- ADDR U ) minos2:            widget methods.      (line  12)
* name>compile ( NT -- W XT ) tools-ext: Name token.          (line  59)
* name>interpret ( NT -- XT ) tools-ext: Name token.          (line  56)
* name>link ( NT1 -- NT2 / 0 ) gforth-1.0: Name token.        (line  71)
* name>string ( NT -- ADDR U ) tools-ext: Name token.         (line  62)
* NaN ( -- R ) gforth-1.0:               Floating Point.      (line 191)
* native@ ( LSID -- ADDR U ) gforth-experimental: i18n and l10n.
                                                              (line  27)
* needs ( ... "NAME" -- ... ) gforth-0.2: Forth source files. (line  58)
* negate ( N1 -- N2 ) core:              Single precision.    (line  27)
* new ( CLASS -- O ) mini-oof:           Basic Mini-OOF Usage.
                                                              (line  29)
* new-color: ( RGBA "NAME" -- ) minos2:  widget methods.      (line 131)
* newline ( -- C-ADDR U ) gforth-0.5:    String and character literals.
                                                              (line  73)
* newtask ( STACKSIZE -- TASK ) gforth-experimental: Basic multi-tasking.
                                                              (line   9)
* newtask4 ( U-DATA U-RETURN U-FP U-LOCALS -- TASK ) gforth-experimental: Basic multi-tasking.
                                                              (line  18)
* NEXT ( COMPILATION DO-SYS -- ; RUN-TIME LOOP-SYS1 -- | LOOP-SYS2 ) gforth-0.2: Counted Loops.
                                                              (line 233)
* next-arg ( -- ADDR U ) gforth-0.7:     OS command line arguments.
                                                              (line  15)
* next-case ( COMPILATION CASE-SYS -- ; RUN-TIME -- ) gforth-1.0: Arbitrary control structures.
                                                              (line  96)
* nextname ( C-ADDR U -- ) gforth-0.2:   Supplying names.     (line  10)
* nip ( W1 W2 -- W2 ) core-ext:          Data stack.          (line   8)
* nocov[ ( -- ) gforth-1.0:              Code Coverage.       (line  17)
* noname ( -- ) gforth-0.2:              Anonymous Definitions.
                                                              (line  23)
* noname-from ( XT -- ) gforth-1.0:      Creating from a prototype.
                                                              (line  42)
* noop ( -- ) gforth-0.2:                Execution token.     (line  96)
* notfound ( STATE -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  31)
* nothrow ( -- ) gforth-0.7:             Exception Handling.  (line  89)
* nr> ( R:XN..X1 R:N -- X1 .. XN N ) tools-ext: Return stack. (line  31)
* ns ( D -- ) gforth-1.0:                Keeping track of Time.
                                                              (line   8)
* nt ( -- ) gforth-1.0:                  Locating exception source.
                                                              (line   8)
* ntime ( -- DTIME ) gforth-1.0:         Keeping track of Time.
                                                              (line  23)
* nw ( -- ) gforth-1.0:                  Locating uses of a word.
                                                              (line  15)
* o> ( R:C-ADDR -- ) new:                Mini-OOF2.           (line  16)
* object ( -- A-ADDR ) mini-oof:         Basic Mini-OOF Usage.
                                                              (line  11)
* object ( -- CLASS ) objects:           Objects Glossary.    (line 119)
* object-' ( "NAME" -- XT ) oof:         The OOF base class.  (line  77)
* object-: ( "NAME" -- ) oof:            The OOF base class.  (line  43)
* object-:: ( "NAME" -- ) oof:           The OOF base class.  (line  55)
* object-asptr ( O "NAME" -- ) oof:      The OOF base class.  (line  47)
* object-bind ( O "NAME" -- ) oof:       The OOF base class.  (line  66)
* object-bound ( CLASS ADDR "NAME" -- ) oof: The OOF base class.
                                                              (line  68)
* object-class ( "NAME" -- ) oof:        The OOF base class.  (line  20)
* object-class? ( O -- FLAG ) oof:       The OOF base class.  (line  24)
* object-definitions ( -- ) oof:         The OOF base class.  (line  22)
* object-dispose ( -- ) oof:             The OOF base class.  (line  34)
* object-endwith ( -- ) oof:             The OOF base class.  (line  88)
* object-init ( ... -- ) oof:            The OOF base class.  (line  32)
* object-is ( XT "NAME" -- ) oof:        The OOF base class.  (line  72)
* object-link ( "NAME" -- CLASS ADDR ) oof: The OOF base class.
                                                              (line  70)
* object-new ( -- O ) oof:               The OOF base class.  (line  39)
* object-new[] ( N -- O ) oof:           The OOF base class.  (line  41)
* object-postpone ( "NAME" -- ) oof:     The OOF base class.  (line  79)
* object-ptr ( "NAME" -- ) oof:          The OOF base class.  (line  45)
* object-self ( -- O ) oof:              The OOF base class.  (line  61)
* object-super ( "NAME" -- ) oof:        The OOF base class.  (line  57)
* object-with ( O -- ) oof:              The OOF base class.  (line  86)
* object-[] ( N "NAME" -- ) oof:         The OOF base class.  (line  49)
* of ( COMPILATION -- OF-SYS ; RUN-TIME X1 X2 -- |X1 ) core-ext: Arbitrary control structures.
                                                              (line 100)
* off ( A-ADDR -- ) gforth-0.2:          Boolean Flags.       (line  20)
* on ( A-ADDR -- ) gforth-0.2:           Boolean Flags.       (line  17)
* once ( -- ) gforth-1.0:                Debugging.           (line  47)
* Only ( -- ) search-ext:                Word Lists.          (line  85)
* open-blocks ( C-ADDR U -- ) gforth-0.2: Blocks.             (line 119)
* open-dir ( C-ADDR U -- WDIRID WIOR ) gforth-0.5: Directories.
                                                              (line  20)
* open-file ( C-ADDR U WFAM -- WFILEID WIOR ) file: General files.
                                                              (line  25)
* open-lib ( C-ADDR1 U1 -- U2 ) gforth-0.4: Low-Level C Interface Words.
                                                              (line   6)
* open-path-file ( ADDR1 U1 PATH-ADDR -- WFILEID ADDR2 U2 0 | IOR ) gforth-0.2: General Search Paths.
                                                              (line  11)
* open-pipe ( C-ADDR U WFAM -- WFILEID WIOR ) gforth-0.2: Pipes.
                                                              (line  10)
* opt: ( COMPILATION -- COLON-SYS2 ; RUN-TIME -- NEST-SYS ) gforth-1.0: User-defined compile-comma.
                                                              (line  14)
* or ( W1 W2 -- W ) core:                Bitwise operations.  (line   8)
* order ( -- ) search-ext:               Word Lists.          (line  89)
* os-class ( -- C-ADDR U ) gforth-environment: Environmental Queries.
                                                              (line 140)
* os-type ( -- C-ADDR U ) gforth-environment: Environmental Queries.
                                                              (line 144)
* out ( -- ADDR ) gforth-1.0:            Miscellaneous output.
                                                              (line  18)
* outfile-execute ( ... XT FILE-ID -- ... ) gforth-0.7: Redirection.
                                                              (line  21)
* outfile-id ( -- FILE-ID ) gforth-0.2:  Redirection.         (line  24)
* over ( W1 W2 -- W1 W2 W1 ) core:       Data stack.          (line  12)
* overrides ( XT "SELECTOR" -- ) objects: Objects Glossary.   (line 122)
* pad ( -- C-ADDR ) core-ext:            Memory Blocks.       (line  57)
* page ( -- ) facility:                  Terminal output.     (line  23)
* par-split ( RW -- ) minos2:            widget methods.      (line 105)
* parent-w ( -- OPTR ) minos2:           widget methods.      (line   6)
* parse ( XCHAR "CCC<XCHAR>" -- C-ADDR U ) core-ext,xchar-ext: The Input Stream.
                                                              (line  25)
* parse-name ( "NAME" -- C-ADDR U ) core-ext: The Input Stream.
                                                              (line  35)
* parse-word ( -- C-ADDR U ) gforth-obsolete: The Input Stream.
                                                              (line  38)
* pass ( X1 .. XN N TASK -- ) gforth-experimental: Basic multi-tasking.
                                                              (line  51)
* path+ ( PATH-ADDR "DIR" -- ) gforth-0.4: General Search Paths.
                                                              (line  32)
* path= ( PATH-ADDR "DIR1|DIR2|DIR3" -- ) gforth-0.4: General Search Paths.
                                                              (line  35)
* pause ( -- ) gforth-experimental:      Basic multi-tasking. (line  92)
* perform ( A-ADDR -- ) gforth-0.2:      Execution token.     (line  91)
* pi ( -- R ) gforth-0.2:                Floating Point.      (line 137)
* pick ( S:... U -- S:... W ) core-ext:  Data stack.          (line  22)
* postpone ( "NAME" -- ) core:           Macros.              (line  23)
* postpone, ( W XT -- ) gforth-0.2:      Compilation token.   (line  34)
* pow2? ( U -- F ) gforth-1.0:           Bitwise operations.  (line  62)
* precision ( -- U ) floating-ext:       Floating-point output.
                                                              (line  34)
* prepend-where ( -- ) gforth-1.0:       Locating uses of a word.
                                                              (line  47)
* preserve ( "NAME" -- ) gforth-1.0:     Deferred Words.      (line 105)
* previous ( -- ) search-ext:            Word Lists.          (line  73)
* print ( OBJECT -- ) objects:           Objects Glossary.    (line 129)
* printdebugdata ( -- ) gforth-0.2:      Debugging.           (line  32)
* process-option ( ADDR U -- TRUE / ADDR U FALSE ) gforth-0.7: Modifying the Startup Sequence.
                                                              (line  56)
* protected ( -- ) objects:              Objects Glossary.    (line 133)
* ptr ( -- ) oof:                        Class Declaration.   (line  13)
* public ( -- ) objects:                 Objects Glossary.    (line 136)
* query ( -- ) core-ext-obsolescent:     Input Sources.       (line  47)
* quit ( ?? -- ?? ) core:                Miscellaneous Words. (line   9)
* r/o ( -- FAM ) file:                   General files.       (line   9)
* r/w ( -- FAM ) file:                   General files.       (line  11)
* r> ( R:W -- W ) core:                  Return stack.        (line  15)
* r@ ( -- W ; R: W -- W ) core:          Return stack.        (line  17)
* raise ( -- R ) minos2:                 widget methods.      (line  39)
* rdrop ( R:W -- ) gforth-0.2:           Return stack.        (line  19)
* re-color ( RGBA "NAME" -- ) minos2:    widget methods.      (line 154)
* re-emoji-color ( RGBATEXT RGBAEMOJI "NAME" -- ) minos2: widget methods.
                                                              (line 162)
* re-fade-color ( RGBA1 RGBA2 "NAME" -- ) minos2: widget methods.
                                                              (line 166)
* re-text-color ( RGBA "NAME" -- ) minos2: widget methods.    (line 158)
* re-text-emoji-fade-color ( RGBATEXT1 ~2 RGBAEMOJI1 ~2 "NAME" -- ) minos2: widget methods.
                                                              (line 170)
* read-csv ( ADDR U XT -- ) gforth-experimental: CSV Reader.  (line   9)
* read-dir ( C-ADDR U1 WDIRID -- U2 FLAG WIOR ) gforth-0.5: Directories.
                                                              (line  24)
* read-file ( C-ADDR U1 WFILEID -- U2 WIOR ) file: General files.
                                                              (line  36)
* read-line ( C_ADDR U1 WFILEID -- U2 FLAG WIOR ) file: General files.
                                                              (line  42)
* rec-body ( ADDR U -- XT TRANSLATE-TICK | TRANSLATE-NULL ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  60)
* rec-dtick ( ADDR U -- NT RECTYPE-NUM | RECTYPE-NULL ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  56)
* rec-float ( ADDR U -- R TRANSLATE-FLOAT | NOTFOUND ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  40)
* rec-moof2 ( ADDR U -- XT TRANSLATE-MOOF2 | NOTFOUND ) mini-oof2: Mini-OOF2.
                                                              (line  22)
* rec-nt ( ADDR U -- NT TRANSLATE-NT | NOTFOUND ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  34)
* rec-num ( ADDR U -- N/D TABLE | NOTFOUND ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  37)
* rec-string ( ADDR U -- ADDR U' R:STRING | RECTYPE-NULL ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  43)
* rec-tick ( ADDR U -- XT RECTYPE-NUM | RECTYPE-NULL ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  52)
* rec-to ( ADDR U -- XT N R:TO | RECTYPE-NULL ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  47)
* recognize ( ADDR U REC-ADDR -- ... RECTYPE ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  70)
* recognizer-sequence: ( XT1 .. XTN N "NAME" -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  73)
* recurse ( ... -- ... ) core:           Calls and returns.   (line  16)
* recursive ( COMPILATION -- ; RUN-TIME -- ) gforth-0.2: Calls and returns.
                                                              (line  12)
* refill ( -- FLAG ) core-ext,block-ext,file-ext: The Input Stream.
                                                              (line  54)
* rename-file ( C-ADDR1 U1 C-ADDR2 U2 -- WIOR ) file-ext: General files.
                                                              (line  33)
* REPEAT ( COMPILATION ORIG DEST -- ; RUN-TIME -- ) core: Arbitrary control structures.
                                                              (line  68)
* replace-word ( XT1 XT2 -- ) gforth-1.0: Debugging.          (line  65)
* replaces ( ADDR1 LEN1 ADDR2 LEN2 -- ) string-ext: Substitute.
                                                              (line  17)
* reposition-file ( UD WFILEID -- WIOR ) file: General files. (line  82)
* represent ( R C-ADDR U -- N F1 F2 ) floating: Floating-point output.
                                                              (line  96)
* require ( ... "FILE" -- ... ) file-ext: Forth source files. (line  55)
* required ( I*X ADDR U -- I*X ) file-ext: Forth source files.
                                                              (line  49)
* resize ( A_ADDR1 U -- A_ADDR2 WIOR ) memory: Heap Allocation.
                                                              (line  29)
* resize-file ( UD WFILEID -- WIOR ) file: General files.     (line  86)
* resized ( -- ) minos2:                 widget methods.      (line 108)
* restart ( TASK -- ) gforth-experimental: Basic multi-tasking.
                                                              (line  87)
* restore ( COMPILATION ORIG1 -- ; RUN-TIME -- ) gforth-0.7: Exception Handling.
                                                              (line 207)
* restore-input ( X1 .. XN N -- FLAG ) core-ext: Input Sources.
                                                              (line  32)
* restrict ( -- ) gforth-0.2:            Interpretation and Compilation Semantics.
                                                              (line  56)
* return-stack-cells ( -- N ) environment: Environmental Queries.
                                                              (line  63)
* reveal ( -- ) gforth-0.2:              Creating from a prototype.
                                                              (line  35)
* rol ( U1 U -- U2 ) gforth-1.0:         Bitwise operations.  (line  91)
* roll ( X0 X1 .. XN N -- X1 .. XN X0 ) core-ext: Data stack. (line  33)
* Root ( -- ) gforth-0.2:                Word Lists.          (line 140)
* ror ( U1 U -- U2 ) gforth-1.0:         Bitwise operations.  (line  94)
* rot ( W1 W2 W3 -- W2 W3 W1 ) core:     Data stack.          (line  25)
* rp! ( A-ADDR -- ) gforth-0.2:          Stack pointer manipulation.
                                                              (line  25)
* rp0 ( -- A-ADDR ) gforth-0.4:          Stack pointer manipulation.
                                                              (line  20)
* rp@ ( -- A-ADDR ) gforth-0.2:          Stack pointer manipulation.
                                                              (line  23)
* rshift ( U1 U -- U2 ) core:            Bitwise operations.  (line  22)
* S" ( COMPILATION 'CCC"' -- ; RUN-TIME -- C-ADDR U ) core,file: String and character literals.
                                                              (line  29)
* s+ ( C-ADDR1 U1 C-ADDR2 U2 -- C-ADDR U ) gforth-0.7: String words.
                                                              (line  79)
* s// ( ADDR U -- PTR ) regexp-replace:  Regular Expressions. (line 178)
* s>> ( ADDR -- ADDR ) regexp-replace:   Regular Expressions. (line 165)
* s>d ( N -- D ) core:                   Double precision.    (line  21)
* s>f ( N -- R ) floating-ext:           Floating Point.      (line  24)
* s>number? ( ADDR U -- D F ) gforth-0.5: Line input and conversion.
                                                              (line  24)
* s>unumber? ( C-ADDR U -- UD FLAG ) gforth-0.5: Line input and conversion.
                                                              (line  27)
* safe/string ( C-ADDR1 U1 N -- C-ADDR2 U2 ) gforth-1.0: String words.
                                                              (line  49)
* save-buffer ( BUFFER -- ) gforth-0.2:  Blocks.              (line 179)
* save-buffers ( -- ) block:             Blocks.              (line 175)
* save-cov ( -- ) gforth-experimental:   Code Coverage.       (line  65)
* save-input ( -- X1 .. XN N ) core-ext: Input Sources.       (line  27)
* save-mem ( ADDR1 U -- ADDR2 U ) gforth-0.2: Heap Allocation.
                                                              (line  39)
* savesystem ( "IMAGE" -- ) gforth-0.2:  Non-Relocatable Image Files.
                                                              (line  20)
* scan ( C-ADDR1 U1 C -- C-ADDR2 U2 ) gforth-0.2: String words.
                                                              (line  29)
* scan-back ( C-ADDR U1 C -- C-ADDR U2 ) gforth-0.7: String words.
                                                              (line  34)
* scope ( COMPILATION -- SCOPE ; RUN-TIME -- ) gforth-0.2: Where are locals visible by name?.
                                                              (line  11)
* scr ( -- A-ADDR ) block-ext:           Blocks.              (line 142)
* scrolled ( AXIS DIR -- ) minos2:       actor methods.       (line  18)
* seal ( -- ) gforth-0.2:                Word Lists.          (line 150)
* search ( C-ADDR1 U1 C-ADDR2 U2 -- C-ADDR3 U3 FLAG ) string: String words.
                                                              (line  23)
* search-wordlist ( C-ADDR COUNT WID -- 0 | XT +-1 ) search: Word Lists.
                                                              (line 116)
* see ( "<SPACES>NAME" -- ) tools:       Examining compiled code.
                                                              (line  11)
* see-code ( "NAME" -- ) gforth-0.7:     Examining compiled code.
                                                              (line  30)
* see-code-range ( ADDR1 ADDR2 -- ) gforth-0.7: Examining compiled code.
                                                              (line  44)
* select ( U1 U2 F -- U ) gforth-1.0:    Boolean Flags.       (line  23)
* selector ( "NAME" -- ) objects:        Objects Glossary.    (line 140)
* semaphore ( "NAME" -- ) gforth-experimental: Semaphores.    (line  14)
* send-event ( XT TASK -- ) gforth-experimental: Message queues.
                                                              (line  13)
* set ( SOMETHING -- ) minos2:           actor methods.       (line  57)
* set->comp ( XT -- ) gforth-1.0:        Header methods.      (line 164)
* set->int ( XT -- ) gforth-1.0:         Header methods.      (line 152)
* set-current ( WID -- ) search:         Word Lists.          (line  41)
* set-dir ( C-ADDR U -- WIOR ) gforth-0.7: Directories.       (line  47)
* set-does> ( XT -- ) gforth-1.0:        CREATE..DOES> details.
                                                              (line  69)
* set-execute ( CA -- ) gforth-1.0:      Header methods.      (line  41)
* set-forth-recognize ( XT -- ) recognizer: Dealing with existing Recognizers.
                                                              (line  84)
* set-name>link ( XT -- ) gforth-1.0:    Header methods.      (line 183)
* set-name>string ( XT -- ) gforth-1.0:  Header methods.      (line 179)
* set-optimizer ( XT -- ) gforth-1.0:    User-defined compile-comma.
                                                              (line   8)
* set-order ( WIDN .. WID1 N -- ) search: Word Lists.         (line  50)
* set-precision ( U -- ) floating-ext:   Floating-point output.
                                                              (line  38)
* set-recognizers ( XT1 .. XTN N -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  67)
* set-to ( TO-XT -- ) gforth-1.0:        User-defined TO and DEFER@.
                                                              (line  25)
* sf! ( R SF-ADDR -- ) floating-ext:     Memory Access.       (line  38)
* sf@ ( SF-ADDR -- R ) floating-ext:     Memory Access.       (line  34)
* sfalign ( -- ) floating-ext:           Dictionary allocation.
                                                              (line  90)
* sfaligned ( C-ADDR -- SF-ADDR ) floating-ext: Address arithmetic.
                                                              (line  92)
* sffield: ( U1 "NAME" -- U2 ) floating-ext: Forth200x Structures.
                                                              (line  65)
* sfloat% ( -- ALIGN SIZE ) gforth-0.4:  Structure Glossary.  (line  46)
* sfloat+ ( SF-ADDR1 -- SF-ADDR2 ) floating-ext: Address arithmetic.
                                                              (line  87)
* sfloat/ ( N1 -- N2 ) gforth-1.0:       Address arithmetic.  (line  90)
* sfloats ( N1 -- N2 ) floating-ext:     Address arithmetic.  (line  83)
* sh ( "..." -- ) gforth-0.2:            Passing Commands to the OS.
                                                              (line   9)
* sh-get ( C-ADDR U -- C-ADDR2 U2 ) gforth-1.0: Passing Commands to the OS.
                                                              (line  21)
* shift-args ( -- ) gforth-0.7:          OS command line arguments.
                                                              (line  49)
* short-where ( -- ) gforth-1.0:         Locating uses of a word.
                                                              (line  40)
* show ( -- ) minos2:                    actor methods.       (line  48)
* show-you ( -- ) minos2:                actor methods.       (line  60)
* sign ( N -- ) core:                    Formatted numeric output.
                                                              (line  70)
* simple-fkey-string ( U1 -- C-ADDR U ) gforth-1.0: Single-key input.
                                                              (line 183)
* simple-see ( "NAME" -- ) gforth-0.6:   Examining compiled code.
                                                              (line  20)
* simple-see-range ( ADDR1 ADDR2 -- ) gforth-0.6: Examining compiled code.
                                                              (line  27)
* skip ( C-ADDR1 U1 C -- C-ADDR2 U2 ) gforth-0.2: String words.
                                                              (line  36)
* SLiteral ( COMPILATION C-ADDR1 U ; RUN-TIME -- C-ADDR2 U ) string: Literals.
                                                              (line  65)
* slurp-fid ( FID -- ADDR U ) gforth-0.6: General files.      (line  91)
* slurp-file ( C-ADDR1 U1 -- C-ADDR2 U2 ) gforth-0.6: General files.
                                                              (line  88)
* sm/rem ( D1 N1 -- N2 N3 ) core:        Integer division.    (line  82)
* source ( -- ADDR U ) core:             The Text Interpreter.
                                                              (line 126)
* source-id ( -- 0 | -1 | FILEID ) core-ext,file: Input Sources.
                                                              (line  18)
* sourcefilename ( -- C-ADDR U ) gforth-0.2: Forth source files.
                                                              (line  67)
* sourceline# ( -- U ) gforth-0.2:       Forth source files.  (line  74)
* sp! ( A-ADDR -- S:... ) gforth-0.2:    Stack pointer manipulation.
                                                              (line  11)
* sp0 ( -- A-ADDR ) gforth-0.4:          Stack pointer manipulation.
                                                              (line   6)
* sp@ ( S:... -- A-ADDR ) gforth-0.2:    Stack pointer manipulation.
                                                              (line   9)
* space ( -- ) core:                     Miscellaneous output.
                                                              (line  12)
* spaces ( U -- ) core:                  Miscellaneous output.
                                                              (line  15)
* span ( -- C-ADDR ) core-ext-obsolescent: Line input and conversion.
                                                              (line  72)
* spawn ( XT -- ) cilk:                  Cilk.                (line  34)
* spawn1 ( X XT -- ) cilk:               Cilk.                (line  40)
* spawn2 ( X1 X2 XT -- ) cilk:           Cilk.                (line  43)
* split ( FIRSTFLAG RSTART1 RX -- O RSTART2 ) minos2: widget methods.
                                                              (line  63)
* stack-cells ( -- N ) environment:      Environmental Queries.
                                                              (line  66)
* stacksize ( -- U ) gforth-experimental: Basic multi-tasking.
                                                              (line  25)
* stacksize4 ( -- U-DATA U-RETURN U-FP U-LOCALS ) gforth-experimental: Basic multi-tasking.
                                                              (line  28)
* staged/-divisor ( ADDR1 -- ADDR2 ) gforth-1.0: Two-stage integer division.
                                                              (line  91)
* staged/-size ( -- U ) gforth-1.0:      Two-stage integer division.
                                                              (line  49)
* static ( -- ) oof:                     Class Declaration.   (line  34)
* status-color ( -- ) gforth-1.0:        Terminal output.     (line  60)
* stderr ( -- WFILEID ) gforth-0.2:      General files.       (line 100)
* stdin ( -- WFILEID ) gforth-0.4:       General files.       (line  94)
* stdout ( -- WFILEID ) gforth-0.2:      General files.       (line  97)
* stop ( -- ) gforth-experimental:       Basic multi-tasking. (line  78)
* stop-ns ( TIMEOUT -- ) gforth-experimental: Basic multi-tasking.
                                                              (line  81)
* str< ( C-ADDR1 U1 C-ADDR2 U2 -- F ) gforth-0.6: String words.
                                                              (line  15)
* str= ( C-ADDR1 U1 C-ADDR2 U2 -- F ) gforth-0.6: String words.
                                                              (line  13)
* str=? ( ADDR1 ADDR U -- ADDR2 ) regexp-pattern: Regular Expressions.
                                                              (line 102)
* string, ( C-ADDR U -- ) gforth-0.2:    Counted string words.
                                                              (line  26)
* string-parse ( C-ADDR1 U1 "CCC<STRING>" -- C-ADDR2 U2 ) gforth-1.0: The Input Stream.
                                                              (line  30)
* string-prefix? ( C-ADDR1 U1 C-ADDR2 U2 -- F ) gforth-0.6: String words.
                                                              (line  17)
* string-suffix? ( C-ADDR1 U1 C-ADDR2 U2 -- F ) gforth-1.0: String words.
                                                              (line  20)
* struct ( -- ALIGN SIZE ) gforth-0.2:   Structure Glossary.  (line  51)
* sub-list? ( LIST1 LIST2 -- F ) gforth-internal: Locals implementation.
                                                              (line  96)
* substitute ( ADDR1 LEN1 ADDR2 LEN2 -- ADDR2 LEN3 N/IOR ) string-ext: Substitute.
                                                              (line  29)
* success-color ( -- ) gforth-1.0:       Terminal output.     (line  54)
* swap ( W1 W2 -- W2 W1 ) core:          Data stack.          (line  20)
* Synonym ( "NAME" "OLDNAME" -- ) tools-ext: Aliases.         (line  17)
* system ( C-ADDR U -- ) gforth-0.2:     Passing Commands to the OS.
                                                              (line  13)
* s\" ( COMPILATION 'CCC"' -- ; RUN-TIME -- C-ADDR U ) core-ext,file-ext: String and character literals.
                                                              (line  11)
* table ( -- WID ) gforth-0.2:           Word Lists.          (line  61)
* task ( USTACKSIZE "NAME" -- ) gforth-experimental: Basic multi-tasking.
                                                              (line  13)
* text-color: ( RGBA "NAME" -- ) minos2: widget methods.      (line 134)
* text-emoji-color: ( RGBATEXT RGBAEMOJI "NAME" -- ) minos2: widget methods.
                                                              (line 138)
* text-emoji-fade-color: ( RGBATEXT1 ~2 RGBAEMOJI1 ~2 "NAME" -- ) minos2: widget methods.
                                                              (line 148)
* THEN ( COMPILATION ORIG -- ; RUN-TIME -- ) core: Arbitrary control structures.
                                                              (line  25)
* third ( W1 W2 W3 -- W1 W2 W3 W1 ) gforth-1.0: Data stack.   (line  14)
* this ( -- OBJECT ) objects:            Objects Glossary.    (line 145)
* threading-method ( -- N ) gforth-0.2:  Threading Words.     (line  69)
* throw ( Y1 .. YM NERROR -- Y1 .. YM / Z1 .. ZN ERROR ) exception: Exception Handling.
                                                              (line  10)
* thru ( I*X N1 N2 -- J*X ) block-ext:   Blocks.              (line 187)
* tib ( -- ADDR ) core-ext-obsolescent:  The Text Interpreter.
                                                              (line 129)
* time&date ( -- NSEC NMIN NHOUR NDAY NMONTH NYEAR ) facility-ext: Keeping track of Time.
                                                              (line  10)
* TO ( VALUE "NAME" -- ) core-ext:       Values.              (line  33)
* to-method: ( XT TABLE "NAME" -- ) gforth-experimental: User-defined TO and DEFER@.
                                                              (line  21)
* to-table: ( "NAME" "XT1" .. "XTN" -- ) gforth-experimental: User-defined TO and DEFER@.
                                                              (line  17)
* to-this ( OBJECT -- ) objects:         Objects Glossary.    (line 154)
* touchdown ( $RXY*N BMASK -- ) minos2:  actor methods.       (line  21)
* touchup ( $RXY*N BMASK -- ) minos2:    actor methods.       (line  24)
* toupper ( C1 -- C2 ) gforth-0.2:       Characters.          (line  29)
* translate-dnum ( DX -- | DX ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  97)
* translate-method: ( "NAME" -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line 116)
* translate-nt ( I*X NT -- J*X ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  91)
* translate-num ( X -- | X ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  94)
* translate-state ( XT -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line 121)
* translate: ( INT-XT COMP-XT POST-XT "NAME" -- ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line  87)
* traverse-wordlist ( ... XT WID -- ... ) tools-ext: Name token.
                                                              (line  48)
* true ( -- F ) core-ext:                Boolean Flags.       (line  11)
* try ( COMPILATION -- ORIG ; RUN-TIME -- R:SYS1 ) gforth-0.5: Exception Handling.
                                                              (line 129)
* try-recognize ( ADDR U XT -- RESULTS | FALSE ) gforth-experimental: Dealing with existing Recognizers.
                                                              (line 100)
* tt ( U -- ) gforth-1.0:                Locating exception source.
                                                              (line   6)
* tuck ( W1 W2 -- W2 W1 W2 ) core-ext:   Data stack.          (line  18)
* type ( C-ADDR U -- ) core:             Displaying characters and strings.
                                                              (line   6)
* typewhite ( ADDR N -- ) gforth-0.2:    Displaying characters and strings.
                                                              (line  17)
* u*/ ( U1 U2 U3 -- U4 ) gforth-1.0:     Integer division.    (line 100)
* u*/mod ( U1 U2 U3 -- U4 U5 ) gforth-1.0: Integer division.  (line 115)
* U+DO ( COMPILATION -- DO-SYS ; RUN-TIME U1 U2 -- | LOOP-SYS ) gforth-0.2: Counted Loops.
                                                              (line 183)
* U-DO ( COMPILATION -- DO-SYS ; RUN-TIME U1 U2 -- | LOOP-SYS ) gforth-0.2: Counted Loops.
                                                              (line 204)
* u-[do ( COMPILATION -- DO-SYS ; RUN-TIME U1 U2 -- | LOOP-SYS ) gforth-experimental: Counted Loops.
                                                              (line 196)
* u. ( U -- ) core:                      Simple numeric output.
                                                              (line  26)
* u.r ( U N -- ) core-ext:               Simple numeric output.
                                                              (line  36)
* u/ ( U1 U2 -- U ) gforth-1.0:          Integer division.    (line  51)
* u/-stage1m ( U ADDR-RECI -- ) gforth-1.0: Two-stage integer division.
                                                              (line  69)
* u/-stage2m ( U1 A-RECI -- UQUOTIENT ) gforth-1.0: Two-stage integer division.
                                                              (line  73)
* u/mod ( U1 U2 -- U3 U4 ) gforth-1.0:   Integer division.    (line  71)
* u/mod-stage2m ( U1 A-RECI -- UMODULUS UQUOTIENT ) gforth-1.0: Two-stage integer division.
                                                              (line  81)
* u< ( U1 U2 -- F ) core:                Numeric comparison.  (line  33)
* u<= ( U1 U2 -- F ) gforth-0.2:         Numeric comparison.  (line  35)
* u> ( U1 U2 -- F ) core-ext:            Numeric comparison.  (line  37)
* u>= ( U1 U2 -- F ) gforth-0.2:         Numeric comparison.  (line  39)
* uallot ( N1 -- N2 ) gforth-0.3:        Task-local data.     (line  21)
* ud. ( UD -- ) gforth-0.2:              Simple numeric output.
                                                              (line  47)
* ud.r ( UD N -- ) gforth-0.2:           Simple numeric output.
                                                              (line  56)
* ud/mod ( UD1 U2 -- UREM UDQUOT ) gforth-0.2: Integer division.
                                                              (line 121)
* UDefer ( "NAME" -- ) gforth-1.0:       Task-local data.     (line  29)
* ukeyed ( ADDR U -- ) minos2:           actor methods.       (line  27)
* um* ( U1 U2 -- UD ) core:              Mixed precision.     (line  10)
* um/mod ( UD U1 -- U2 U3 ) core:        Integer division.    (line  85)
* umax ( U1 U2 -- U ) gforth-1.0:        Single precision.    (line  37)
* umin ( U1 U2 -- U ) gforth-0.5:        Single precision.    (line  35)
* umod ( U1 U2 -- U ) gforth-1.0:        Integer division.    (line  60)
* umod-stage2m ( U1 A-RECI -- UMODULUS ) gforth-1.0: Two-stage integer division.
                                                              (line  77)
* uncolored-mode ( -- ) gforth-1.0:      Terminal output.     (line  75)
* under+ ( N1 N2 N3 -- N N2 ) gforth-0.3: Single precision.   (line  18)
* unescape ( ADDR1 U1 DEST -- DEST U2 ) string-ext: Substitute.
                                                              (line  34)
* unlock ( SEMAPHORE -- ) gforth-experimental: Semaphores.    (line  21)
* unloop ( R:W1 R:W2 -- ) core:          Counted Loops.       (line 257)
* UNREACHABLE ( -- ) gforth-0.2:         Where are locals visible by name?.
                                                              (line  49)
* UNTIL ( COMPILATION DEST -- ; RUN-TIME F -- ) core: Arbitrary control structures.
                                                              (line  33)
* unused ( -- U ) core-ext:              Dictionary allocation.
                                                              (line  27)
* unused-words ( -- ) gforth-1.0:        Locating uses of a word.
                                                              (line  54)
* up@ ( -- A-ADDR ) new:                 Task-local data.     (line  35)
* update ( -- ) block:                   Blocks.              (line 168)
* updated? ( N -- F ) gforth-0.2:        Blocks.              (line 171)
* use ( "FILE" -- ) gforth-0.2:          Blocks.              (line 122)
* User ( "NAME" -- ) gforth-0.2:         Task-local data.     (line  12)
* user' ( "NAME" -- U ) gforth-experimental: Task-local data. (line  39)
* utime ( -- DTIME ) gforth-0.5:         Keeping track of Time.
                                                              (line  19)
* UValue ( "NAME" -- ) gforth-1.0:       Task-local data.     (line  25)
* v* ( F-ADDR1 NSTRIDE1 F-ADDR2 NSTRIDE2 UCOUNT -- R ) gforth-0.5: Floating Point.
                                                              (line  95)
* Value ( W "NAME" -- ) core-ext:        Values.              (line  17)
* var ( M V SIZE "NAME" -- M V' ) mini-oof: Basic Mini-OOF Usage.
                                                              (line  17)
* var ( SIZE -- ) oof:                   Class Declaration.   (line   8)
* Variable ( "NAME" -- ) core:           Variables.           (line  31)
* Varue ( W "NAME" -- ) gforth-1.0:      Varues.              (line  11)
* vglue ( -- RTYP RSUB RADD ) minos2:    widget methods.      (line  75)
* vglue@ ( -- RTYP RSUB RADD ) minos2:   widget methods.      (line  84)
* vlist ( -- ) gforth-0.2:               Word Lists.          (line 128)
* Vocabulary ( "NAME" -- ) gforth-0.2:   Word Lists.          (line 145)
* vocs ( -- ) gforth-0.2:                Word Lists.          (line 154)
* vp-bottom ( O:VP -- ) minos2:          widget methods.      (line 182)
* vp-left ( O:VP -- ) minos2:            widget methods.      (line 185)
* vp-needed ( XT -- ) minos2:            widget methods.      (line 194)
* vp-reslide ( O:VP -- ) minos2:         widget methods.      (line 191)
* vp-right ( O:VP -- ) minos2:           widget methods.      (line 188)
* vp-top ( O:VP -- ) minos2:             widget methods.      (line 179)
* w ( -- R ) minos2:                     widget methods.      (line  21)
* w! ( W C-ADDR -- ) gforth-0.7:         Special Memory Accesses.
                                                              (line  39)
* w, ( W -- ) gforth-1.0:                Dictionary allocation.
                                                              (line  55)
* w-color ( -- R ) minos2:               widget methods.      (line  54)
* w/o ( -- FAM ) file:                   General files.       (line  13)
* W: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME X -- ) gforth-0.2: Locals definition words.
                                                              (line  34)
* w>s ( X -- N ) gforth-1.0:             Special Memory Accesses.
                                                              (line 103)
* w@ ( C-ADDR -- U ) gforth-0.5:         Special Memory Accesses.
                                                              (line  36)
* WA: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME X -- ) gforth-1.0: Locals definition words.
                                                              (line  37)
* walign ( -- ) gforth-1.0:              Address arithmetic.  (line 127)
* waligned ( ADDR -- ADDR' ) gforth-1.0: Address arithmetic.  (line 124)
* WARNING" ( COMPILATION 'CCC"' -- ; RUN-TIME F -- ) gforth-1.0: Exception Handling.
                                                              (line 254)
* warning-color ( -- ) gforth-1.0:       Terminal output.     (line  48)
* warnings ( -- ADDR ) gforth-0.2:       Exception Handling.  (line 257)
* wbe ( U1 -- U2 ) gforth-1.0:           Special Memory Accesses.
                                                              (line  65)
* wfield: ( U1 "NAME" -- U2 ) gforth-1.0: Forth200x Structures.
                                                              (line  71)
* where ( "NAME" -- ) gforth-1.0:        Locating uses of a word.
                                                              (line   6)
* whereg ( "NAME" -- ) gforth-1.0:       Locating uses of a word.
                                                              (line  35)
* WHILE ( COMPILATION DEST -- ORIG DEST ; RUN-TIME F -- ) core: Arbitrary control structures.
                                                              (line  63)
* widget ( -- CLASS ) minos2:            MINOS2 object framework.
                                                              (line  17)
* within ( U1 U2 U3 -- F ) core-ext:     Numeric comparison.  (line  41)
* wle ( U1 -- U2 ) gforth-1.0:           Special Memory Accesses.
                                                              (line  69)
* word ( CHAR "<CHARS>CCC<CHAR>-- C-ADDR ) core: The Input Stream.
                                                              (line  45)
* wordlist ( -- WID ) search:            Word Lists.          (line  58)
* wordlist-words ( WID -- ) gforth-0.6:  Word Lists.          (line 131)
* wordlists ( -- N ) environment:        Environmental Queries.
                                                              (line  76)
* words ( -- ) tools:                    Word Lists.          (line 124)
* wrap-xt ( XT1 XT2 XT: XT3 -- ... ) gforth-1.0: Deferred Words.
                                                              (line 102)
* write-file ( C-ADDR U1 WFILEID -- WIOR ) file: General files.
                                                              (line  70)
* write-line ( C-ADDR U WFILEID -- IOR ) file: General files. (line  72)
* wrol ( U1 U -- U2 ) gforth-1.0:        Bitwise operations.  (line  75)
* wror ( U1 U -- U2 ) gforth-1.0:        Bitwise operations.  (line  79)
* WTF?? ( -- ) gforth-1.0:               Debugging.           (line  59)
* ww ( U -- ) gforth-1.0:                Locating uses of a word.
                                                              (line  12)
* W^ ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME X -- ) gforth-0.2: Locals definition words.
                                                              (line  40)
* x ( -- R ) minos2:                     widget methods.      (line  15)
* x! ( W C-ADDR -- ) gforth-1.0:         Special Memory Accesses.
                                                              (line  51)
* x, ( X -- ) gforth-1.0:                Dictionary allocation.
                                                              (line  59)
* x-size ( XC-ADDR U1 -- U2 ) xchar:     Xchars and Unicode.  (line  52)
* x-width ( XC-ADDR U -- N ) xchar-ext:  Xchars and Unicode.  (line 106)
* x>s ( X -- N ) gforth-1.0:             Special Memory Accesses.
                                                              (line 109)
* x@ ( C-ADDR -- U ) gforth-1.0:         Special Memory Accesses.
                                                              (line  48)
* xalign ( -- ) gforth-1.0:              Address arithmetic.  (line 139)
* xaligned ( ADDR -- ADDR' ) gforth-1.0: Address arithmetic.  (line 136)
* xbe ( U1 -- U2 ) gforth-1.0:           Special Memory Accesses.
                                                              (line  81)
* xc!+ ( XC XC-ADDR1 -- XC-ADDR2 ) xchar: Xchars and Unicode. (line  75)
* xc!+? ( XC XC-ADDR1 U1 -- XC-ADDR2 U2 F ) xchar: Xchars and Unicode.
                                                              (line  67)
* xc, ( XCHAR -- ) xchar:                Xchars and Unicode.  (line 123)
* xc-size ( XC -- U ) xchar:             Xchars and Unicode.  (line  49)
* xc-width ( XC -- N ) xchar-ext:        Xchars and Unicode.  (line 116)
* xc@ ( XC-ADDR -- XC ) xchar-ext:       Xchars and Unicode.  (line  56)
* xc@+ ( XC-ADDR1 -- XC-ADDR2 XC ) xchar: Xchars and Unicode. (line  59)
* xc@+? ( XC-ADDR1 U1 -- XC-ADDR2 U2 XC ) gforth-experimental: Xchars and Unicode.
                                                              (line  63)
* xchar+ ( XC-ADDR1 -- XC-ADDR2 ) xchar: Xchars and Unicode.  (line  82)
* xchar- ( XC-ADDR1 -- XC-ADDR2 ) xchar-ext: Xchars and Unicode.
                                                              (line  86)
* XCHAR-ENCODING ( -- ADDR U ) environment: Environmental Queries.
                                                              (line  83)
* XCHAR-MAXMEM ( -- U ) environment:     Environmental Queries.
                                                              (line  93)
* xd! ( UD C-ADDR -- ) gforth-1.0:       Special Memory Accesses.
                                                              (line  57)
* xd, ( XD -- ) gforth-1.0:              Dictionary allocation.
                                                              (line  61)
* xd>s ( XD -- D ) gforth-1.0:           Special Memory Accesses.
                                                              (line 112)
* xd@ ( C-ADDR -- UD ) gforth-1.0:       Special Memory Accesses.
                                                              (line  54)
* xdbe ( UD1 -- UD2 ) gforth-1.0:        Special Memory Accesses.
                                                              (line  89)
* xdle ( UD1 -- UD2 ) gforth-1.0:        Special Memory Accesses.
                                                              (line  93)
* xemit ( XC -- ) xchar:                 Displaying characters and strings.
                                                              (line  10)
* xfield: ( U1 "NAME" -- U2 ) gforth-1.0: Forth200x Structures.
                                                              (line  77)
* xhold ( XC -- ) xchar-ext:             Xchars and Unicode.  (line 119)
* xkey ( -- XC ) xchar:                  Xchars and Unicode.  (line 112)
* xkey? ( -- FLAG ) xchar:               Single-key input.    (line  22)
* xle ( U1 -- U2 ) gforth-1.0:           Special Memory Accesses.
                                                              (line  85)
* xor ( W1 W2 -- W ) core:               Bitwise operations.  (line  10)
* xt-new ( ... CLASS XT -- OBJECT ) objects: Objects Glossary.
                                                              (line 157)
* xt-see ( XT -- ) gforth-0.2:           Examining compiled code.
                                                              (line  17)
* xt-see-code ( XT -- ) gforth-1.0:      Examining compiled code.
                                                              (line  41)
* xt-simple-see ( XT -- ) gforth-1.0:    Examining compiled code.
                                                              (line  24)
* XT: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME XT1 -- ) gforth-1.0: Locals definition words.
                                                              (line  70)
* xt>name ( XT -- NT ) gforth-1.0:       Name token.          (line  42)
* XTA: ( COMPILATION "NAME" -- A-ADDR XT; RUN-TIME ... -- ... ) gforth-1.0: Locals definition words.
                                                              (line  73)
* xywh ( -- RX0 RY0 RW RH ) minos2:      widget methods.      (line  87)
* xywhd ( -- RX RY RW RH RD ) minos2:    widget methods.      (line  90)
* x\string- ( XC-ADDR U1 -- XC-ADDR U2 ) xchar-ext: Xchars and Unicode.
                                                              (line  95)
* y ( -- R ) minos2:                     widget methods.      (line  18)


File: gforth.info,  Node: Concept Index,  Prev: Word Index,  Up: Top

Concept and Word Index
**********************

Not all entries listed in this index are present verbatim in the text.
This index also duplicates, in abbreviated form, all of the words listed
in the Word Index (only the names are listed for the words here).

 [index ]
* Menu:

* !:                                     Memory Access.       (line   9)
* !!FIXME!!:                             Debugging.           (line  62)
* !@:                                    Hardware operations for multi-tasking.
                                                              (line  13)
* !resize:                               widget methods.      (line  93)
* !size:                                 widget methods.      (line  96)
* ", stack item type:                    Notation.            (line 117)
* #:                                     Formatted numeric output.
                                                              (line  51)
* #!:                                    Running Image Files. (line  68)
* #-prefix for decimal numbers:          Literals in source code.
                                                              (line  15)
* #>:                                    Formatted numeric output.
                                                              (line  74)
* #>>:                                   Formatted numeric output.
                                                              (line  81)
* #bell:                                 String and character literals.
                                                              (line  91)
* #bs:                                   String and character literals.
                                                              (line  87)
* #cr:                                   String and character literals.
                                                              (line  83)
* #del:                                  String and character literals.
                                                              (line  89)
* #eof:                                  String and character literals.
                                                              (line  95)
* #esc:                                  String and character literals.
                                                              (line  93)
* #ff:                                   String and character literals.
                                                              (line  85)
* #lf:                                   String and character literals.
                                                              (line  81)
* #line:                                 Interpreter Directives.
                                                              (line  99)
* #loc:                                  Debugging.           (line  80)
* #locals:                               Environmental Queries.
                                                              (line  73)
* #s:                                    Formatted numeric output.
                                                              (line  56)
* #tab:                                  String and character literals.
                                                              (line  79)
* #tib:                                  The Text Interpreter.
                                                              (line 131)
* $!:                                    $tring words.        (line  24)
* $!len:                                 $tring words.        (line  34)
* $+!:                                   $tring words.        (line  48)
* $+!len:                                $tring words.        (line  38)
* $+slurp:                               $tring words.        (line  89)
* $+slurp-file:                          $tring words.        (line  93)
* $+[]!:                                 $tring words.        (line 108)
* $-prefix for hexadecimal numbers:      Literals in source code.
                                                              (line  15)
* $.:                                    $tring words.        (line  79)
* $?:                                    Passing Commands to the OS.
                                                              (line  25)
* $@:                                    $tring words.        (line  28)
* $@len:                                 $tring words.        (line  31)
* $boot:                                 $tring words.        (line 143)
* $del:                                  $tring words.        (line  42)
* $exec:                                 $tring words.        (line  72)
* $free:                                 $tring words.        (line  54)
* $init:                                 $tring words.        (line  57)
* $ins:                                  $tring words.        (line  45)
* $iter:                                 $tring words.        (line  64)
* $over:                                 $tring words.        (line  69)
* $save:                                 $tring words.        (line 137)
* $saved:                                $tring words.        (line 150)
* $slurp:                                $tring words.        (line  82)
* $slurp-file:                           $tring words.        (line  86)
* $split:                                $tring words.        (line  60)
* $substitute:                           Substitute.          (line  25)
* $tmp:                                  $tring words.        (line  76)
* $unescape:                             Substitute.          (line  40)
* $Variable:                             $tring words.        (line 156)
* $[]:                                   $tring words.        (line  96)
* $[]!:                                  $tring words.        (line 100)
* $[]#:                                  $tring words.        (line 116)
* $[]+!:                                 $tring words.        (line 104)
* $[].:                                  $tring words.        (line 129)
* $[]@:                                  $tring words.        (line 112)
* $[]boot:                               $tring words.        (line 147)
* $[]free:                               $tring words.        (line 132)
* $[]map:                                $tring words.        (line 119)
* $[]save:                               $tring words.        (line 140)
* $[]saved:                              $tring words.        (line 153)
* $[]slurp:                              $tring words.        (line 123)
* $[]slurp-file:                         $tring words.        (line 126)
* $[]Variable:                           $tring words.        (line 159)
* %-prefix for binary numbers:           Literals in source code.
                                                              (line  15)
* %align:                                Structure Glossary.  (line   6)
* %alignment:                            Structure Glossary.  (line   9)
* %alloc:                                Structure Glossary.  (line  12)
* %allocate:                             Structure Glossary.  (line  16)
* %allot:                                Structure Glossary.  (line  20)
* %size:                                 Structure Glossary.  (line  48)
* &-prefix for decimal numbers:          Literals in source code.
                                                              (line  15)
* ':                                     Execution token.     (line  24)
* ’-prefix for characters/code points:   Literals in source code.
                                                              (line  43)
* 'cold:                                 Modifying the Startup Sequence.
                                                              (line  47)
* 's:                                    Task-local data.     (line  43)
* (:                                     Comments.            (line   9)
* ((:                                    Regular Expressions. (line  28)
* (local):                               Standard Forth locals.
                                                              (line  23)
* (to):                                  User-defined TO and DEFER@.
                                                              (line  13)
* ):                                     Assertions.          (line  46)
* )):                                    Regular Expressions. (line  31)
* *:                                     Single precision.    (line  25)
* **}:                                   Regular Expressions. (line 113)
* */:                                    Integer division.    (line  91)
* */f:                                   Integer division.    (line  97)
* */mod:                                 Integer division.    (line 103)
* */modf:                                Integer division.    (line 111)
* */mods:                                Integer division.    (line 107)
* */s:                                   Integer division.    (line  94)
* *align:                                Address arithmetic.  (line 121)
* *aligned:                              Address arithmetic.  (line 117)
* *}:                                    Regular Expressions. (line 125)
* +:                                     Single precision.    (line  14)
* +!:                                    Memory Access.       (line  12)
* +!@:                                   Hardware operations for multi-tasking.
                                                              (line  16)
* ++}:                                   Regular Expressions. (line 119)
* +char:                                 Regular Expressions. (line  42)
* +chars:                                Regular Expressions. (line  51)
* +class:                                Regular Expressions. (line  54)
* +DO:                                   Counted Loops.       (line 180)
* +field:                                Forth200x Structures.
                                                              (line  49)
* +fmode:                                General files.       (line  17)
* +load:                                 Blocks.              (line 190)
* +LOOP:                                 Counted Loops.       (line 227)
* +ltrace:                               Debugging.           (line  74)
* +thru:                                 Blocks.              (line 194)
* +TO:                                   Values.              (line  36)
* +x/string:                             Xchars and Unicode.  (line  90)
* +}:                                    Regular Expressions. (line 131)
* ,:                                     Dictionary allocation.
                                                              (line  48)
* -:                                     Single precision.    (line  21)
* –, tutorial:                           Stack-Effect Comments Tutorial.
                                                              (line   6)
* --:                                    Locals definition words.
                                                              (line  14)
* -->:                                   Blocks.              (line 198)
* ->here:                                Dictionary allocation.
                                                              (line  38)
* –appl-image, command-line option:      Invoking Gforth.     (line  37)
* –application, gforthmi option:         gforthmi.            (line  34)
* -c?:                                   Regular Expressions. (line  67)
* -char:                                 Regular Expressions. (line  45)
* -class:                                Regular Expressions. (line  57)
* –clear-dictionary, command-line option: Invoking Gforth.    (line 135)
* -d, command-line option:               Invoking Gforth.     (line  65)
* –data-stack-size, command-line option: Invoking Gforth.     (line  65)
* –debug, command-line option:           Invoking Gforth.     (line 124)
* -DFORCE_REG:                           Portability.         (line  40)
* –dictionary-size, command-line option: Invoking Gforth.     (line  55)
* –die-on-signal, command-line-option:   Invoking Gforth.     (line 139)
* -DO:                                   Counted Loops.       (line 201)
* -DUSE_FTOS:                            TOS Optimization.    (line  27)
* -DUSE_NO_FTOS:                         TOS Optimization.    (line  27)
* -DUSE_NO_TOS:                          TOS Optimization.    (line  15)
* -DUSE_TOS:                             TOS Optimization.    (line  15)
* –dynamic command-line option:          Dynamic Superinstructions.
                                                              (line 110)
* –dynamic, command-line option:         Invoking Gforth.     (line 148)
* –enable-force-reg, configuration flag: Portability.         (line  40)
* -f, command-line option:               Invoking Gforth.     (line  83)
* –fp-stack-size, command-line option:   Invoking Gforth.     (line  83)
* -h, command-line option:               Invoking Gforth.     (line 116)
* –help, command-line option:            Invoking Gforth.     (line 116)
* -i, command-line option:               Invoking Gforth.     (line  32)
* -i, invoke image file:                 Running Image Files. (line   6)
* –image file, invoke image file:        Running Image Files. (line   6)
* –image-file, command-line option:      Invoking Gforth.     (line  32)
* -infinity:                             Floating Point.      (line 188)
* -l, command-line option:               Invoking Gforth.     (line  93)
* –locals-stack-size, command-line option: Invoking Gforth.   (line  93)
* -LOOP:                                 Counted Loops.       (line 230)
* -ltrace:                               Debugging.           (line  77)
* -m, command-line option:               Invoking Gforth.     (line  55)
* –no-dynamic command-line option:       Dynamic Superinstructions.
                                                              (line  98)
* –no-dynamic, command-line option:      Invoking Gforth.     (line 148)
* –no-offset-im, command-line option:    Invoking Gforth.     (line 132)
* –no-super command-line option:         Dynamic Superinstructions.
                                                              (line  98)
* –no-super, command-line option:        Invoking Gforth.     (line 154)
* –offset-image, command-line option:    Invoking Gforth.     (line 127)
* -p, command-line option:               Invoking Gforth.     (line  44)
* –path, command-line option:            Invoking Gforth.     (line  44)
* –print-metrics, command-line option:   Invoking Gforth.     (line 193)
* -r, command-line option:               Invoking Gforth.     (line  74)
* –return-stack-size, command-line option: Invoking Gforth.   (line  74)
* -rot:                                  Data stack.          (line  27)
* –ss-greedy, command-line option:       Invoking Gforth.     (line 181)
* –ss-min-..., command-line options:     Invoking Gforth.     (line 167)
* –ss-number, command-line option:       Invoking Gforth.     (line 160)
* -trailing:                             String words.        (line  41)
* -trailing-garbage:                     Xchars and Unicode.  (line 101)
* -v, command-line option:               Invoking Gforth.     (line 120)
* –version, command-line option:         Invoking Gforth.     (line 120)
* –vm-commit, command-line option:       Invoking Gforth.     (line 102)
* -W, command-line option:               Invoking Gforth.     (line 231)
* -Wall, command-line option:            Invoking Gforth.     (line 237)
* -Werror, command-line option:          Invoking Gforth.     (line 243)
* -Won, command-line option:             Invoking Gforth.     (line 234)
* -Wpedantic, command-line option:       Invoking Gforth.     (line 240)
* -[do:                                  Counted Loops.       (line 191)
* -\d:                                   Regular Expressions. (line  79)
* -\s:                                   Regular Expressions. (line  82)
* -`:                                    Regular Expressions. (line  90)
* .:                                     Simple numeric output.
                                                              (line  10)
* .":                                    Miscellaneous output.
                                                              (line  29)
* .", how it works:                      How does that work?. (line 145)
* .(:                                    Miscellaneous output.
                                                              (line  35)
* ...:                                   Examining data.      (line   8)
* ..char:                                Regular Expressions. (line  48)
* .?:                                    Regular Expressions. (line  76)
* .cover-raw:                            Code Coverage.       (line  49)
* .coverage:                             Code Coverage.       (line  36)
* .debugline:                            Debugging.           (line  34)
* .emacs:                                Installing gforth.el.
                                                              (line   6)
* .fi files:                             Image Files.         (line   6)
* .fpath:                                Source Search Paths. (line  12)
* .gforth-history:                       Command-line editing.
                                                              (line  39)
* .hm:                                   Header methods.      (line  24)
* .id:                                   Name token.          (line  68)
* .included:                             Forth source files.  (line  64)
* .locale-csv:                           i18n and l10n.       (line  62)
* .path:                                 General Search Paths.
                                                              (line  29)
* .r:                                    Simple numeric output.
                                                              (line  30)
* .recognizers:                          Default Recognizers. (line  47)
* .s:                                    Examining data.      (line  11)
* .substitute:                           Substitute.          (line  21)
* .unresolved:                           Forward.             (line  17)
* .voc:                                  Word Lists.          (line  95)
* .widget:                               widget methods.      (line 102)
* .\":                                   Miscellaneous output.
                                                              (line  26)
* /:                                     Integer division.    (line  44)
* //:                                    Regular Expressions. (line 137)
* //g:                                   Regular Expressions. (line 187)
* //o:                                   Regular Expressions. (line 184)
* //s:                                   Regular Expressions. (line 181)
* /COUNTED-STRING:                       Environmental Queries.
                                                              (line  31)
* /f:                                    Integer division.    (line  49)
* /f-stage1m:                            Two-stage integer division.
                                                              (line  52)
* /f-stage2m:                            Two-stage integer division.
                                                              (line  56)
* /HOLD:                                 Environmental Queries.
                                                              (line  34)
* /l:                                    Address arithmetic.  (line 149)
* /mod:                                  Integer division.    (line  62)
* /modf:                                 Integer division.    (line  68)
* /modf-stage2m:                         Two-stage integer division.
                                                              (line  64)
* /mods:                                 Integer division.    (line  65)
* /PAD:                                  Environmental Queries.
                                                              (line  37)
* /s:                                    Integer division.    (line  47)
* /string:                               String words.        (line  45)
* /w:                                    Address arithmetic.  (line 146)
* /x:                                    Address arithmetic.  (line 152)
* 0<:                                    Numeric comparison.  (line  21)
* 0<=:                                   Numeric comparison.  (line  23)
* 0<>:                                   Numeric comparison.  (line  25)
* 0=:                                    Numeric comparison.  (line  27)
* 0>:                                    Numeric comparison.  (line  29)
* 0>=:                                   Numeric comparison.  (line  31)
* 0x-prefix for hexadecimal numbers:     Literals in source code.
                                                              (line  15)
* 1+:                                    Single precision.    (line  16)
* 1-:                                    Single precision.    (line  23)
* 1/f:                                   Floating Point.      (line  90)
* 2!:                                    Memory Access.       (line  25)
* 2*:                                    Bitwise operations.  (line  41)
* 2,:                                    Dictionary allocation.
                                                              (line  51)
* 2/:                                    Bitwise operations.  (line  44)
* 2>r:                                   Return stack.        (line  21)
* 2@:                                    Memory Access.       (line  21)
* 2Constant:                             Constants.           (line  33)
* 2drop:                                 Data stack.          (line  35)
* 2dup:                                  Data stack.          (line  39)
* 2field::                               Forth200x Structures.
                                                              (line  59)
* 2Literal:                              Literals.            (line  57)
* 2nip:                                  Data stack.          (line  37)
* 2over:                                 Data stack.          (line  41)
* 2r>:                                   Return stack.        (line  23)
* 2r@:                                   Return stack.        (line  25)
* 2rdrop:                                Return stack.        (line  27)
* 2rot:                                  Data stack.          (line  47)
* 2swap:                                 Data stack.          (line  45)
* 2tuck:                                 Data stack.          (line  43)
* 2Value:                                Values.              (line  27)
* 2Variable:                             Variables.           (line  39)
* 2varue:                                Varues.              (line  15)
* ::                                     Colon Definitions.   (line  17)
* :, passing data across:                Literals.            (line  70)
* :::                                    Basic Mini-OOF Usage.
                                                              (line  32)
* :m:                                    Objects Glossary.    (line 103)
* :noname:                               Anonymous Definitions.
                                                              (line   9)
* :}:                                    Locals definition words.
                                                              (line  23)
* :}d:                                   Closures.            (line  29)
* :}h:                                   Closures.            (line  33)
* :}h1:                                  Closures.            (line  37)
* :}l:                                   Closures.            (line  25)
* :}xt:                                  Closures.            (line  41)
* ;:                                     Colon Definitions.   (line  19)
* ;>:                                    Closures.            (line  93)
* ;abi-code:                             Assembler Definitions.
                                                              (line  47)
* ;code:                                 Assembler Definitions.
                                                              (line  70)
* ;CODE ending sequence:                 programming-idef.    (line   7)
* ;CODE, name not defined via CREATE:    programming-ambcond. (line  19)
* ;CODE, processing input:               programming-idef.    (line  10)
* ;inline:                               Colon Definitions.   (line  32)
* ;m:                                    Objects Glossary.    (line 107)
* ;m usage:                              Method conveniences. (line  12)
* ;s:                                    Calls and returns.   (line  53)
* ;]:                                    Quotations.          (line  30)
* <:                                     Numeric comparison.  (line   9)
* <#:                                    Formatted numeric output.
                                                              (line  42)
* <<:                                    Regular Expressions. (line 172)
* <<":                                   Regular Expressions. (line 175)
* <<#:                                   Formatted numeric output.
                                                              (line  45)
* <=:                                    Numeric comparison.  (line  11)
* <>:                                    Numeric comparison.  (line  13)
* <bind>:                                Objects Glossary.    (line   9)
* <to-inst>:                             Objects Glossary.    (line 148)
* <{::                                   Closures.            (line  90)
* =:                                     Numeric comparison.  (line  15)
* =mkdir:                                Directories.         (line  51)
* >:                                     Numeric comparison.  (line  17)
* >=:                                    Numeric comparison.  (line  19)
* >>:                                    Regular Expressions. (line 168)
* >addr:                                 Closures.            (line  46)
* >animate:                              widget methods.      (line 120)
* >body:                                 CREATE..DOES> details.
                                                              (line  75)
* >BODY of non-CREATEd words:            core-ambcond.        (line 186)
* >code-address:                         Threading Words.     (line  73)
* >compile:                              Dealing with existing Recognizers.
                                                              (line 110)
* >definer:                              Threading Words.     (line 134)
* >does-code:                            Threading Words.     (line 116)
* >float:                                Line input and conversion.
                                                              (line  43)
* >float1:                               Line input and conversion.
                                                              (line  51)
* >in:                                   The Text Interpreter.
                                                              (line 121)
* >IN greater than input buffer:         core-ambcond.        (line 118)
* >interpret:                            Dealing with existing Recognizers.
                                                              (line 107)
* >l:                                    Locals implementation.
                                                              (line  24)
* >name:                                 Name token.          (line  35)
* >number:                               Line input and conversion.
                                                              (line  30)
* >o:                                    Mini-OOF2.           (line  12)
* >order:                                Word Lists.          (line  70)
* >postpone:                             Dealing with existing Recognizers.
                                                              (line 113)
* >pow2:                                 Bitwise operations.  (line  55)
* >r:                                    Return stack.        (line  13)
* >string-execute:                       String words.        (line  88)
* >time&date&tz:                         Keeping track of Time.
                                                              (line  14)
* ?:                                     Examining data.      (line  54)
* ?!@:                                   Hardware operations for multi-tasking.
                                                              (line  20)
* ???:                                   Debugging.           (line  56)
* ?cov+:                                 Code Coverage.       (line  29)
* ?DO:                                   Counted Loops.       (line 177)
* ?dup:                                  Data stack.          (line  29)
* ?DUP-0=-IF:                            Arbitrary control structures.
                                                              (line  83)
* ?dup-IF:                               Arbitrary control structures.
                                                              (line  78)
* ?events:                               Message queues.      (line  21)
* ?EXIT:                                 Calls and returns.   (line  50)
* ?inside:                               actor methods.       (line  33)
* ?LEAVE:                                Counted Loops.       (line 254)
* ?of:                                   Arbitrary control structures.
                                                              (line 104)
* @:                                     Memory Access.       (line   6)
* @localn:                               Locals implementation.
                                                              (line  14)
* [:                                     Literals.            (line  36)
* [']:                                   Execution token.     (line  28)
* [+LOOP]:                               Interpreter Directives.
                                                              (line  66)
* [::                                    Quotations.          (line  27)
* [?DO]:                                 Interpreter Directives.
                                                              (line  60)
* [AGAIN]:                               Interpreter Directives.
                                                              (line  86)
* [BEGIN]:                               Interpreter Directives.
                                                              (line  82)
* [bind]:                                Objects Glossary.    (line  15)
* [bind] usage:                          Class Binding.       (line  15)
* [char]:                                String and character literals.
                                                              (line  49)
* [COMP']:                               Compilation token.   (line  23)
* [compile]:                             Macros.              (line 202)
* [current]:                             Objects Glossary.    (line  48)
* [defined]:                             Interpreter Directives.
                                                              (line  44)
* [DO]:                                  Interpreter Directives.
                                                              (line  62)
* [ELSE]:                                Interpreter Directives.
                                                              (line  28)
* [ENDIF]:                               Interpreter Directives.
                                                              (line  41)
* [FOR]:                                 Interpreter Directives.
                                                              (line  68)
* [IFDEF]:                               Interpreter Directives.
                                                              (line  50)
* [IFUNDEF]:                             Interpreter Directives.
                                                              (line  55)
* [IF]:                                  Interpreter Directives.
                                                              (line  20)
* [IF] and POSTPONE:                     programming-ambcond. (line  24)
* [IF], end of the input source before matching [ELSE] or [THEN]: programming-ambcond.
                                                              (line  28)
* [I]:                                   Interpreter Directives.
                                                              (line  72)
* [LOOP]:                                Interpreter Directives.
                                                              (line  64)
* [NEXT]:                                Interpreter Directives.
                                                              (line  70)
* [parent]:                              Objects Glossary.    (line 126)
* [parent] usage:                        Class Binding.       (line  34)
* [REPEAT]:                              Interpreter Directives.
                                                              (line  90)
* [THEN]:                                Interpreter Directives.
                                                              (line  37)
* [to-inst]:                             Objects Glossary.    (line 151)
* [undefined]:                           Interpreter Directives.
                                                              (line  47)
* [UNTIL]:                               Interpreter Directives.
                                                              (line  84)
* [WHILE]:                               Interpreter Directives.
                                                              (line  88)
* [{::                                   Closures.            (line  14)
* \:                                     Comments.            (line  16)
* \$:                                    Regular Expressions. (line  99)
* \(:                                    Regular Expressions. (line 154)
* \):                                    Regular Expressions. (line 157)
* \, editing with Emacs:                 Emacs and Gforth.    (line   6)
* \, line length in blocks:              block-idef.          (line  11)
* \0:                                    Regular Expressions. (line 160)
* \c:                                    Declaring C Functions.
                                                              (line  76)
* \d:                                    Regular Expressions. (line  70)
* \G:                                    Comments.            (line  22)
* \s:                                    Regular Expressions. (line  73)
* \\\:                                   Forth source files.  (line  61)
* \^:                                    Regular Expressions. (line  96)
* ]:                                     Literals.            (line  39)
* ]L:                                    Literals.            (line  51)
* ]nocov:                                Code Coverage.       (line  20)
* ]]:                                    Macros.              (line  46)
* `:                                     Regular Expressions. (line  85)
* ` prefix:                              Execution token.     (line  14)
* ` prefix of word:                      Literals in source code.
                                                              (line 113)
* `?:                                    Regular Expressions. (line  88)
* `` prefix of word:                     Literals in source code.
                                                              (line 119)
* {:                                     Locals definition words.
                                                              (line  26)
* {*:                                    Regular Expressions. (line 122)
* {**:                                   Regular Expressions. (line 110)
* {+:                                    Regular Expressions. (line 128)
* {++:                                   Regular Expressions. (line 116)
* {::                                    Locals definition words.
                                                              (line  11)
* {{:                                    Regular Expressions. (line 142)
* |:                                     Locals definition words.
                                                              (line  19)
* ||:                                    Regular Expressions. (line 145)
* }:                                     Locals definition words.
                                                              (line  30)
* }}:                                    Regular Expressions. (line 148)
* ~~:                                    Debugging.           (line  28)
* ~~, removal with Emacs:                Emacs and Gforth.    (line   6)
* ~~1bt:                                 Debugging.           (line  53)
* ~~bt:                                  Debugging.           (line  50)
* ~~Value:                               Debugging.           (line  71)
* ~~Variable:                            Debugging.           (line  68)
* A,:                                    Dictionary allocation.
                                                              (line  63)
* abi-code:                              Assembler Definitions.
                                                              (line  39)
* abort:                                 Exception Handling.  (line 247)
* ABORT":                                Exception Handling.  (line 242)
* ABORT", exception abort sequence:      core-idef.           (line  75)
* abs:                                   Single precision.    (line  29)
* absolute-file?:                        Search Paths.        (line  31)
* abstract class:                        Basic Objects Usage. (line  20)
* abstract class <1>:                    Basic OOF Usage.     (line  23)
* accept:                                Line input and conversion.
                                                              (line  11)
* ACCEPT, display after end of input:    core-idef.           (line  71)
* ACCEPT, editing:                       core-idef.           (line  17)
* AConstant:                             Constants.           (line  29)
* act:                                   widget methods.      (line   9)
* act-name$:                             actor methods.       (line  12)
* action-of:                             Deferred Words.      (line  91)
* activate:                              Basic multi-tasking. (line  46)
* active-w:                              actor methods.       (line   9)
* actor:                                 MINOS2 object framework.
                                                              (line  14)
* add-cflags:                            Declaring OS-level libraries.
                                                              (line  48)
* add-framework:                         Declaring OS-level libraries.
                                                              (line  41)
* add-incdir:                            Declaring OS-level libraries.
                                                              (line  45)
* add-ldflags:                           Declaring OS-level libraries.
                                                              (line  51)
* add-lib:                               Declaring OS-level libraries.
                                                              (line  33)
* add-libpath:                           Declaring OS-level libraries.
                                                              (line  37)
* addr:                                  Varues.              (line  23)
* address alignment exception:           core-ambcond.        (line 139)
* address alignment exception, stack overflow: core-ambcond.  (line  41)
* address arithmetic for structures:     Why explicit structure support?.
                                                              (line   6)
* address arithmetic words:              Address arithmetic.  (line   6)
* address unit:                          Address arithmetic.  (line  10)
* address unit, size in bits:            core-idef.           (line 111)
* ADDRESS-UNIT-BITS:                     Environmental Queries.
                                                              (line  25)
* adjust-buffer:                         Heap Allocation.     (line  64)
* after-locate:                          Locating source code definitions.
                                                              (line  59)
* AGAIN:                                 Arbitrary control structures.
                                                              (line  37)
* AHEAD:                                 Arbitrary control structures.
                                                              (line  21)
* Alias:                                 Aliases.             (line  27)
* aliases:                               Aliases.             (line   6)
* align:                                 Dictionary allocation.
                                                              (line  82)
* aligned:                               Address arithmetic.  (line  64)
* aligned addresses:                     core-idef.           (line   7)
* alignment faults:                      core-ambcond.        (line 139)
* alignment of addresses for types:      Address arithmetic.  (line  21)
* alignment tutorial:                    Alignment Tutorial.  (line   6)
* ALiteral:                              Literals.            (line  47)
* allocate:                              Heap Allocation.     (line  16)
* allot:                                 Dictionary allocation.
                                                              (line  31)
* also:                                  Word Lists.          (line  76)
* also, too many word lists in search order: search-ambcond.  (line  18)
* also-path:                             General Search Paths.
                                                              (line  26)
* ambiguous conditions, block words:     block-ambcond.       (line   6)
* ambiguous conditions, core words:      core-ambcond.        (line   6)
* ambiguous conditions, double words:    double-ambcond.      (line   6)
* ambiguous conditions, facility words:  facility-ambcond.    (line   6)
* ambiguous conditions, file words:      file-ambcond.        (line   6)
* ambiguous conditions, floating-point words: floating-ambcond.
                                                              (line   6)
* ambiguous conditions, locals words:    locals-ambcond.      (line   6)
* ambiguous conditions, programming-tools words: programming-ambcond.
                                                              (line   6)
* ambiguous conditions, search-order words: search-ambcond.   (line   6)
* and:                                   Bitwise operations.  (line   6)
* angles in trigonometric operations:    Floating Point.      (line 103)
* annotate-cov:                          Code Coverage.       (line  39)
* ans-report.fs:                         Standard Report.     (line   6)
* append:                                String words.        (line  83)
* arg:                                   OS command line arguments.
                                                              (line  41)
* argc:                                  OS command line arguments.
                                                              (line  55)
* argument input source different than current input source for RESTORE-INPUT: core-ambcond.
                                                              (line 125)
* argument type mismatch:                core-ambcond.        (line  19)
* argument type mismatch, RESTORE-INPUT: core-ambcond.        (line 125)
* arguments, OS command line:            OS command line arguments.
                                                              (line   6)
* argv:                                  OS command line arguments.
                                                              (line  59)
* arithmetic words:                      Arithmetic.          (line   6)
* arithmetics tutorial:                  Arithmetics Tutorial.
                                                              (line   6)
* array, iterating over:                 Counted Loops.       (line 124)
* arrays:                                CREATE.              (line  41)
* arrays tutorial:                       Arrays and Records Tutorial.
                                                              (line   6)
* arshift:                               Bitwise operations.  (line  26)
* asptr:                                 Class Declaration.   (line  16)
* assembler:                             Assembler and Code Words.
                                                              (line   6)
* assembler <1>:                         Assembler Definitions.
                                                              (line  32)
* ASSEMBLER, search order capability:    programming-idef.    (line  15)
* assert(:                               Assertions.          (line  43)
* assert-level:                          Assertions.          (line  62)
* assert0(:                              Assertions.          (line  30)
* assert1(:                              Assertions.          (line  33)
* assert2(:                              Assertions.          (line  36)
* assert3(:                              Assertions.          (line  39)
* assertions:                            Assertions.          (line   6)
* ASSUME-LIVE:                           Where are locals visible by name?.
                                                              (line 141)
* at-deltaxy:                            Terminal output.     (line  13)
* at-xy:                                 Terminal output.     (line   9)
* AT-XY can’t be performed on user output device: facility-ambcond.
                                                              (line   7)
* Attempt to use zero-length string as a name: core-ambcond.  (line 112)
* au (address unit):                     Address arithmetic.  (line  10)
* AUser:                                 Task-local data.     (line  17)
* authors:                               Help on Gforth.      (line  19)
* authors of Gforth:                     Origin.              (line   9)
* auto-indentation of Forth code in Emacs: Auto-Indentation.  (line   6)
* AValue:                                Values.              (line  23)
* AVariable:                             Variables.           (line  35)
* a_, stack item type:                   Notation.            (line  98)
* b:                                     Locating source code definitions.
                                                              (line  45)
* backtrace:                             Error messages.      (line   6)
* backtrace examination:                 Locating exception source.
                                                              (line   6)
* backtraces with gforth-fast:           Error messages.      (line  53)
* barrier:                               Hardware operations for multi-tasking.
                                                              (line  29)
* base:                                  Number Conversion.   (line  23)
* base is not decimal (REPRESENT, F., FE., FS.): floating-ambcond.
                                                              (line  26)
* base-execute:                          Number Conversion.   (line  19)
* baseline:                              widget methods.      (line  33)
* basename:                              Directories.         (line   8)
* basic objects usage:                   Basic Objects Usage. (line   6)
* batch processing with Gforth:          Invoking Gforth.     (line 204)
* before-line:                           Text Interpreter Hooks.
                                                              (line   6)
* before-locate:                         Locating source code definitions.
                                                              (line  56)
* before-word:                           Text Interpreter Hooks.
                                                              (line   9)
* BEGIN:                                 Arbitrary control structures.
                                                              (line  29)
* begin-structure:                       Forth200x Structures.
                                                              (line  40)
* benchmarking Forth systems:            Performance.         (line   6)
* Benchres:                              Performance.         (line  86)
* big-endian:                            Special Memory Accesses.
                                                              (line   6)
* bin:                                   General files.       (line  15)
* bind:                                  Objects Glossary.    (line   6)
* bind usage:                            Class Binding.       (line  19)
* bind':                                 Objects Glossary.    (line  12)
* bitwise operation words:               Bitwise operations.  (line   6)
* bl:                                    String and character literals.
                                                              (line  76)
* blank:                                 Memory Blocks.       (line  40)
* blk:                                   Input Sources.       (line  23)
* BLK, altering BLK:                     block-ambcond.       (line  19)
* block:                                 Blocks.              (line 146)
* block buffers:                         Blocks.              (line  40)
* block number invalid:                  block-ambcond.       (line  16)
* block read not possible:               block-ambcond.       (line   7)
* block transfer, I/O exception:         block-ambcond.       (line  12)
* block words, ambiguous conditions:     block-ambcond.       (line   6)
* block words, implementation-defined options: block-idef.    (line   6)
* block words, other system documentation: block-other.       (line   6)
* block words, system documentation:     The optional Block word set.
                                                              (line   6)
* block-included:                        Blocks.              (line 205)
* block-offset:                          Blocks.              (line 125)
* block-position:                        Blocks.              (line 135)
* blocks:                                Blocks.              (line   6)
* blocks file:                           Blocks.              (line  29)
* blocks files, use with Emacs:          Blocks Files.        (line   6)
* blocks in files:                       file-idef.           (line  49)
* blocks.fb:                             Blocks.              (line  35)
* body-relative address input format:    Literals in source code.
                                                              (line 122)
* Boolean flags:                         Boolean Flags.       (line   6)
* bootmessage:                           Modifying the Startup Sequence.
                                                              (line  52)
* border:                                widget methods.      (line  42)
* borderl:                               widget methods.      (line  51)
* bordert:                               widget methods.      (line  48)
* borderv:                               widget methods.      (line  45)
* bounds:                                Counted Loops.       (line 186)
* break":                                Singlestep Debugger. (line  69)
* break::                                Singlestep Debugger. (line  67)
* broken-pipe-error:                     Pipes.               (line  21)
* browse:                                Locating source code definitions.
                                                              (line  70)
* bt:                                    Locating exception source.
                                                              (line  10)
* buffer:                                Blocks.              (line 153)
* buffer%:                               Heap Allocation.     (line  59)
* buffer::                               Variables.           (line  45)
* bug reporting:                         Bugs.                (line   6)
* bw:                                    Locating uses of a word.
                                                              (line  20)
* bw-cover:                              Code Coverage.       (line  56)
* bye during gforthmi:                   gforthmi.            (line  44)
* byte order:                            Special Memory Accesses.
                                                              (line   6)
* C function pointers to Forth words:    Callbacks.           (line   6)
* C function pointers, calling from Forth: Calling C function pointers.
                                                              (line   6)
* C functions, calls to:                 Calling C Functions. (line   6)
* C functions, declarations:             Declaring C Functions.
                                                              (line   6)
* C interface:                           C Interface.         (line   6)
* c!:                                    Memory Access.       (line  18)
* C":                                    Counted string words.
                                                              (line  21)
* c$+!:                                  $tring words.        (line  51)
* c,:                                    Dictionary allocation.
                                                              (line  41)
* c, stack item type:                    Notation.            (line  84)
* C, using C for the engine:             Portability.         (line  13)
* c-callback:                            Callbacks.           (line  16)
* c-callback-thread:                     Callbacks.           (line  21)
* c-function:                            Declaring C Functions.
                                                              (line  79)
* c-funptr:                              Calling C function pointers.
                                                              (line  11)
* c-library:                             Defining library interfaces.
                                                              (line  51)
* c-library-name:                        Defining library interfaces.
                                                              (line  48)
* c-value:                               Declaring C Functions.
                                                              (line  83)
* c-variable:                            Declaring C Functions.
                                                              (line  87)
* C::                                    Locals definition words.
                                                              (line  52)
* c>s:                                   Special Memory Accesses.
                                                              (line 100)
* c?:                                    Regular Expressions. (line  64)
* c@:                                    Memory Access.       (line  15)
* CA::                                   Locals definition words.
                                                              (line  55)
* call-c:                                Low-Level C Interface Words.
                                                              (line  13)
* Callback functions written in Forth:   Callbacks.           (line   6)
* caller-w:                              actor methods.       (line   6)
* calling a definition:                  Calls and returns.   (line   6)
* calling C functions:                   Calling C Functions. (line   6)
* capscompare:                           String words.        (line  62)
* capssearch:                            String words.        (line  73)
* capsstring-prefix?:                    String words.        (line  69)
* case:                                  Arbitrary control structures.
                                                              (line  87)
* case as generalized control structure: General control structures with CASE.
                                                              (line   6)
* CASE control structure:                Selection.           (line  43)
* case sensitivity:                      Case insensitivity.  (line   6)
* case-sensitivity characteristics:      core-idef.           (line 156)
* case-sensitivity for name lookup:      core-idef.           (line  34)
* catch:                                 Exception Handling.  (line  83)
* catch and backtraces:                  Error messages.      (line  42)
* catch and this:                        Objects Implementation.
                                                              (line  43)
* catch in m: ... ;m:                    Method conveniences. (line  15)
* cell:                                  Address arithmetic.  (line  61)
* cell size:                             core-idef.           (line 136)
* cell%:                                 Structure Glossary.  (line  24)
* cell+:                                 Address arithmetic.  (line  52)
* cell-:                                 Address arithmetic.  (line  55)
* cell-aligned addresses:                core-idef.           (line   7)
* cell/:                                 Address arithmetic.  (line  58)
* cells:                                 Address arithmetic.  (line  49)
* CFA:                                   Threading Words.     (line   6)
* cfalign:                               Dictionary allocation.
                                                              (line 101)
* cfaligned:                             Address arithmetic.  (line 113)
* cfield::                               Forth200x Structures.
                                                              (line  53)
* changing the compilation word list (during compilation): search-ambcond.
                                                              (line   7)
* char:                                  String and character literals.
                                                              (line  45)
* char size:                             core-idef.           (line 139)
* char%:                                 Structure Glossary.  (line  26)
* char+:                                 Address arithmetic.  (line  44)
* char-:                                 Address arithmetic.  (line  47)
* character editing of ACCEPT and EXPECT: core-idef.          (line  17)
* character encoding:                    Characters.          (line   6)
* character literals:                    String and character literals.
                                                              (line   6)
* character set:                         core-idef.           (line  24)
* character strings - displaying:        Displaying characters and strings.
                                                              (line   6)
* character strings - moving and copying: Memory Blocks.      (line   6)
* character strings - representations:   String representations.
                                                              (line   6)
* character-aligned address requirements: core-idef.          (line  29)
* character-set extensions and matching of names: core-idef.  (line  34)
* Characters - chars/bytes vs. extended characters: Characters.
                                                              (line   6)
* characters - displaying:               Displaying characters and strings.
                                                              (line   6)
* characters tutorial:                   Characters and Strings Tutorial.
                                                              (line   6)
* charclass:                             Regular Expressions. (line  39)
* chars:                                 Address arithmetic.  (line  41)
* child class:                           Object-Oriented Terminology.
                                                              (line  43)
* child words:                           User-defined defining words using CREATE.
                                                              (line  17)
* cilk-bye:                              Cilk.                (line  49)
* cilk-init:                             Cilk.                (line  31)
* cilk-sync:                             Cilk.                (line  46)
* class:                                 Object-Oriented Terminology.
                                                              (line  10)
* class <1>:                             Objects Glossary.    (line  18)
* class <2>:                             Basic Mini-OOF Usage.
                                                              (line  20)
* class binding:                         Class Binding.       (line   6)
* class binding as optimization:         Class Binding.       (line  39)
* class binding, alternative to:         Class Binding.       (line  21)
* class binding, implementation:         Objects Implementation.
                                                              (line  39)
* class declaration:                     Class Declaration.   (line   6)
* class definition, restrictions:        Basic Objects Usage. (line  58)
* class definition, restrictions <1>:    Basic OOF Usage.     (line  56)
* class implementation:                  Class Implementation.
                                                              (line   5)
* class implementation and representation: Objects Implementation.
                                                              (line  24)
* class scoping implementation:          Objects Implementation.
                                                              (line  58)
* class usage:                           Basic Objects Usage. (line   8)
* class usage <1>:                       Basic OOF Usage.     (line  11)
* class->map:                            Objects Glossary.    (line  22)
* class-inst-size:                       Objects Glossary.    (line  27)
* class-inst-size discussion:            Creating objects.    (line  12)
* class-override!:                       Objects Glossary.    (line  31)
* class-previous:                        Objects Glossary.    (line  34)
* class;:                                Class Declaration.   (line  42)
* class; usage:                          Basic OOF Usage.     (line  11)
* class>order:                           Objects Glossary.    (line  38)
* classes and scoping:                   Classes and Scoping. (line   6)
* clear screen:                          Terminal output.     (line  21)
* clear-libs:                            Declaring OS-level libraries.
                                                              (line  30)
* clear-path:                            General Search Paths.
                                                              (line  23)
* clearstack:                            Examining data.      (line  43)
* clearstacks:                           Examining data.      (line  49)
* clicked:                               actor methods.       (line  15)
* clock tick duration:                   facility-idef.       (line  14)
* close-dir:                             Directories.         (line  35)
* close-file:                            General files.       (line  29)
* close-pipe:                            Pipes.               (line  12)
* closures:                              Closures.            (line   6)
* cmove:                                 Memory Blocks.       (line  24)
* cmove>:                                Memory Blocks.       (line  29)
* code:                                  Assembler Definitions.
                                                              (line  63)
* code address:                          Threading Words.     (line   6)
* code coverage:                         Code Coverage.       (line   6)
* CODE ending sequence:                  programming-idef.    (line   7)
* code field:                            Threading Words.     (line   6)
* code words:                            Assembler and Code Words.
                                                              (line   6)
* CODE, processing input:                programming-idef.    (line  10)
* code-address!:                         Threading Words.     (line  76)
* colon definitions:                     Colon Definitions.   (line   6)
* colon definitions <1>:                 Anonymous Definitions.
                                                              (line   6)
* colon definitions, nesting:            Quotations.          (line   6)
* colon definitions, tutorial:           Colon Definitions Tutorial.
                                                              (line   6)
* colon-sys, passing data across ::      Literals.            (line  70)
* color-cover:                           Code Coverage.       (line  59)
* color::                                widget methods.      (line 128)
* combined words:                        Combined words.      (line   6)
* command line arguments, OS:            OS command line arguments.
                                                              (line   6)
* command-line editing:                  Command-line editing.
                                                              (line   6)
* command-line options:                  Invoking Gforth.     (line   6)
* comment editing commands:              Emacs and Gforth.    (line   6)
* comments:                              Comments.            (line   6)
* comments tutorial:                     Comments Tutorial.   (line   6)
* common-list:                           Locals implementation.
                                                              (line  94)
* COMP':                                 Compilation token.   (line  26)
* comp-i.fs:                             gforthmi.            (line   6)
* comp.lang.forth:                       Forth-related information.
                                                              (line   6)
* compare:                               Memory Blocks.       (line  51)
* comparison of object models:           Comparison with other object models.
                                                              (line   6)
* comparison tutorial:                   Flags and Comparisons Tutorial.
                                                              (line   6)
* compilation semantics:                 How does that work?. (line  61)
* compilation semantics <1>:             Interpretation and Compilation Semantics.
                                                              (line  13)
* compilation semantics tutorial:        Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* compilation token:                     Compilation token.   (line   6)
* compilation tokens, tutorial:          Compilation Tokens Tutorial.
                                                              (line   6)
* compilation word list:                 Word Lists.          (line  15)
* compilation word list, change before definition ends: search-ambcond.
                                                              (line   7)
* compile state:                         The Text Interpreter.
                                                              (line  11)
* compile,:                              Macros.              (line 157)
* compile-lp+!:                          Locals implementation.
                                                              (line  34)
* compile-only:                          Interpretation and Compilation Semantics.
                                                              (line  52)
* compile-only warning, for ' etc.:      core-ambcond.        (line  24)
* compile-only words:                    Interpretation and Compilation Semantics.
                                                              (line  46)
* compile-only?:                         Header fields.       (line  49)
* compiled code examination:             Examining compiled code.
                                                              (line   6)
* compiling compilation semantics:       Macros.              (line   6)
* compiling words:                       Compiling words.     (line   6)
* conditional compilation:               Interpreter Directives.
                                                              (line   6)
* conditionals, tutorial:                Conditional execution Tutorial.
                                                              (line   6)
* const-does>:                           Const-does>.         (line   9)
* Constant:                              Constants.           (line  24)
* constants:                             Constants.           (line   6)
* construct:                             Objects Glossary.    (line  41)
* construct discussion:                  Creating objects.    (line   6)
* context:                               Word Lists.          (line 160)
* context-sensitive help:                Emacs and Gforth.    (line  29)
* contiguous regions and heap allocation: Heap Allocation.    (line   6)
* contiguous regions in dictionary allocation: Dictionary allocation.
                                                              (line  10)
* contof:                                Arbitrary control structures.
                                                              (line 111)
* contributors to Gforth:                Origin.              (line   9)
* control characters as delimiters:      core-idef.           (line  50)
* control structures:                    Control Structures.  (line   6)
* control structures for selection:      Selection.           (line   6)
* control structures programming style:  Arbitrary control structures.
                                                              (line 120)
* control structures, user-defined:      Arbitrary control structures.
                                                              (line   6)
* control-flow stack:                    Arbitrary control structures.
                                                              (line   6)
* control-flow stack items, locals information: Locals implementation.
                                                              (line  84)
* control-flow stack underflow:          programming-ambcond. (line  10)
* control-flow stack, format:            core-idef.           (line  58)
* convert:                               Line input and conversion.
                                                              (line  61)
* convertin strings to numbers:          Line input and conversion.
                                                              (line   6)
* CORE:                                  Environmental Queries.
                                                              (line  40)
* core words, ambiguous conditions:      core-ambcond.        (line   6)
* core words, implementation-defined options: core-idef.      (line   6)
* core words, other system documentation: core-other.         (line   6)
* core words, system documentation:      The Core Words.      (line   6)
* CORE-EXT:                              Environmental Queries.
                                                              (line  44)
* cores:                                 Cilk.                (line  25)
* count:                                 Counted string words.
                                                              (line  13)
* counted loops:                         Counted Loops.       (line   6)
* counted loops with negative increment: Counted Loops.       (line  77)
* counted string, maximum size:          core-idef.           (line  84)
* counted strings:                       String representations.
                                                              (line   6)
* Country:                               i18n and l10n.       (line  40)
* cov%:                                  Code Coverage.       (line  45)
* cov+:                                  Code Coverage.       (line  26)
* coverage?:                             Code Coverage.       (line  23)
* cputime:                               Keeping track of Time.
                                                              (line  26)
* cr:                                    Miscellaneous output.
                                                              (line   6)
* Create:                                CREATE.              (line  19)
* CREATE ... DOES>:                      User-defined defining words using CREATE.
                                                              (line   6)
* CREATE ... DOES>, applications:        CREATE..DOES> applications.
                                                              (line   6)
* CREATE ... DOES>, details:             CREATE..DOES> details.
                                                              (line   6)
* CREATE ... SET-DOES>:                  User-defined defining words using CREATE.
                                                              (line  57)
* CREATE and alignment:                  Address arithmetic.  (line  34)
* create-file:                           General files.       (line  27)
* create-from:                           Creating from a prototype.
                                                              (line  28)
* create...does> tutorial:               Defining Words Tutorial.
                                                              (line   6)
* creating objects:                      Creating objects.    (line   6)
* critical-section:                      Semaphores.          (line  30)
* cross-compiler:                        cross.fs.            (line   6)
* cross-compiler <1>:                    Cross Compiler.      (line   6)
* cross.fs:                              cross.fs.            (line   6)
* cross.fs <1>:                          Cross Compiler.      (line   6)
* CS-DROP:                               Arbitrary control structures.
                                                              (line  45)
* CS-PICK:                               Arbitrary control structures.
                                                              (line  41)
* CS-PICK, fewer than u+1 items on the control flow-stack: programming-ambcond.
                                                              (line  10)
* CS-ROLL:                               Arbitrary control structures.
                                                              (line  43)
* CS-ROLL, fewer than u+1 items on the control flow-stack: programming-ambcond.
                                                              (line  10)
* cs-vocabulary:                         Word Lists.          (line  67)
* cs-wordlist:                           Word Lists.          (line  64)
* cstring>sstring:                       String words.        (line  54)
* ct (compilation token):                Compilation token.   (line   6)
* CT, tutorial:                          Compilation Tokens Tutorial.
                                                              (line   6)
* ctz:                                   Bitwise operations.  (line  66)
* current:                               Word Lists.          (line 157)
* current':                              Objects Glossary.    (line  45)
* current-interface:                     Objects Glossary.    (line  51)
* current-interface discussion:          Objects Implementation.
                                                              (line  24)
* currying:                              CREATE..DOES> applications.
                                                              (line  27)
* cursor positioning:                    Terminal output.     (line   7)
* C^:                                    Locals definition words.
                                                              (line  58)
* c_, stack item type:                   Notation.            (line 100)
* d:                                     widget methods.      (line  27)
* d+:                                    Double precision.    (line  25)
* d, stack item type:                    Notation.            (line  92)
* d-:                                    Double precision.    (line  27)
* d.:                                    Simple numeric output.
                                                              (line  43)
* d.r:                                   Simple numeric output.
                                                              (line  51)
* d0<:                                   Numeric comparison.  (line  62)
* d0<=:                                  Numeric comparison.  (line  64)
* d0<>:                                  Numeric comparison.  (line  66)
* d0=:                                   Numeric comparison.  (line  68)
* d0>:                                   Numeric comparison.  (line  70)
* d0>=:                                  Numeric comparison.  (line  72)
* d2*:                                   Bitwise operations.  (line  48)
* d2/:                                   Bitwise operations.  (line  51)
* D::                                    Locals definition words.
                                                              (line  43)
* d<:                                    Numeric comparison.  (line  50)
* d<=:                                   Numeric comparison.  (line  52)
* d<>:                                   Numeric comparison.  (line  54)
* d=:                                    Numeric comparison.  (line  56)
* d>:                                    Numeric comparison.  (line  58)
* d>=:                                   Numeric comparison.  (line  60)
* d>f:                                   Floating Point.      (line  26)
* D>F, d cannot be presented precisely as a float: floating-ambcond.
                                                              (line  38)
* d>s:                                   Double precision.    (line  23)
* D>S, d out of range of n:              double-ambcond.      (line   7)
* DA::                                   Locals definition words.
                                                              (line  46)
* dabs:                                  Double precision.    (line  31)
* dark-mode:                             Terminal output.     (line  72)
* darshift:                              Bitwise operations.  (line  37)
* data space - reserving some:           Dictionary allocation.
                                                              (line   6)
* data space available:                  core-other.          (line  16)
* data space containing definitions gets de-allocated: core-ambcond.
                                                              (line 135)
* data space pointer not properly aligned, ,, C,: core-ambcond.
                                                              (line 147)
* data space read/write with incorrect alignment: core-ambcond.
                                                              (line 139)
* data stack:                            Stack Manipulation.  (line   8)
* data stack manipulation words:         Data stack.          (line   6)
* data structure locals:                 Gforth locals.       (line  95)
* data-relocatable image files:          Data-Relocatable Image Files.
                                                              (line   6)
* data-space, read-only regions:         core-idef.           (line 126)
* dbg:                                   Singlestep Debugger. (line  65)
* debug tracer editing commands:         Emacs and Gforth.    (line   6)
* debug-fid:                             Debugging.           (line  39)
* debugging:                             Debugging.           (line   6)
* debugging output, finding the source location in Emacs: Emacs and Gforth.
                                                              (line  21)
* debugging Singlestep:                  Singlestep Debugger. (line   6)
* dec.:                                  Simple numeric output.
                                                              (line  14)
* dec.r:                                 Simple numeric output.
                                                              (line  40)
* decimal:                               Number Conversion.   (line  32)
* declaring C functions:                 Declaring C Functions.
                                                              (line   6)
* decompilation tutorial:                Decompilation Tutorial.
                                                              (line   6)
* default type of locals:                Gforth locals.       (line  79)
* default-color:                         Terminal output.     (line  36)
* default-w::                            Gforth locals.       (line  86)
* default-wa::                           Gforth locals.       (line  82)
* Defer:                                 Deferred Words.      (line  77)
* defer:                                 Class Declaration.   (line  21)
* defer!:                                Deferred Words.      (line  81)
* defer@:                                Deferred Words.      (line  87)
* deferred words:                        Deferred Words.      (line   6)
* defers:                                Deferred Words.      (line  97)
* definer:                               Threading Words.     (line 131)
* definer!:                              Threading Words.     (line 139)
* defines:                               Basic Mini-OOF Usage.
                                                              (line  26)
* defining defining words:               User-defined Defining Words.
                                                              (line   6)
* defining words:                        Defining Words.      (line   6)
* defining words tutorial:               Defining Words Tutorial.
                                                              (line   6)
* defining words without name:           Anonymous Definitions.
                                                              (line   6)
* defining words, name given in a string: Supplying names.    (line   6)
* defining words, simple:                CREATE.              (line   6)
* defining words, user-defined:          User-defined Defining Words.
                                                              (line   6)
* definition:                            Introducing the Text Interpreter.
                                                              (line  44)
* definitions:                           Word Lists.          (line  34)
* definitions, tutorial:                 Colon Definitions Tutorial.
                                                              (line   6)
* defocus:                               actor methods.       (line  39)
* delete:                                Memory Blocks.       (line  47)
* delete-file:                           General files.       (line  31)
* delta-i:                               Counted Loops.       (line 248)
* depth:                                 Examining data.      (line  35)
* depth changes during interpretation:   Stack depth changes. (line   6)
* depth-changes.fs:                      Stack depth changes. (line   6)
* design of stack effects, tutorial:     Designing the stack effect Tutorial.
                                                              (line   6)
* dest, control-flow stack item:         Arbitrary control structures.
                                                              (line  11)
* df!:                                   Memory Access.       (line  46)
* df@:                                   Memory Access.       (line  42)
* df@ or df! used with an address that is not double-float aligned: floating-ambcond.
                                                              (line   7)
* dfalign:                               Dictionary allocation.
                                                              (line  94)
* dfaligned:                             Address arithmetic.  (line 105)
* dffield::                              Forth200x Structures.
                                                              (line  68)
* dfloat%:                               Structure Glossary.  (line  28)
* dfloat+:                               Address arithmetic.  (line 100)
* dfloat/:                               Address arithmetic.  (line 103)
* dfloats:                               Address arithmetic.  (line  96)
* df_, stack item type:                  Notation.            (line 105)
* dglue:                                 widget methods.      (line  72)
* dglue@:                                widget methods.      (line  81)
* dict-new:                              Objects Glossary.    (line  54)
* dict-new discussion:                   Creating objects.    (line   6)
* dictionary:                            The Text Interpreter.
                                                              (line  28)
* dictionary in persistent form:         Image Files.         (line   6)
* dictionary overflow:                   core-ambcond.        (line  57)
* dictionary size default:               Stack and Dictionary Sizes.
                                                              (line   6)
* digits > 35:                           core-idef.           (line  67)
* direct threaded inner interpreter:     Threading.           (line  23)
* Directories:                           Directories.         (line   6)
* dirname:                               Directories.         (line  12)
* disassembler, general:                 Common Disassembler. (line   6)
* discode:                               Common Disassembler. (line   9)
* dispose-widget:                        widget methods.      (line  99)
* dividing by zero:                      core-ambcond.        (line  36)
* dividing by zero, floating-point:      floating-ambcond.    (line  41)
* Dividing classes:                      Dividing classes.    (line   6)
* dividing integers:                     Integer division.    (line   6)
* dividing many integers with the same divisor: Two-stage integer division.
                                                              (line   6)
* Division by zero:                      Integer division.    (line   6)
* Division by zero <1>:                  Integer division.    (line 133)
* division rounding:                     core-idef.           (line 166)
* division with potentially negative operands: Arithmetic.    (line   6)
* dlshift:                               Bitwise operations.  (line  30)
* dmax:                                  Double precision.    (line  35)
* dmin:                                  Double precision.    (line  33)
* dnegate:                               Double precision.    (line  29)
* DO:                                    Counted Loops.       (line 218)
* DO loops:                              Counted Loops.       (line   6)
* doabicode,:                            Threading Words.     (line  53)
* doabicode::                            Threading Words.     (line 106)
* docol,:                                Threading Words.     (line  32)
* docol::                                Threading Words.     (line  82)
* docon,:                                Threading Words.     (line  35)
* docon::                                Threading Words.     (line  85)
* dodefer,:                              Threading Words.     (line  44)
* dodefer::                              Threading Words.     (line  94)
* dodoes routine:                        DOES>.               (line   6)
* dodoes::                               Threading Words.     (line 103)
* does-code!:                            Threading Words.     (line 126)
* DOES>:                                 CREATE..DOES> details.
                                                              (line   6)
* DOES> implementation:                  DOES>.               (line   6)
* DOES> in a separate definition:        CREATE..DOES> details.
                                                              (line   8)
* DOES> in interpretation state:         CREATE..DOES> details.
                                                              (line  43)
* DOES> of non-CREATEd words:            core-ambcond.        (line 188)
* does> tutorial:                        Defining Words Tutorial.
                                                              (line   6)
* DOES>, visibility of current definition: core-idef.         (line 186)
* does>-code:                            Threading Words.     (line 109)
* DOES>-code:                            DOES>.               (line   6)
* DOES>-parts, stack effect:             User-defined defining words using CREATE.
                                                              (line 112)
* dofield,:                              Threading Words.     (line  47)
* dofield::                              Threading Words.     (line  97)
* DONE:                                  Counted Loops.       (line 259)
* double precision arithmetic words:     Double precision.    (line   6)
* double words, ambiguous conditions:    double-ambcond.      (line   6)
* double words, system documentation:    The optional Double Number word set.
                                                              (line   6)
* double%:                               Structure Glossary.  (line  30)
* double-cell numbers, input format:     Literals in source code.
                                                              (line  27)
* doubly indirect threaded code:         gforthmi.            (line  44)
* douser,:                               Threading Words.     (line  41)
* douser::                               Threading Words.     (line  91)
* dovalue,:                              Threading Words.     (line  50)
* dovalue::                              Threading Words.     (line 100)
* dovar,:                                Threading Words.     (line  38)
* dovar::                                Threading Words.     (line  88)
* dpl:                                   Number Conversion.   (line  36)
* draw:                                  widget methods.      (line  60)
* draw-init:                             widget methods.      (line  57)
* drol:                                  Bitwise operations.  (line  97)
* drop:                                  Data stack.          (line   6)
* dror:                                  Bitwise operations.  (line 100)
* drshift:                               Bitwise operations.  (line  33)
* du/mod:                                Integer division.    (line  88)
* du<:                                   Numeric comparison.  (line  74)
* du<=:                                  Numeric comparison.  (line  76)
* du>:                                   Numeric comparison.  (line  78)
* du>=:                                  Numeric comparison.  (line  80)
* dump:                                  Examining data.      (line  57)
* dup:                                   Data stack.          (line  10)
* duration of a system clock tick:       facility-idef.       (line  14)
* dynamic allocation of memory:          Heap Allocation.     (line   6)
* Dynamic superinstructions with replication: Dynamic Superinstructions.
                                                              (line   6)
* Dynamically linked libraries in C interface: Declaring OS-level libraries.
                                                              (line   6)
* D^:                                    Locals definition words.
                                                              (line  49)
* early:                                 Class Declaration.   (line  26)
* early binding:                         Class Binding.       (line   6)
* edit:                                  Locating source code definitions.
                                                              (line  65)
* edit-line:                             Line input and conversion.
                                                              (line  18)
* editing in ACCEPT and EXPECT:          core-idef.           (line  17)
* eforth performance:                    Performance.         (line  22)
* ekey:                                  Single-key input.    (line  44)
* EKEY, encoding of keyboard events:     facility-idef.       (line   7)
* ekey>char:                             Single-key input.    (line  50)
* ekey>fkey:                             Single-key input.    (line  55)
* ekey>xchar:                            Single-key input.    (line  47)
* ekey?:                                 Single-key input.    (line  59)
* ekeyed:                                actor methods.       (line  30)
* elements of a Forth system:            Review - elements of a Forth system.
                                                              (line   6)
* ELSE:                                  Arbitrary control structures.
                                                              (line  58)
* Emacs and Gforth:                      Emacs and Gforth.    (line   6)
* emit:                                  Displaying characters and strings.
                                                              (line  13)
* EMIT and non-graphic characters:       core-idef.           (line  13)
* emit-file:                             General files.       (line  74)
* empty-buffer:                          Blocks.              (line 166)
* empty-buffers:                         Blocks.              (line 162)
* end-c-library:                         Defining library interfaces.
                                                              (line  54)
* end-class:                             Objects Glossary.    (line  57)
* end-class <1>:                         Basic Mini-OOF Usage.
                                                              (line  23)
* end-class usage:                       Basic Objects Usage. (line   8)
* end-class-noname:                      Objects Glossary.    (line  61)
* end-code:                              Assembler Definitions.
                                                              (line  58)
* end-interface:                         Objects Glossary.    (line  64)
* end-interface usage:                   Object Interfaces.   (line  27)
* end-interface-noname:                  Objects Glossary.    (line  68)
* end-methods:                           Objects Glossary.    (line  71)
* end-struct:                            Structure Glossary.  (line  32)
* end-struct usage:                      Structure Usage.     (line   6)
* end-structure:                         Forth200x Structures.
                                                              (line  46)
* endcase:                               Arbitrary control structures.
                                                              (line  90)
* ENDIF:                                 Arbitrary control structures.
                                                              (line  75)
* endless loop:                          Simple Loops.        (line  28)
* endof:                                 Arbitrary control structures.
                                                              (line 107)
* endscope:                              Where are locals visible by name?.
                                                              (line  13)
* endtry:                                Exception Handling.  (line 132)
* endtry-iferror:                        Exception Handling.  (line 211)
* engine:                                Engine.              (line   6)
* engine performance:                    Performance.         (line   6)
* engine portability:                    Portability.         (line   6)
* engine.s:                              Produced code.       (line   6)
* engines, gforth vs. gforth-fast vs. gforth-itc: Direct or Indirect Threaded?.
                                                              (line  39)
* entered:                               actor methods.       (line  42)
* environment:                           Environmental Queries.
                                                              (line 162)
* environment variable input format:     Literals in source code.
                                                              (line 107)
* environment variables:                 Environment variables.
                                                              (line   6)
* environment variables <1>:             gforthmi.            (line  44)
* environment wordset:                   Notation.            (line  41)
* environment-wordlist:                  Environmental Queries.
                                                              (line 158)
* environment?:                          Environmental Queries.
                                                              (line  11)
* ENVIRONMENT? string length, maximum:   core-idef.           (line  94)
* environmental queries:                 Environmental Queries.
                                                              (line   6)
* environmental restrictions:            Standard conformance.
                                                              (line  37)
* equality of floats:                    Floating Point.      (line 141)
* erase:                                 Memory Blocks.       (line  37)
* error messages:                        Error messages.      (line   6)
* error output, finding the source location in Emacs: Emacs and Gforth.
                                                              (line  21)
* error-color:                           Terminal output.     (line  39)
* error-hl-inv:                          Terminal output.     (line  42)
* error-hl-ul:                           Terminal output.     (line  45)
* etags.fs:                              Emacs Tags.          (line   6)
* evaluate:                              Input Sources.       (line  41)
* event-loop:                            Message queues.      (line  25)
* examining data and code:               Examining data.      (line   6)
* exception:                             Exception Handling.  (line  35)
* exception abort sequence of ABORT":    core-idef.           (line  75)
* exception source code:                 Locating exception source.
                                                              (line   6)
* exception when including source:       file-idef.           (line  33)
* exception words, implementation-defined options: exception-idef.
                                                              (line   6)
* exception words, system documentation: The optional Exception word set.
                                                              (line   6)
* exceptions:                            Exception Handling.  (line   6)
* exceptions <1>:                        Exception Handling.  (line  45)
* exceptions tutorial:                   Exceptions Tutorial. (line   6)
* executable image file:                 Running Image Files. (line  10)
* execute:                               Execution token.     (line  83)
* execute-exit:                          Execution token.     (line  86)
* execute-parsing:                       The Input Stream.    (line  71)
* execute-parsing-file:                  The Input Stream.    (line  87)
* execute-task:                          Basic multi-tasking. (line  59)
* executing code on startup:             Invoking Gforth.     (line 204)
* execution frequency:                   Code Coverage.       (line   6)
* execution semantics:                   Interpretation and Compilation Semantics.
                                                              (line  23)
* execution token:                       Introducing the Text Interpreter.
                                                              (line  44)
* execution token <1>:                   Execution token.     (line   6)
* execution token input format:          Literals in source code.
                                                              (line 113)
* execution token of last defined word:  Anonymous Definitions.
                                                              (line  28)
* execution token of words with undefined execution semantics: core-ambcond.
                                                              (line  24)
* execution tokens tutorial:             Execution Tokens Tutorial.
                                                              (line   6)
* exercises:                             Exercises.           (line   6)
* EXIT:                                  Calls and returns.   (line  44)
* exit in m: ... ;m:                     Method conveniences. (line  15)
* exitm:                                 Objects Glossary.    (line  75)
* exitm discussion:                      Method conveniences. (line  15)
* expand-where:                          Locating uses of a word.
                                                              (line  43)
* expect:                                Line input and conversion.
                                                              (line  64)
* EXPECT, display after end of input:    core-idef.           (line  71)
* EXPECT, editing:                       core-idef.           (line  17)
* explicit register declarations:        Portability.         (line  40)
* exponent too big for conversion (DF!, DF@, SF!, SF@): floating-ambcond.
                                                              (line  46)
* extend-mem:                            Heap Allocation.     (line  46)
* extend-structure:                      Forth200x Structures.
                                                              (line  42)
* extended records:                      Structure Usage.     (line  51)
* f!:                                    Memory Access.       (line  31)
* f! used with an address that is not float aligned: floating-ambcond.
                                                              (line  11)
* f*:                                    Floating Point.      (line  38)
* f**:                                   Floating Point.      (line  63)
* f+:                                    Floating Point.      (line  34)
* f,:                                    Dictionary allocation.
                                                              (line  44)
* f, stack item type:                    Notation.            (line  82)
* f-:                                    Floating Point.      (line  36)
* f-rot:                                 Floating point stack.
                                                              (line  27)
* f.:                                    Floating-point output.
                                                              (line   8)
* f.rdp:                                 Floating-point output.
                                                              (line  44)
* f.s:                                   Examining data.      (line  16)
* f.s-precision:                         Examining data.      (line  21)
* f/:                                    Floating Point.      (line  40)
* f0<:                                   Floating Point.      (line 169)
* f0<=:                                  Floating Point.      (line 171)
* f0<>:                                  Floating Point.      (line 173)
* f0=:                                   Floating Point.      (line 175)
* f0>:                                   Floating Point.      (line 177)
* f0>=:                                  Floating Point.      (line 179)
* f2*:                                   Floating Point.      (line  84)
* f2/:                                   Floating Point.      (line  87)
* f83name, stack item type:              Notation.            (line 115)
* F::                                    Locals definition words.
                                                              (line  61)
* f<:                                    Floating Point.      (line 161)
* f<=:                                   Floating Point.      (line 163)
* f<>:                                   Floating Point.      (line 159)
* f=:                                    Floating Point.      (line 157)
* f>:                                    Floating Point.      (line 165)
* f>=:                                   Floating Point.      (line 167)
* f>buf-rdp:                             Floating-point output.
                                                              (line  89)
* f>d:                                   Floating Point.      (line  30)
* F>D, integer part of float cannot be represented by d: floating-ambcond.
                                                              (line  69)
* f>l:                                   Locals implementation.
                                                              (line  26)
* f>s:                                   Floating Point.      (line  28)
* f>str-rdp:                             Floating-point output.
                                                              (line  83)
* f@:                                    Memory Access.       (line  28)
* f@ used with an address that is not float aligned: floating-ambcond.
                                                              (line  11)
* f@localn:                              Locals implementation.
                                                              (line  16)
* FA::                                   Locals definition words.
                                                              (line  64)
* fabs:                                  Floating Point.      (line  44)
* facility words, ambiguous conditions:  facility-ambcond.    (line   6)
* facility words, implementation-defined options: facility-idef.
                                                              (line   6)
* facility words, system documentation:  The optional Facility word set.
                                                              (line   6)
* facos:                                 Floating Point.      (line 117)
* FACOS, |float|>1:                      floating-ambcond.    (line  66)
* facosh:                                Floating Point.      (line 133)
* FACOSH, float<1:                       floating-ambcond.    (line  50)
* factoring:                             Introduction.        (line  29)
* factoring similar colon definitions:   CREATE..DOES> applications.
                                                              (line   8)
* factoring tutorial:                    Factoring Tutorial.  (line   6)
* fade-color::                           widget methods.      (line 142)
* falign:                                Dictionary allocation.
                                                              (line  86)
* faligned:                              Address arithmetic.  (line  79)
* falog:                                 Floating Point.      (line  81)
* false:                                 Boolean Flags.       (line  14)
* fam (file access method):              General files.       (line   9)
* fasin:                                 Floating Point.      (line 115)
* FASIN, |float|>1:                      floating-ambcond.    (line  66)
* fasinh:                                Floating Point.      (line 131)
* FASINH, float<0:                       floating-ambcond.    (line  61)
* fast-throw:                            Exception Handling.  (line  15)
* fatan:                                 Floating Point.      (line 119)
* fatan2:                                Floating Point.      (line 121)
* FATAN2, both arguments are equal to zero: floating-ambcond. (line  29)
* fatanh:                                Floating Point.      (line 135)
* FATANH, |float|>1:                     floating-ambcond.    (line  66)
* faxpy:                                 Floating Point.      (line 100)
* fclearstack:                           Examining data.      (line  46)
* fconstant:                             Constants.           (line  35)
* fcopysign:                             Floating Point.      (line  46)
* fcos:                                  Floating Point.      (line 108)
* fcosh:                                 Floating Point.      (line 127)
* fdepth:                                Examining data.      (line  39)
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
                                                              (line   6)
* fdrop:                                 Floating point stack.
                                                              (line   6)
* fdup:                                  Floating point stack.
                                                              (line  10)
* fe.:                                   Floating-point output.
                                                              (line  12)
* fexp:                                  Floating Point.      (line  68)
* fexpm1:                                Floating Point.      (line  70)
* ffield::                               Forth200x Structures.
                                                              (line  62)
* ffourth:                               Floating point stack.
                                                              (line  16)
* field:                                 Structure Glossary.  (line  37)
* field naming convention:               Structure Naming Convention.
                                                              (line  14)
* field usage:                           Structure Usage.     (line   6)
* field usage in class definition:       Basic Objects Usage. (line  29)
* field::                                Forth200x Structures.
                                                              (line  56)
* file access methods used:              file-idef.           (line   7)
* file exceptions:                       file-idef.           (line  14)
* file input nesting, maximum depth:     file-idef.           (line  42)
* file line terminator:                  file-idef.           (line  18)
* file name format:                      file-idef.           (line  23)
* file search path:                      Search Paths.        (line   6)
* file words, ambiguous conditions:      file-ambcond.        (line   6)
* file words, implementation-defined options: file-idef.      (line   6)
* file words, system documentation:      The optional File-Access word set.
                                                              (line   6)
* file-eof?:                             General files.       (line  67)
* file-handling:                         General files.       (line   6)
* file-position:                         General files.       (line  80)
* file-size:                             General files.       (line  84)
* file-status:                           General files.       (line  78)
* FILE-STATUS, returned information:     file-idef.           (line  27)
* file>fpath:                            Source Search Paths. (line  15)
* file>path:                             General Search Paths.
                                                              (line  17)
* filename-match:                        Directories.         (line  38)
* filenames in assertion output:         Assertions.          (line  71)
* filenames in ~~ output:                Debugging.           (line  42)
* files:                                 Files.               (line   6)
* files containing blocks:               file-idef.           (line  49)
* files containing Forth code, tutorial: Using files for Forth code Tutorial.
                                                              (line   6)
* files tutorial:                        Files Tutorial.      (line   6)
* fill:                                  Memory Blocks.       (line  34)
* find:                                  Word Lists.          (line 100)
* find-name:                             Name token.          (line  20)
* find-name-in:                          Name token.          (line  24)
* first definition:                      Your first definition.
                                                              (line   6)
* first field optimization:              Structure Usage.     (line  71)
* first field optimization, implementation: Structure Implementation.
                                                              (line  24)
* fkey.:                                 Single-key input.    (line 178)
* flags on the command line:             Invoking Gforth.     (line   6)
* flags tutorial:                        Flags and Comparisons Tutorial.
                                                              (line   6)
* flavours of locals:                    Gforth locals.       (line  42)
* FLiteral:                              Literals.            (line  61)
* fln:                                   Floating Point.      (line  73)
* FLN, float<=0:                         floating-ambcond.    (line  57)
* flnp1:                                 Floating Point.      (line  75)
* FLNP1, float<=-1:                      floating-ambcond.    (line  53)
* float:                                 Address arithmetic.  (line  73)
* float%:                                Structure Glossary.  (line  44)
* float+:                                Address arithmetic.  (line  70)
* float/:                                Address arithmetic.  (line  77)
* floating point arithmetic words:       Floating Point.      (line   6)
* floating point numbers, format and range: floating-idef.    (line   7)
* floating point tutorial:               Floating Point Tutorial.
                                                              (line   6)
* floating point unidentified fault, integer division: core-ambcond.
                                                              (line  36)
* floating-point arithmetic, pitfalls:   Floating Point.      (line  12)
* floating-point comparisons:            Floating Point.      (line 141)
* floating-point constants:              Floating Point.      (line 181)
* floating-point dividing by zero:       floating-ambcond.    (line  41)
* floating-point numbers, input format:  Literals in source code.
                                                              (line  50)
* floating-point numbers, rounding or truncation: floating-idef.
                                                              (line  14)
* floating-point output:                 Floating-point output.
                                                              (line   6)
* floating-point result out of range:    floating-ambcond.    (line  15)
* floating-point stack:                  Stack Manipulation.  (line  11)
* floating-point stack in the standard:  Stack Manipulation.  (line   6)
* floating-point stack manipulation words: Floating point stack.
                                                              (line   6)
* floating-point stack size:             floating-idef.       (line  20)
* floating-point stack width:            floating-idef.       (line  26)
* Floating-point unidentified fault:     Integer division.    (line   6)
* Floating-point unidentified fault (on integer division): Integer division.
                                                              (line 133)
* floating-point unidentified fault, F>D: floating-ambcond.   (line  69)
* floating-point unidentified fault, FACOS, FASIN or FATANH: floating-ambcond.
                                                              (line  66)
* floating-point unidentified fault, FACOSH: floating-ambcond.
                                                              (line  50)
* floating-point unidentified fault, FASINH or FSQRT: floating-ambcond.
                                                              (line  61)
* floating-point unidentified fault, FLN or FLOG: floating-ambcond.
                                                              (line  57)
* floating-point unidentified fault, FLNP1: floating-ambcond. (line  53)
* floating-point unidentified fault, FP divide-by-zero: floating-ambcond.
                                                              (line  41)
* floating-point words, ambiguous conditions: floating-ambcond.
                                                              (line   6)
* floating-point words, implementation-defined options: floating-idef.
                                                              (line   6)
* floating-point words, system documentation: The optional Floating-Point word set.
                                                              (line   6)
* floating-stack:                        Environmental Queries.
                                                              (line  69)
* floats:                                Address arithmetic.  (line  67)
* flog:                                  Floating Point.      (line  78)
* FLOG, float<=0:                        floating-ambcond.    (line  57)
* floor:                                 Floating Point.      (line  53)
* FLOORED:                               Environmental Queries.
                                                              (line  48)
* floored division:                      Integer division.    (line  11)
* flush:                                 Blocks.              (line 181)
* flush-file:                            General files.       (line  76)
* flush-icache:                          Assembler Definitions.
                                                              (line  75)
* fm/mod:                                Integer division.    (line  79)
* fmax:                                  Floating Point.      (line  49)
* fmin:                                  Floating Point.      (line  51)
* fnegate:                               Floating Point.      (line  42)
* fnip:                                  Floating point stack.
                                                              (line   8)
* focus:                                 actor methods.       (line  36)
* FOR:                                   Counted Loops.       (line 221)
* FOR loops:                             Counted Loops.       (line 163)
* foreign language interface:            C Interface.         (line   6)
* FORGET, deleting the compilation word list: programming-ambcond.
                                                              (line   7)
* FORGET, name can’t be found:           programming-ambcond. (line  16)
* FORGET, removing a needed definition:  programming-ambcond. (line  33)
* forgeting words:                       Forgetting words.    (line   6)
* FORK:                                  Regular Expressions. (line  18)
* form:                                  Terminal output.     (line  19)
* format and range of floating point numbers: floating-idef.  (line   7)
* format of glossary entries:            Notation.            (line   6)
* formatted numeric output:              Formatted numeric output.
                                                              (line   6)
* Forth:                                 Word Lists.          (line  81)
* Forth - an introduction:               Introduction.        (line   6)
* Forth mode in Emacs:                   Emacs and Gforth.    (line   6)
* Forth source files:                    Forth source files.  (line   6)
* Forth Tutorial:                        Tutorial.            (line   6)
* forth-recognize:                       Dealing with existing Recognizers.
                                                              (line  77)
* forth-recognizer:                      Dealing with existing Recognizers.
                                                              (line  80)
* Forth-related information:             Forth-related information.
                                                              (line   6)
* forth-wordlist:                        Word Lists.          (line  29)
* forth.el:                              Emacs and Gforth.    (line   6)
* forward:                               Forward.             (line  11)
* fourth:                                Data stack.          (line  16)
* fover:                                 Floating point stack.
                                                              (line  12)
* FP output:                             Floating-point output.
                                                              (line   6)
* FP tutorial:                           Floating Point Tutorial.
                                                              (line   6)
* fp!:                                   Stack pointer manipulation.
                                                              (line  18)
* fp.:                                   Floating-point output.
                                                              (line  20)
* fp0:                                   Stack pointer manipulation.
                                                              (line  13)
* fp@:                                   Stack pointer manipulation.
                                                              (line  16)
* fpath:                                 Source Search Paths. (line  10)
* fpick:                                 Floating point stack.
                                                              (line  22)
* free:                                  Heap Allocation.     (line  23)
* free-closure:                          Closures.            (line  50)
* free-mem-var:                          Heap Allocation.     (line  42)
* frequently asked questions:            Forth-related information.
                                                              (line   6)
* frot:                                  Floating point stack.
                                                              (line  25)
* fround:                                Floating Point.      (line  57)
* fs.:                                   Floating-point output.
                                                              (line  16)
* fsin:                                  Floating Point.      (line 106)
* fsincos:                               Floating Point.      (line 110)
* fsinh:                                 Floating Point.      (line 125)
* fsqrt:                                 Floating Point.      (line  66)
* FSQRT, float<0:                        floating-ambcond.    (line  61)
* fswap:                                 Floating point stack.
                                                              (line  20)
* ftan:                                  Floating Point.      (line 113)
* FTAN on an argument r1 where cos(r1) is zero: floating-ambcond.
                                                              (line  33)
* ftanh:                                 Floating Point.      (line 129)
* fthird:                                Floating point stack.
                                                              (line  14)
* ftrunc:                                Floating Point.      (line  60)
* ftuck:                                 Floating point stack.
                                                              (line  18)
* fully relocatable image files:         Fully Relocatable Image Files.
                                                              (line   6)
* functions, tutorial:                   Colon Definitions Tutorial.
                                                              (line   6)
* fvalue:                                Values.              (line  29)
* fvariable:                             Variables.           (line  41)
* fvarue:                                Varues.              (line  19)
* F^:                                    Locals definition words.
                                                              (line  67)
* f_, stack item type:                   Notation.            (line 103)
* f~:                                    Floating Point.      (line 153)
* f~abs:                                 Floating Point.      (line 150)
* f~rel:                                 Floating Point.      (line 147)
* g:                                     Locating source code definitions.
                                                              (line  49)
* gap:                                   widget methods.      (line  30)
* gdb disassembler:                      Common Disassembler. (line   6)
* general control structures (case):     General control structures with CASE.
                                                              (line   6)
* general files:                         General files.       (line   6)
* get:                                   actor methods.       (line  54)
* get-block-fid:                         Blocks.              (line 131)
* get-current:                           Word Lists.          (line  38)
* get-dir:                               Directories.         (line  43)
* get-order:                             Word Lists.          (line  44)
* get-recognizers:                       Dealing with existing Recognizers.
                                                              (line  64)
* getenv:                                Passing Commands to the OS.
                                                              (line  29)
* gforth:                                Environmental Queries.
                                                              (line 135)
* GFORTH – environment variable:         Environment variables.
                                                              (line  34)
* GFORTH – environment variable <1>:     gforthmi.            (line  44)
* Gforth - leaving:                      Leaving Gforth.      (line   6)
* gforth engine:                         Direct or Indirect Threaded?.
                                                              (line  39)
* Gforth environment:                    Gforth Environment.  (line   6)
* Gforth extensions:                     Standard vs Extensions.
                                                              (line   6)
* Gforth files:                          Gforth Files.        (line   6)
* Gforth locals:                         Gforth locals.       (line   6)
* Gforth performance:                    Performance.         (line   6)
* Gforth stability:                      Stability Goals.     (line   6)
* gforth-ditc:                           gforthmi.            (line  44)
* gforth-fast and backtraces:            Error messages.      (line  53)
* gforth-fast engine:                    Direct or Indirect Threaded?.
                                                              (line  39)
* gforth-fast, difference from gforth:   Error messages.      (line  53)
* gforth-itc engine:                     Direct or Indirect Threaded?.
                                                              (line  43)
* gforth.el:                             Emacs and Gforth.    (line   6)
* gforth.el, installation:               Installing gforth.el.
                                                              (line   6)
* gforth.fi, relocatability:             Fully Relocatable Image Files.
                                                              (line   6)
* GFORTHD – environment variable:        Environment variables.
                                                              (line  36)
* GFORTHD – environment variable <1>:    gforthmi.            (line  44)
* GFORTHHIST – environment variable:     Environment variables.
                                                              (line   8)
* gforthmi:                              gforthmi.            (line   6)
* GFORTHPATH – environment variable:     Environment variables.
                                                              (line  11)
* GFORTHSYSTEMPREFIX – environment variable: Environment variables.
                                                              (line  28)
* gg:                                    Locating uses of a word.
                                                              (line  25)
* giving a name to a library interface:  Defining library interfaces.
                                                              (line   6)
* glossary notation format:              Notation.            (line   6)
* GNU C for the engine:                  Portability.         (line  23)
* goals of the Gforth project:           Goals.               (line   6)
* h:                                     widget methods.      (line  24)
* h.:                                    Simple numeric output.
                                                              (line  17)
* halt:                                  Basic multi-tasking. (line  75)
* header fields:                         Header fields.       (line   6)
* header methods:                        Header methods.      (line   6)
* header space:                          Word Lists.          (line   6)
* heap allocation:                       Heap Allocation.     (line   6)
* heap-new:                              Objects Glossary.    (line  78)
* heap-new discussion:                   Creating objects.    (line   6)
* heap-new usage:                        Basic Objects Usage. (line  51)
* help:                                  Help on Gforth.      (line   6)
* help <1>:                              Help on Gforth.      (line   9)
* here:                                  Dictionary allocation.
                                                              (line  24)
* hex:                                   Number Conversion.   (line  28)
* hex.:                                  Simple numeric output.
                                                              (line  21)
* hglue:                                 widget methods.      (line  69)
* hglue@:                                widget methods.      (line  78)
* hide:                                  actor methods.       (line  51)
* highlighting Forth code in Emacs:      Hilighting.          (line   6)
* hilighting Forth code in Emacs:        Hilighting.          (line   6)
* history file:                          Command-line editing.
                                                              (line  39)
* hmcopy,:                               Threading Words.     (line  28)
* hold:                                  Formatted numeric output.
                                                              (line  62)
* holds:                                 Formatted numeric output.
                                                              (line  66)
* hooks in the text interpreter:         Text Interpreter Hooks.
                                                              (line   6)
* how::                                  Class Declaration.   (line  39)
* hybrid direct/indirect threaded code:  Direct or Indirect Threaded?.
                                                              (line  31)
* i:                                     Counted Loops.       (line 236)
* i':                                    Counted Loops.       (line 245)
* I/O - blocks:                          Blocks.              (line   6)
* I/O - file-handling:                   Files.               (line   6)
* I/O - keyboard and display:            Other I/O.           (line   6)
* I/O - see input:                       Line input and conversion.
                                                              (line   6)
* I/O exception in block transfer:       block-ambcond.       (line  12)
* id.:                                   Name token.          (line  65)
* IDE (integrated development environment): Locating source code definitions.
                                                              (line   6)
* IF:                                    Arbitrary control structures.
                                                              (line  16)
* IF control structure:                  Selection.           (line   6)
* if, tutorial:                          Conditional execution Tutorial.
                                                              (line   6)
* iferror:                               Exception Handling.  (line 135)
* image file:                            Image Files.         (line   6)
* image file background:                 Image File Background.
                                                              (line   6)
* image file initialization sequence:    Modifying the Startup Sequence.
                                                              (line   6)
* image file invocation:                 Running Image Files. (line   6)
* image file loader:                     Image File Background.
                                                              (line  41)
* image file, data-relocatable:          Data-Relocatable Image Files.
                                                              (line   6)
* image file, executable:                Running Image Files. (line  10)
* image file, fully relocatable:         Fully Relocatable Image Files.
                                                              (line   6)
* image file, non-relocatable:           Non-Relocatable Image Files.
                                                              (line   6)
* image file, stack and dictionary sizes: Stack and Dictionary Sizes.
                                                              (line   6)
* image file, turnkey applications:      Modifying the Startup Sequence.
                                                              (line  22)
* image license:                         Image Licensing Issues.
                                                              (line   6)
* immediate:                             Interpretation and Compilation Semantics.
                                                              (line  48)
* immediate words:                       How does that work?. (line  85)
* immediate words <1>:                   Interpretation and Compilation Semantics.
                                                              (line  46)
* immediate, tutorial:                   Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* immediate?:                            Header methods.      (line 168)
* implementation:                        Objects Glossary.    (line  81)
* implementation of locals:              Locals implementation.
                                                              (line   6)
* implementation of structures:          Structure Implementation.
                                                              (line   6)
* implementation usage:                  Object Interfaces.   (line  27)
* implementation-defined options, block words: block-idef.    (line   6)
* implementation-defined options, core words: core-idef.      (line   6)
* implementation-defined options, exception words: exception-idef.
                                                              (line   6)
* implementation-defined options, facility words: facility-idef.
                                                              (line   6)
* implementation-defined options, file words: file-idef.      (line   6)
* implementation-defined options, floating-point words: floating-idef.
                                                              (line   6)
* implementation-defined options, locals words: locals-idef.  (line   6)
* implementation-defined options, memory-allocation words: memory-idef.
                                                              (line   6)
* implementation-defined options, programming-tools words: programming-idef.
                                                              (line   6)
* implementation-defined options, search-order words: search-idef.
                                                              (line   6)
* in-lining of constants:                Constants.           (line  50)
* include:                               Forth source files.  (line  46)
* include search path:                   Search Paths.        (line   6)
* include, placement in files:           Emacs Tags.          (line   6)
* include-file:                          Forth source files.  (line  32)
* INCLUDE-FILE, file-id is invalid:      file-ambcond.        (line  15)
* INCLUDE-FILE, I/O exception reading or closing file-id: file-ambcond.
                                                              (line  19)
* include-locale:                        i18n and l10n.       (line  52)
* included:                              Forth source files.  (line  36)
* INCLUDED, I/O exception reading or closing file-id: file-ambcond.
                                                              (line  19)
* INCLUDED, named file cannot be opened: file-ambcond.        (line  23)
* included-locale:                       i18n and l10n.       (line  49)
* included?:                             Forth source files.  (line  39)
* including files:                       Forth source files.  (line   6)
* including files, stack effect:         Forth source files.  (line  20)
* indentation of Forth code in Emacs:    Auto-Indentation.    (line   6)
* indirect threaded inner interpreter:   Threading.           (line  12)
* infile-execute:                        Redirection.         (line  29)
* infile-id:                             Redirection.         (line  32)
* infinity:                              Floating Point.      (line 185)
* info-color:                            Terminal output.     (line  51)
* inheritance:                           Object-Oriented Terminology.
                                                              (line  43)
* init-asm:                              Assembler Definitions.
                                                              (line  36)
* init-buffer:                           Heap Allocation.     (line  62)
* init-object:                           Objects Glossary.    (line  85)
* init-object discussion:                Creating objects.    (line  12)
* initialization of locals:              Gforth locals.       (line  90)
* initialization sequence of image file: Modifying the Startup Sequence.
                                                              (line   6)
* initiate:                              Basic multi-tasking. (line  34)
* inline::                               Colon Definitions.   (line  24)
* inner interpreter implementation:      Threading.           (line   6)
* inner interpreter optimization:        Scheduling.          (line   6)
* inner interpreter, direct threaded:    Threading.           (line  23)
* inner interpreter, indirect threaded:  Threading.           (line  12)
* input buffer:                          The Text Interpreter.
                                                              (line  20)
* input format for body-relative addresses: Literals in source code.
                                                              (line 122)
* input format for characters/code points: Literals in source code.
                                                              (line  43)
* input format for double-cell numbers:  Literals in source code.
                                                              (line  27)
* input format for environment variables: Literals in source code.
                                                              (line 107)
* input format for execution tokens:     Literals in source code.
                                                              (line 113)
* input format for floating-point numbers: Literals in source code.
                                                              (line  50)
* input format for name tokens:          Literals in source code.
                                                              (line 119)
* input format for single-cell numbers:  Literals in source code.
                                                              (line   6)
* input format for strings:              Literals in source code.
                                                              (line  97)
* input from pipes:                      Gforth in pipes.     (line   9)
* input line size, maximum:              file-idef.           (line  46)
* input line terminator:                 core-idef.           (line  79)
* Input Redirection:                     Redirection.         (line   6)
* input sources:                         Input Sources.       (line   6)
* input stream:                          The Input Stream.    (line   6)
* input, linewise from terminal:         Line input and conversion.
                                                              (line   6)
* input, single-key:                     Single-key input.    (line   6)
* input-color:                           Terminal output.     (line  57)
* insert:                                Memory Blocks.       (line  43)
* inst-value:                            Objects Glossary.    (line  89)
* inst-value usage:                      Method conveniences. (line  44)
* inst-value visibility:                 Classes and Scoping. (line  12)
* inst-var:                              Objects Glossary.    (line  93)
* inst-var implementation:               Objects Implementation.
                                                              (line  53)
* inst-var usage:                        Method conveniences. (line  22)
* inst-var visibility:                   Classes and Scoping. (line  12)
* instance variables:                    Object-Oriented Terminology.
                                                              (line  17)
* instruction pointer:                   Threading.           (line  16)
* insufficient data stack or return stack space: core-ambcond.
                                                              (line  41)
* insufficient space for loop control parameters: core-ambcond.
                                                              (line  54)
* insufficient space in the dictionary:  core-ambcond.        (line  57)
* INT-[I]:                               Interpreter Directives.
                                                              (line  78)
* integer types, ranges:                 core-idef.           (line 119)
* integrated development environment:    Locating source code definitions.
                                                              (line   6)
* interface:                             Objects Glossary.    (line  97)
* interface implementation:              Objects Implementation.
                                                              (line  64)
* interface to C functions:              C Interface.         (line   6)
* interface usage:                       Object Interfaces.   (line  27)
* interfaces for objects:                Object Interfaces.   (line   6)
* interpret:                             The Text Interpreter.
                                                              (line 136)
* interpret state:                       The Text Interpreter.
                                                              (line  11)
* Interpret/Compile states:              Interpret/Compile states.
                                                              (line   6)
* interpret/compile::                    Combined words.      (line   9)
* interpretation semantics:              How does that work?. (line  57)
* interpretation semantics <1>:          Interpretation and Compilation Semantics.
                                                              (line   6)
* interpretation semantics tutorial:     Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* interpreter - outer:                   The Text Interpreter.
                                                              (line   6)
* interpreter directives:                Interpreter Directives.
                                                              (line   6)
* Interpreting a compile-only word:      core-ambcond.        (line  64)
* Interpreting a compile-only word, for a local: locals-ambcond.
                                                              (line   7)
* interpreting a word with undefined interpretation semantics: core-ambcond.
                                                              (line  64)
* invalid block number:                  block-ambcond.       (line  16)
* Invalid memory address:                core-ambcond.        (line  13)
* Invalid memory address, stack overflow: core-ambcond.       (line  41)
* Invalid name argument, TO:             core-ambcond.        (line 161)
* Invalid name argument, TO <1>:         locals-ambcond.      (line  12)
* invert:                                Bitwise operations.  (line  12)
* invoking a selector:                   Object-Oriented Terminology.
                                                              (line  31)
* invoking Gforth:                       Invoking Gforth.     (line   6)
* invoking image files:                  Running Image Files. (line   6)
* ior type description:                  Notation.            (line 113)
* ior values and meaning:                file-idef.           (line  36)
* ior values and meaning <1>:            memory-idef.         (line   7)
* IS:                                    Deferred Words.      (line  84)
* items on the stack after interpretation: Stack depth changes.
                                                              (line   6)
* iterate over array:                    Counted Loops.       (line 124)
* j:                                     Counted Loops.       (line 239)
* JOIN:                                  Regular Expressions. (line  21)
* k:                                     Counted Loops.       (line 242)
* k-alt-mask:                            Single-key input.    (line 123)
* k-backspace:                           Single-key input.    (line 131)
* k-ctrl-mask:                           Single-key input.    (line 121)
* k-delete:                              Single-key input.    (line  85)
* k-down:                                Single-key input.    (line  70)
* k-end:                                 Single-key input.    (line  75)
* k-enter:                               Single-key input.    (line 129)
* k-eof:                                 Single-key input.    (line 152)
* k-f1:                                  Single-key input.    (line  90)
* k-f10:                                 Single-key input.    (line 108)
* k-f11:                                 Single-key input.    (line 110)
* k-f12:                                 Single-key input.    (line 112)
* k-f2:                                  Single-key input.    (line  92)
* k-f3:                                  Single-key input.    (line  94)
* k-f4:                                  Single-key input.    (line  96)
* k-f5:                                  Single-key input.    (line  98)
* k-f6:                                  Single-key input.    (line 100)
* k-f7:                                  Single-key input.    (line 102)
* k-f8:                                  Single-key input.    (line 104)
* k-f9:                                  Single-key input.    (line 106)
* k-home:                                Single-key input.    (line  72)
* k-insert:                              Single-key input.    (line  83)
* k-left:                                Single-key input.    (line  64)
* k-mute:                                Single-key input.    (line 143)
* k-next:                                Single-key input.    (line  80)
* k-pause:                               Single-key input.    (line 141)
* k-prior:                               Single-key input.    (line  77)
* k-right:                               Single-key input.    (line  66)
* k-sel:                                 Single-key input.    (line 149)
* k-shift-mask:                          Single-key input.    (line 119)
* k-tab:                                 Single-key input.    (line 133)
* k-up:                                  Single-key input.    (line  68)
* k-voldown:                             Single-key input.    (line 147)
* k-volup:                               Single-key input.    (line 145)
* k-winch:                               Single-key input.    (line 137)
* kern*.fi, relocatability:              Fully Relocatable Image Files.
                                                              (line   6)
* kerning:                               widget methods.      (line  36)
* key:                                   Single-key input.    (line   9)
* key-file:                              General files.       (line  54)
* key-ior:                               Single-key input.    (line  12)
* key?:                                  Single-key input.    (line  16)
* key?-file:                             General files.       (line  61)
* keyboard events, encoding in EKEY:     facility-idef.       (line   7)
* kill:                                  Basic multi-tasking. (line  70)
* kill-task:                             Basic multi-tasking. (line  67)
* Kuehling, David:                       Emacs and Gforth.    (line   6)
* l:                                     Locating source code definitions.
                                                              (line  38)
* l!:                                    Special Memory Accesses.
                                                              (line  45)
* L":                                    i18n and l10n.       (line  18)
* l,:                                    Dictionary allocation.
                                                              (line  57)
* l>s:                                   Special Memory Accesses.
                                                              (line 106)
* l@:                                    Special Memory Accesses.
                                                              (line  42)
* labels as values:                      Threading.           (line   6)
* lalign:                                Address arithmetic.  (line 133)
* laligned:                              Address arithmetic.  (line 130)
* LANG – environment variable:           Environment variables.
                                                              (line  16)
* Language:                              i18n and l10n.       (line  37)
* last word was headerless:              core-ambcond.        (line 158)
* lastfit:                               widget methods.      (line  66)
* late binding:                          Class Binding.       (line   6)
* latest:                                Name token.          (line  28)
* latestnt:                              Name token.          (line  32)
* latestxt:                              Anonymous Definitions.
                                                              (line  28)
* lbe:                                   Special Memory Accesses.
                                                              (line  73)
* LC_ALL – environment variable:         Environment variables.
                                                              (line  18)
* LC_CTYPE – environment variable:       Environment variables.
                                                              (line  20)
* LEAVE:                                 Counted Loops.       (line 251)
* leaving definitions, tutorial:         Leaving definitions or loops Tutorial.
                                                              (line   6)
* leaving Gforth:                        Leaving Gforth.      (line   6)
* leaving loops, tutorial:               Leaving definitions or loops Tutorial.
                                                              (line   6)
* left:                                  actor methods.       (line  45)
* length of a line affected by \:        block-idef.          (line  11)
* lfield::                               Forth200x Structures.
                                                              (line  74)
* lib-error:                             Low-Level C Interface Words.
                                                              (line  10)
* lib-sym:                               Low-Level C Interface Words.
                                                              (line   8)
* Libraries in C interface:              Declaring OS-level libraries.
                                                              (line   6)
* library interface names:               Defining library interfaces.
                                                              (line   6)
* license:                               Help on Gforth.      (line  22)
* license for images:                    Image Licensing Issues.
                                                              (line   6)
* lifetime of locals:                    How long do locals live?.
                                                              (line   6)
* light-mode:                            Terminal output.     (line  69)
* line input from terminal:              Line input and conversion.
                                                              (line   6)
* line terminator on input:              core-idef.           (line  79)
* line-end-hook:                         Text Interpreter Hooks.
                                                              (line  12)
* list:                                  Blocks.              (line 138)
* LIST display format:                   block-idef.          (line   7)
* list-size:                             Locals implementation.
                                                              (line  98)
* Literal:                               Literals.            (line  42)
* literal tutorial:                      Literal Tutorial.    (line   6)
* Literals:                              Literals.            (line   6)
* Literals (in source code):             Literals in source code.
                                                              (line   6)
* literals for characters and strings:   String and character literals.
                                                              (line   6)
* little-endian:                         Special Memory Accesses.
                                                              (line   6)
* ll:                                    Locating uses of a word.
                                                              (line  30)
* lle:                                   Special Memory Accesses.
                                                              (line  77)
* load:                                  Blocks.              (line 184)
* load-cov:                              Code Coverage.       (line  68)
* loader for image files:                Image File Background.
                                                              (line  41)
* loading files at startup:              Invoking Gforth.     (line 204)
* loading Forth code, tutorial:          Using files for Forth code Tutorial.
                                                              (line   6)
* local in interpretation state:         locals-ambcond.      (line   7)
* local variables, tutorial:             Local Variables Tutorial.
                                                              (line   6)
* locale and case-sensitivity:           core-idef.           (line  34)
* locale!:                               i18n and l10n.       (line  33)
* locale-csv:                            i18n and l10n.       (line  55)
* locale-csv-out:                        i18n and l10n.       (line  65)
* locale-file:                           i18n and l10n.       (line  46)
* locale@:                               i18n and l10n.       (line  30)
* locals:                                Locals.              (line   6)
* locals and return stack:               Return stack.        (line   6)
* locals flavours:                       Gforth locals.       (line  42)
* locals implementation:                 Locals implementation.
                                                              (line   6)
* locals information on the control-flow stack: Locals implementation.
                                                              (line  84)
* locals initialization:                 Gforth locals.       (line  90)
* locals lifetime:                       How long do locals live?.
                                                              (line   6)
* locals programming style:              Locals programming style.
                                                              (line   6)
* locals stack:                          Stack Manipulation.  (line  16)
* locals stack <1>:                      Locals implementation.
                                                              (line   6)
* locals types:                          Gforth locals.       (line  34)
* locals visibility:                     Where are locals visible by name?.
                                                              (line   6)
* locals words, ambiguous conditions:    locals-ambcond.      (line   6)
* locals words, implementation-defined options: locals-idef.  (line   6)
* locals words, system documentation:    The optional Locals word set.
                                                              (line   6)
* locals, default type:                  Gforth locals.       (line  79)
* locals, Gforth style:                  Gforth locals.       (line   6)
* locals, maximum number in a definition: locals-idef.        (line   7)
* locals, Standard Forth style:          Standard Forth locals.
                                                              (line   6)
* locate:                                Locating source code definitions.
                                                              (line  26)
* lock:                                  Semaphores.          (line  18)
* log2:                                  Bitwise operations.  (line  58)
* long long:                             Portability.         (line  23)
* LOOP:                                  Counted Loops.       (line 224)
* loop control parameters not available: core-ambcond.        (line 153)
* loops without count:                   Simple Loops.        (line   6)
* loops, counted:                        Counted Loops.       (line   6)
* loops, counted, tutorial:              Counted loops Tutorial.
                                                              (line   6)
* loops, endless:                        Simple Loops.        (line  28)
* loops, indefinite, tutorial:           General Loops Tutorial.
                                                              (line   6)
* lp!:                                   Stack pointer manipulation.
                                                              (line  33)
* lp! <1>:                               Locals implementation.
                                                              (line  21)
* lp0:                                   Stack pointer manipulation.
                                                              (line  27)
* lp@:                                   Stack pointer manipulation.
                                                              (line  30)
* lp@ <1>:                               Locals implementation.
                                                              (line  18)
* lrol:                                  Bitwise operations.  (line  83)
* lror:                                  Bitwise operations.  (line  87)
* lshift:                                Bitwise operations.  (line  19)
* LSHIFT, large shift counts:            core-ambcond.        (line 182)
* LU":                                   i18n and l10n.       (line  23)
* m*:                                    Mixed precision.     (line   8)
* m*/:                                   Integer division.    (line 125)
* m+:                                    Mixed precision.     (line   6)
* m::                                    Objects Glossary.    (line 100)
* m: usage:                              Method conveniences. (line  12)
* macros:                                Compiling words.     (line   6)
* Macros:                                Macros.              (line   6)
* macros, advanced tutorial:             Advanced macros Tutorial.
                                                              (line   6)
* macros-wordlist:                       Substitute.          (line  14)
* magenta-input:                         Terminal output.     (line  78)
* make-latest:                           Making a word current.
                                                              (line  10)
* map-vocs:                              Word Lists.          (line 164)
* mapping block ranges to files:         file-idef.           (line  49)
* marker:                                Forgetting words.    (line   9)
* max:                                   Single precision.    (line  33)
* MAX-CHAR:                              Environmental Queries.
                                                              (line  28)
* MAX-D:                                 Environmental Queries.
                                                              (line  57)
* max-float:                             Environmental Queries.
                                                              (line  79)
* MAX-N:                                 Environmental Queries.
                                                              (line  51)
* MAX-U:                                 Environmental Queries.
                                                              (line  54)
* MAX-UD:                                Environmental Queries.
                                                              (line  60)
* MAX-XCHAR:                             Environmental Queries.
                                                              (line  90)
* maxalign:                              Dictionary allocation.
                                                              (line  98)
* maxaligned:                            Address arithmetic.  (line 109)
* maxdepth-.s:                           Examining data.      (line  25)
* maximum depth of file input nesting:   file-idef.           (line  42)
* maximum number of locals in a definition: locals-idef.      (line   7)
* maximum number of word lists in search order: search-idef.  (line   7)
* maximum size of a counted string:      core-idef.           (line  84)
* maximum size of a definition name, in characters: core-idef.
                                                              (line  91)
* maximum size of a parsed string:       core-idef.           (line  88)
* maximum size of input line:            file-idef.           (line  46)
* maximum string length for ENVIRONMENT?, in characters: core-idef.
                                                              (line  94)
* mem+do:                                Counted Loops.       (line 207)
* mem,:                                  Dictionary allocation.
                                                              (line  68)
* mem-do:                                Counted Loops.       (line 213)
* memory access words:                   Memory Access.       (line   6)
* memory access/allocation tutorial:     Memory Tutorial.     (line   6)
* memory alignment tutorial:             Alignment Tutorial.  (line   6)
* memory block words:                    Memory Blocks.       (line   6)
* memory overcommit for dictionary and stacks: Invoking Gforth.
                                                              (line 102)
* memory words:                          Memory.              (line   6)
* memory-allocation word set:            Heap Allocation.     (line   6)
* memory-allocation words, implementation-defined options: memory-idef.
                                                              (line   6)
* memory-allocation words, system documentation: The optional Memory-Allocation word set.
                                                              (line   6)
* message send:                          Object-Oriented Terminology.
                                                              (line  31)
* metacompiler:                          cross.fs.            (line   6)
* metacompiler <1>:                      Cross Compiler.      (line   6)
* method:                                Object-Oriented Terminology.
                                                              (line  26)
* method <1>:                            Objects Glossary.    (line 110)
* method <2>:                            Class Declaration.   (line  29)
* method <3>:                            Basic Mini-OOF Usage.
                                                              (line  14)
* method conveniences:                   Method conveniences. (line   6)
* method map:                            Objects Implementation.
                                                              (line  10)
* method selector:                       Object-Oriented Terminology.
                                                              (line  20)
* method usage:                          Basic OOF Usage.     (line  11)
* methods:                               Objects Glossary.    (line 114)
* methods...end-methods:                 Dividing classes.    (line   6)
* min:                                   Single precision.    (line  31)
* mini-oof:                              Mini-OOF.            (line   6)
* mini-oof example:                      Mini-OOF Example.    (line   6)
* mini-oof usage:                        Basic Mini-OOF Usage.
                                                              (line   6)
* mini-oof.fs, differences to other models: Comparison with other object models.
                                                              (line  63)
* minimum search order:                  search-idef.         (line  10)
* miscellaneous words:                   Miscellaneous Words. (line   6)
* mixed precision arithmetic words:      Mixed precision.     (line   6)
* mkdir-parents:                         Directories.         (line  54)
* mod:                                   Integer division.    (line  53)
* modf:                                  Integer division.    (line  58)
* modf-stage2m:                          Two-stage integer division.
                                                              (line  60)
* modifying >IN:                         How does that work?. (line  14)
* Modifying a word defined earlier:      Making a word current.
                                                              (line   6)
* modifying the contents of the input buffer or a string literal: core-ambcond.
                                                              (line  74)
* mods:                                  Integer division.    (line  56)
* modulus:                               Integer division.    (line   6)
* most recent definition does not have a name (IMMEDIATE): core-ambcond.
                                                              (line 158)
* motivation for object-oriented programming: Why object-oriented programming?.
                                                              (line   6)
* move:                                  Memory Blocks.       (line  20)
* ms:                                    Keeping track of Time.
                                                              (line   6)
* MS, repeatability to be expected:      facility-idef.       (line  19)
* Multiple exits from begin:             BEGIN loops with multiple exits.
                                                              (line   6)
* multitasker:                           Multitasker.         (line   6)
* Must now be used inside C-LIBRARY, see C interface doc: Migrating the C interface from earlier Gforth.
                                                              (line   6)
* mux:                                   Bitwise operations.  (line  14)
* mwords:                                Word Lists.          (line 134)
* n:                                     Locating source code definitions.
                                                              (line  41)
* n, stack item type:                    Notation.            (line  88)
* n/a:                                   User-defined TO and DEFER@.
                                                              (line  29)
* n>r:                                   Return stack.        (line  29)
* name:                                  The Input Stream.    (line  42)
* name dictionary:                       Introducing the Text Interpreter.
                                                              (line  44)
* name field address:                    Name token.          (line  93)
* name lookup, case-sensitivity:         core-idef.           (line  34)
* name not defined by VALUE or (LOCAL) used by TO: locals-ambcond.
                                                              (line  12)
* name not defined by VALUE used by TO:  core-ambcond.        (line 161)
* name not found:                        core-ambcond.        (line   7)
* name not found (', POSTPONE, ['], [COMPILE]): core-ambcond. (line 166)
* name token:                            Name token.          (line   6)
* name$:                                 widget methods.      (line  12)
* name, maximum length:                  core-idef.           (line  91)
* name>compile:                          Name token.          (line  59)
* name>interpret:                        Name token.          (line  56)
* name>link:                             Name token.          (line  71)
* name>string:                           Name token.          (line  62)
* names for defined words:               Supplying names.     (line   6)
* NaN:                                   Floating Point.      (line 191)
* native@:                               i18n and l10n.       (line  27)
* needs:                                 Forth source files.  (line  58)
* negate:                                Single precision.    (line  27)
* negative increment for counted loops:  Counted Loops.       (line  77)
* Neon model:                            Comparison with other object models.
                                                              (line  13)
* nested colon definitions:              Quotations.          (line   6)
* new:                                   Basic Mini-OOF Usage.
                                                              (line  29)
* new-color::                            widget methods.      (line 131)
* newline:                               String and character literals.
                                                              (line  73)
* newline character on input:            core-idef.           (line  79)
* newtask:                               Basic multi-tasking. (line   9)
* newtask4:                              Basic multi-tasking. (line  18)
* NEXT:                                  Counted Loops.       (line 233)
* NEXT, direct threaded:                 Threading.           (line  23)
* NEXT, indirect threaded:               Threading.           (line  12)
* next-arg:                              OS command line arguments.
                                                              (line  15)
* next-case:                             Arbitrary control structures.
                                                              (line  96)
* nextname:                              Supplying names.     (line  10)
* NFA:                                   Name token.          (line  93)
* nip:                                   Data stack.          (line   8)
* nocov[:                                Code Coverage.       (line  17)
* non-graphic characters and EMIT:       core-idef.           (line  13)
* non-relocatable image files:           Non-Relocatable Image Files.
                                                              (line   6)
* noname:                                Anonymous Definitions.
                                                              (line  23)
* noname-from:                           Creating from a prototype.
                                                              (line  42)
* noop:                                  Execution token.     (line  96)
* notation of glossary entries:          Notation.            (line   6)
* notfound:                              Dealing with existing Recognizers.
                                                              (line  31)
* nothrow:                               Exception Handling.  (line  89)
* nr>:                                   Return stack.        (line  31)
* ns:                                    Keeping track of Time.
                                                              (line   8)
* nt:                                    Locating exception source.
                                                              (line   8)
* nt (name token):                       Name token.          (line   6)
* NT Forth performance:                  Performance.         (line  22)
* nt input format:                       Literals in source code.
                                                              (line 119)
* nt token input format:                 Literals in source code.
                                                              (line 119)
* ntime:                                 Keeping track of Time.
                                                              (line  23)
* number conversion:                     Number Conversion.   (line   6)
* number conversion - traps for the unwary: Number Conversion.
                                                              (line  43)
* number of bits in one address unit:    core-idef.           (line 111)
* number representation and arithmetic:  core-idef.           (line 115)
* numeric comparison words:              Numeric comparison.  (line   6)
* numeric output - formatted:            Formatted numeric output.
                                                              (line   6)
* numeric output - simple/free-format:   Simple numeric output.
                                                              (line   6)
* numeric output, FP:                    Floating-point output.
                                                              (line   6)
* nw:                                    Locating uses of a word.
                                                              (line  15)
* o>:                                    Mini-OOF2.           (line  16)
* object:                                Object-Oriented Terminology.
                                                              (line  13)
* object <1>:                            Objects Glossary.    (line 119)
* object <2>:                            Basic Mini-OOF Usage.
                                                              (line  11)
* object allocation options:             Creating objects.    (line   6)
* object class:                          The Objects base class.
                                                              (line   6)
* object creation:                       Creating objects.    (line   6)
* object interfaces:                     Object Interfaces.   (line   6)
* object models, comparison:             Comparison with other object models.
                                                              (line   6)
* object-':                              The OOF base class.  (line  77)
* object-::                              The OOF base class.  (line  43)
* object-:::                             The OOF base class.  (line  55)
* object-asptr:                          The OOF base class.  (line  47)
* object-bind:                           The OOF base class.  (line  66)
* object-bound:                          The OOF base class.  (line  68)
* object-class:                          The OOF base class.  (line  20)
* object-class?:                         The OOF base class.  (line  24)
* object-definitions:                    The OOF base class.  (line  22)
* object-dispose:                        The OOF base class.  (line  34)
* object-endwith:                        The OOF base class.  (line  88)
* object-init:                           The OOF base class.  (line  32)
* object-is:                             The OOF base class.  (line  72)
* object-link:                           The OOF base class.  (line  70)
* object-map discussion:                 Objects Implementation.
                                                              (line   6)
* object-new:                            The OOF base class.  (line  39)
* object-new[]:                          The OOF base class.  (line  41)
* object-oriented programming:           Objects.             (line   6)
* object-oriented programming <1>:       OOF.                 (line   6)
* object-oriented programming motivation: Why object-oriented programming?.
                                                              (line   6)
* object-oriented programming style:     Object-Oriented Programming Style.
                                                              (line   6)
* object-oriented terminology:           Object-Oriented Terminology.
                                                              (line   6)
* object-postpone:                       The OOF base class.  (line  79)
* object-ptr:                            The OOF base class.  (line  45)
* object-self:                           The OOF base class.  (line  61)
* object-super:                          The OOF base class.  (line  57)
* object-with:                           The OOF base class.  (line  86)
* object-[]:                             The OOF base class.  (line  49)
* objects:                               Objects.             (line   6)
* objects, basic usage:                  Basic Objects Usage. (line   6)
* objects.fs:                            Objects.             (line   6)
* objects.fs <1>:                        OOF.                 (line   6)
* objects.fs Glossary:                   Objects Glossary.    (line   6)
* objects.fs implementation:             Objects Implementation.
                                                              (line   6)
* objects.fs properties:                 Properties of the Objects model.
                                                              (line   6)
* of:                                    Arbitrary control structures.
                                                              (line 100)
* off:                                   Boolean Flags.       (line  20)
* on:                                    Boolean Flags.       (line  17)
* once:                                  Debugging.           (line  47)
* Only:                                  Word Lists.          (line  85)
* oof:                                   OOF.                 (line   6)
* oof.fs:                                Objects.             (line   6)
* oof.fs <1>:                            OOF.                 (line   6)
* oof.fs base class:                     The OOF base class.  (line   6)
* oof.fs properties:                     Properties of the OOF model.
                                                              (line   6)
* oof.fs usage:                          Basic OOF Usage.     (line   6)
* oof.fs, differences to other models:   Comparison with other object models.
                                                              (line  48)
* open-blocks:                           Blocks.              (line 119)
* open-dir:                              Directories.         (line  20)
* open-file:                             General files.       (line  25)
* open-lib:                              Low-Level C Interface Words.
                                                              (line   6)
* open-path-file:                        General Search Paths.
                                                              (line  11)
* open-pipe:                             Pipes.               (line  10)
* operating system - passing commands:   Passing Commands to the OS.
                                                              (line   6)
* operator’s terminal facilities available: core-other.       (line  10)
* opt::                                  User-defined compile-comma.
                                                              (line  14)
* options on the command line:           Invoking Gforth.     (line   6)
* or:                                    Bitwise operations.  (line   8)
* order:                                 Word Lists.          (line  89)
* orig, control-flow stack item:         Arbitrary control structures.
                                                              (line  11)
* OS command line arguments:             OS command line arguments.
                                                              (line   6)
* os-class:                              Environmental Queries.
                                                              (line 140)
* os-type:                               Environmental Queries.
                                                              (line 144)
* other system documentation, block words: block-other.       (line   6)
* other system documentation, core words: core-other.         (line   6)
* out:                                   Miscellaneous output.
                                                              (line  18)
* outer interpreter:                     Introducing the Text Interpreter.
                                                              (line   6)
* outer interpreter <1>:                 Stacks and Postfix notation.
                                                              (line   6)
* outer interpreter <2>:                 The Text Interpreter.
                                                              (line   6)
* outfile-execute:                       Redirection.         (line  21)
* outfile-id:                            Redirection.         (line  24)
* output in pipes:                       Gforth in pipes.     (line  18)
* Output Redirection:                    Redirection.         (line   6)
* output to terminal:                    Terminal output.     (line   6)
* over:                                  Data stack.          (line  12)
* overcommit memory for dictionary and stacks: Invoking Gforth.
                                                              (line 102)
* overflow of the pictured numeric output string: core-ambcond.
                                                              (line  77)
* overrides:                             Objects Glossary.    (line 122)
* overrides usage:                       Basic Objects Usage. (line  29)
* pad:                                   Memory Blocks.       (line  57)
* PAD size:                              core-idef.           (line 153)
* PAD use by nonstandard words:          core-other.          (line   7)
* page:                                  Terminal output.     (line  23)
* par-split:                             widget methods.      (line 105)
* parameter stack:                       Stack Manipulation.  (line   8)
* parameters are not of the same type (DO, ?DO, WITHIN): core-ambcond.
                                                              (line 169)
* parent class:                          Object-Oriented Terminology.
                                                              (line  43)
* parent class binding:                  Class Binding.       (line  27)
* parent-w:                              widget methods.      (line   6)
* parse:                                 The Input Stream.    (line  25)
* parse area:                            The Text Interpreter.
                                                              (line  47)
* parse-name:                            The Input Stream.    (line  35)
* parse-word:                            The Input Stream.    (line  38)
* parsed string overflow:                core-ambcond.        (line  80)
* parsed string, maximum size:           core-idef.           (line  88)
* parsing words:                         How does that work?. (line   6)
* parsing words <1>:                     How does that work?. (line  28)
* parsing words <2>:                     The Text Interpreter.
                                                              (line  69)
* pass:                                  Basic multi-tasking. (line  51)
* patching threaded code:                Dynamic Superinstructions.
                                                              (line 105)
* path for included:                     Search Paths.        (line   6)
* path+:                                 General Search Paths.
                                                              (line  32)
* path=:                                 General Search Paths.
                                                              (line  35)
* pause:                                 Basic multi-tasking. (line  92)
* pedigree of Gforth:                    Origin.              (line  32)
* perform:                               Execution token.     (line  91)
* performance of some Forth interpreters: Performance.        (line   6)
* persistent form of dictionary:         Image Files.         (line   6)
* PFE performance:                       Performance.         (line  22)
* pi:                                    Floating Point.      (line 137)
* pick:                                  Data stack.          (line  22)
* pictured numeric output:               Formatted numeric output.
                                                              (line   6)
* pictured numeric output buffer, size:  core-idef.           (line 149)
* pictured numeric output string, overflow: core-ambcond.     (line  77)
* pipes, creating your own:              Pipes.               (line   6)
* pipes, Gforth as part of:              Gforth in pipes.     (line   6)
* postpone:                              Macros.              (line  23)
* POSTPONE applied to [IF]:              programming-ambcond. (line  24)
* POSTPONE or [COMPILE] applied to TO:   core-ambcond.        (line 174)
* postpone tutorial:                     POSTPONE Tutorial.   (line   6)
* postpone,:                             Compilation token.   (line  34)
* Pountain’s object-oriented model:      Comparison with other object models.
                                                              (line  28)
* pow2?:                                 Bitwise operations.  (line  62)
* precision:                             Floating-point output.
                                                              (line  34)
* precompiled Forth code:                Image Files.         (line   6)
* prefix `:                              Execution token.     (line  14)
* prepend-where:                         Locating uses of a word.
                                                              (line  47)
* preserve:                              Deferred Words.      (line 105)
* previous:                              Word Lists.          (line  73)
* previous, search order empty:          search-ambcond.      (line  15)
* primitive source format:               Automatic Generation.
                                                              (line  15)
* primitive-centric threaded code:       Direct or Indirect Threaded?.
                                                              (line  16)
* primitives, assembly code listing:     Produced code.       (line   6)
* primitives, automatic generation:      Automatic Generation.
                                                              (line   6)
* primitives, implementation:            Primitives.          (line   6)
* primitives, keeping the TOS in a register: TOS Optimization.
                                                              (line   6)
* prims2x.fs:                            Automatic Generation.
                                                              (line   6)
* print:                                 Objects Glossary.    (line 129)
* printdebugdata:                        Debugging.           (line  32)
* private discussion:                    Classes and Scoping. (line  21)
* procedures, tutorial:                  Colon Definitions Tutorial.
                                                              (line   6)
* process-option:                        Modifying the Startup Sequence.
                                                              (line  56)
* program data space available:          core-other.          (line  16)
* programming style, arbitrary control structures: Arbitrary control structures.
                                                              (line 120)
* programming style, locals:             Locals programming style.
                                                              (line   6)
* programming style, object-oriented:    Object-Oriented Programming Style.
                                                              (line   6)
* programming tools:                     Programming Tools.   (line   6)
* programming-tools words, ambiguous conditions: programming-ambcond.
                                                              (line   6)
* programming-tools words, implementation-defined options: programming-idef.
                                                              (line   6)
* programming-tools words, system documentation: The optional Programming-Tools word set.
                                                              (line   6)
* prompt:                                core-idef.           (line 163)
* pronounciation of words:               Notation.            (line  38)
* protected:                             Objects Glossary.    (line 133)
* protected discussion:                  Classes and Scoping. (line  21)
* pthread:                               Pthreads.            (line   6)
* ptr:                                   Class Declaration.   (line  13)
* public:                                Objects Glossary.    (line 136)
* query:                                 Input Sources.       (line  47)
* quit:                                  Miscellaneous Words. (line   9)
* quotations:                            Quotations.          (line   6)
* r, stack item type:                    Notation.            (line  96)
* r/o:                                   General files.       (line   9)
* r/w:                                   General files.       (line  11)
* r>:                                    Return stack.        (line  15)
* r@:                                    Return stack.        (line  17)
* raise:                                 widget methods.      (line  39)
* ranges for integer types:              core-idef.           (line 119)
* rdrop:                                 Return stack.        (line  19)
* re-color:                              widget methods.      (line 154)
* re-emoji-color:                        widget methods.      (line 162)
* re-fade-color:                         widget methods.      (line 166)
* re-text-color:                         widget methods.      (line 158)
* re-text-emoji-fade-color:              widget methods.      (line 170)
* read-csv:                              CSV Reader.          (line   9)
* read-dir:                              Directories.         (line  24)
* read-file:                             General files.       (line  36)
* read-line:                             General files.       (line  42)
* read-only data space regions:          core-idef.           (line 126)
* reading from file positions not yet written: file-ambcond.  (line  11)
* rec-body:                              Dealing with existing Recognizers.
                                                              (line  60)
* rec-dtick:                             Dealing with existing Recognizers.
                                                              (line  56)
* rec-float:                             Dealing with existing Recognizers.
                                                              (line  40)
* rec-moof2:                             Mini-OOF2.           (line  22)
* rec-nt:                                Dealing with existing Recognizers.
                                                              (line  34)
* rec-num:                               Dealing with existing Recognizers.
                                                              (line  37)
* rec-string:                            Dealing with existing Recognizers.
                                                              (line  43)
* rec-tick:                              Dealing with existing Recognizers.
                                                              (line  52)
* rec-to:                                Dealing with existing Recognizers.
                                                              (line  47)
* receiving object:                      Object-Oriented Terminology.
                                                              (line  37)
* reciprocal of integer:                 Two-stage integer division.
                                                              (line   6)
* recognize:                             Dealing with existing Recognizers.
                                                              (line  70)
* recognizer-sequence::                  Dealing with existing Recognizers.
                                                              (line  73)
* Recognizers normal usage:              Default Recognizers. (line   6)
* Recognizers, dealing with:             Dealing with existing Recognizers.
                                                              (line   6)
* recongizers:                           Recognizers.         (line   6)
* records:                               Structures.          (line   6)
* records tutorial:                      Arrays and Records Tutorial.
                                                              (line   6)
* recover (old Gforth versions):         Exception Handling.  (line 174)
* recurse:                               Calls and returns.   (line  16)
* RECURSE appears after DOES>:           core-ambcond.        (line 122)
* recursion tutorial:                    Recursion Tutorial.  (line   6)
* recursive:                             Calls and returns.   (line  12)
* recursive definitions:                 Calls and returns.   (line   6)
* Redirection:                           Redirection.         (line   6)
* refill:                                The Input Stream.    (line  54)
* regexps:                               Regular Expressions. (line   6)
* relocating loader:                     Image File Background.
                                                              (line  41)
* relocation at load-time:               Image File Background.
                                                              (line  32)
* relocation at run-time:                Image File Background.
                                                              (line  26)
* remainder:                             Integer division.    (line   6)
* rename-file:                           General files.       (line  33)
* REPEAT:                                Arbitrary control structures.
                                                              (line  68)
* repeatability to be expected from the execution of MS: facility-idef.
                                                              (line  19)
* replace-word:                          Debugging.           (line  65)
* replaces:                              Substitute.          (line  17)
* Replication:                           Dynamic Superinstructions.
                                                              (line   6)
* report the words used in your program: Standard Report.     (line   6)
* reposition-file:                       General files.       (line  82)
* REPOSITION-FILE, outside the file’s boundaries: file-ambcond.
                                                              (line   7)
* represent:                             Floating-point output.
                                                              (line  96)
* REPRESENT, results when float is out of range: floating-idef.
                                                              (line  10)
* require:                               Forth source files.  (line  55)
* require, placement in files:           Emacs Tags.          (line   6)
* required:                              Forth source files.  (line  49)
* reserving data space:                  Dictionary allocation.
                                                              (line   6)
* resize:                                Heap Allocation.     (line  29)
* resize-file:                           General files.       (line  86)
* resized:                               widget methods.      (line 108)
* restart:                               Basic multi-tasking. (line  87)
* restore:                               Exception Handling.  (line 207)
* restore-input:                         Input Sources.       (line  32)
* RESTORE-INPUT, Argument type mismatch: core-ambcond.        (line 125)
* restrict:                              Interpretation and Compilation Semantics.
                                                              (line  56)
* Result out of range:                   Integer division.    (line   6)
* result out of range:                   core-ambcond.        (line  83)
* Result out of range (on integer division): Integer division.
                                                              (line 133)
* return stack:                          Stack Manipulation.  (line  13)
* return stack and locals:               Return stack.        (line   6)
* return stack dump with gforth-fast:    Error messages.      (line  53)
* return stack manipulation words:       Return stack.        (line   6)
* return stack space available:          core-other.          (line  21)
* return stack tutorial:                 Return Stack Tutorial.
                                                              (line   6)
* return stack underflow:                core-ambcond.        (line  94)
* return-stack-cells:                    Environmental Queries.
                                                              (line  63)
* returning from a definition:           Calls and returns.   (line   6)
* reveal:                                Creating from a prototype.
                                                              (line  35)
* rol:                                   Bitwise operations.  (line  91)
* roll:                                  Data stack.          (line  33)
* Root:                                  Word Lists.          (line 140)
* ror:                                   Bitwise operations.  (line  94)
* rot:                                   Data stack.          (line  25)
* rounding of floating-point numbers:    floating-idef.       (line  14)
* rp!:                                   Stack pointer manipulation.
                                                              (line  25)
* rp0:                                   Stack pointer manipulation.
                                                              (line  20)
* rp@:                                   Stack pointer manipulation.
                                                              (line  23)
* rshift:                                Bitwise operations.  (line  22)
* RSHIFT, large shift counts:            core-ambcond.        (line 182)
* run-time code generation, tutorial:    Advanced macros Tutorial.
                                                              (line   6)
* running Gforth:                        Invoking Gforth.     (line   6)
* running image files:                   Running Image Files. (line   6)
* Rydqvist, Goran:                       Emacs and Gforth.    (line   6)
* S":                                    String and character literals.
                                                              (line  29)
* S", number of string buffers:          file-idef.           (line  53)
* S", size of string buffer:             file-idef.           (line  57)
* s+:                                    String words.        (line  79)
* s//:                                   Regular Expressions. (line 178)
* s>>:                                   Regular Expressions. (line 165)
* s>d:                                   Double precision.    (line  21)
* s>f:                                   Floating Point.      (line  24)
* s>number?:                             Line input and conversion.
                                                              (line  24)
* s>unumber?:                            Line input and conversion.
                                                              (line  27)
* safe/string:                           String words.        (line  49)
* save-buffer:                           Blocks.              (line 179)
* save-buffers:                          Blocks.              (line 175)
* save-cov:                              Code Coverage.       (line  65)
* save-input:                            Input Sources.       (line  27)
* save-mem:                              Heap Allocation.     (line  39)
* savesystem:                            Non-Relocatable Image Files.
                                                              (line  20)
* savesystem during gforthmi:            gforthmi.            (line  44)
* scan:                                  String words.        (line  29)
* scan-back:                             String words.        (line  34)
* scope:                                 Where are locals visible by name?.
                                                              (line  11)
* scope of locals:                       Where are locals visible by name?.
                                                              (line   6)
* scoping and classes:                   Classes and Scoping. (line   6)
* scr:                                   Blocks.              (line 142)
* scrolled:                              actor methods.       (line  18)
* seal:                                  Word Lists.          (line 150)
* search:                                String words.        (line  23)
* search order stack:                    Word Lists.          (line  10)
* search order, maximum depth:           search-idef.         (line   7)
* search order, minimum:                 search-idef.         (line  10)
* search order, tutorial:                Wordlists and Search Order Tutorial.
                                                              (line   6)
* search path control, source files:     Source Search Paths. (line   6)
* search path control, source files <1>: General Search Paths.
                                                              (line   6)
* search path for files:                 Search Paths.        (line   6)
* search-order words, ambiguous conditions: search-ambcond.   (line   6)
* search-order words, implementation-defined options: search-idef.
                                                              (line   6)
* search-order words, system documentation: The optional Search-Order word set.
                                                              (line   6)
* search-wordlist:                       Word Lists.          (line 116)
* see:                                   Examining compiled code.
                                                              (line  11)
* see tutorial:                          Decompilation Tutorial.
                                                              (line   6)
* SEE, source and format of output:      programming-idef.    (line  18)
* see-code:                              Examining compiled code.
                                                              (line  30)
* see-code-range:                        Examining compiled code.
                                                              (line  44)
* select:                                Boolean Flags.       (line  23)
* selection control structures:          Selection.           (line   6)
* selector:                              Object-Oriented Terminology.
                                                              (line  20)
* selector <1>:                          Objects Glossary.    (line 140)
* selector implementation, class:        Objects Implementation.
                                                              (line  14)
* selector invocation:                   Object-Oriented Terminology.
                                                              (line  31)
* selector invocation, restrictions:     Basic Objects Usage. (line  58)
* selector invocation, restrictions <1>: Basic OOF Usage.     (line  56)
* selector usage:                        Basic Objects Usage. (line   8)
* selectors and stack effects:           Object-Oriented Programming Style.
                                                              (line   8)
* selectors common to hardly-related classes: Object Interfaces.
                                                              (line  11)
* semantics tutorial:                    Interpretation and Compilation Semantics and Immediacy Tutorial.
                                                              (line   6)
* semantics, interpretation and compilation: Interpretation and Compilation Semantics.
                                                              (line   6)
* semaphore:                             Semaphores.          (line  14)
* send-event:                            Message queues.      (line  13)
* set:                                   actor methods.       (line  57)
* set->comp:                             Header methods.      (line 164)
* set->int:                              Header methods.      (line 152)
* set-current:                           Word Lists.          (line  41)
* set-dir:                               Directories.         (line  47)
* set-does>:                             CREATE..DOES> details.
                                                              (line  69)
* set-execute:                           Header methods.      (line  41)
* set-forth-recognize:                   Dealing with existing Recognizers.
                                                              (line  84)
* set-name>link:                         Header methods.      (line 183)
* set-name>string:                       Header methods.      (line 179)
* set-optimizer:                         User-defined compile-comma.
                                                              (line   8)
* set-order:                             Word Lists.          (line  50)
* set-precision:                         Floating-point output.
                                                              (line  38)
* set-recognizers:                       Dealing with existing Recognizers.
                                                              (line  67)
* set-to:                                User-defined TO and DEFER@.
                                                              (line  25)
* sf!:                                   Memory Access.       (line  38)
* sf@:                                   Memory Access.       (line  34)
* sf@ or sf! used with an address that is not single-float aligned: floating-ambcond.
                                                              (line  22)
* sfalign:                               Dictionary allocation.
                                                              (line  90)
* sfaligned:                             Address arithmetic.  (line  92)
* sffield::                              Forth200x Structures.
                                                              (line  65)
* sfloat%:                               Structure Glossary.  (line  46)
* sfloat+:                               Address arithmetic.  (line  87)
* sfloat/:                               Address arithmetic.  (line  90)
* sfloats:                               Address arithmetic.  (line  83)
* sf_, stack item type:                  Notation.            (line 107)
* sh:                                    Passing Commands to the OS.
                                                              (line   9)
* sh-get:                                Passing Commands to the OS.
                                                              (line  21)
* Shared libraries in C interface:       Declaring OS-level libraries.
                                                              (line   6)
* shell commands:                        Passing Commands to the OS.
                                                              (line   6)
* shift-args:                            OS command line arguments.
                                                              (line  49)
* short-where:                           Locating uses of a word.
                                                              (line  40)
* show:                                  actor methods.       (line  48)
* show-you:                              actor methods.       (line  60)
* sign:                                  Formatted numeric output.
                                                              (line  70)
* sign extension:                        Special Memory Accesses.
                                                              (line   6)
* silent exiting from Gforth:            Gforth in pipes.     (line  20)
* simple defining words:                 CREATE.              (line   6)
* simple loops:                          Simple Loops.        (line   6)
* simple-fkey-string:                    Single-key input.    (line 183)
* simple-see:                            Examining compiled code.
                                                              (line  20)
* simple-see-range:                      Examining compiled code.
                                                              (line  27)
* single precision arithmetic words:     Single precision.    (line   6)
* single-assignment style for locals:    Locals programming style.
                                                              (line  25)
* single-cell numbers, input format:     Literals in source code.
                                                              (line   6)
* single-key input:                      Single-key input.    (line   6)
* singlestep Debugger:                   Singlestep Debugger. (line   6)
* size of buffer at WORD:                core-idef.           (line 129)
* size of the dictionary and the stacks: Invoking Gforth.     (line  55)
* size of the keyboard terminal buffer:  core-idef.           (line 142)
* size of the pictured numeric output buffer: core-idef.      (line 149)
* size of the scratch area returned by PAD: core-idef.        (line 153)
* size parameters for command-line options: Invoking Gforth.  (line  55)
* skip:                                  String words.        (line  36)
* SLiteral:                              Literals.            (line  65)
* slurp-fid:                             General files.       (line  91)
* slurp-file:                            General files.       (line  88)
* sm/rem:                                Integer division.    (line  82)
* source:                                The Text Interpreter.
                                                              (line 126)
* source code for exception:             Locating exception source.
                                                              (line   6)
* source code of a word:                 Locating source code definitions.
                                                              (line   6)
* source location of error or debugging output in Emacs: Emacs and Gforth.
                                                              (line  21)
* source-id:                             Input Sources.       (line  18)
* SOURCE-ID, behaviour when BLK is non-zero: file-ambcond.    (line  31)
* sourcefilename:                        Forth source files.  (line  67)
* sourceline#:                           Forth source files.  (line  74)
* sp!:                                   Stack pointer manipulation.
                                                              (line  11)
* sp0:                                   Stack pointer manipulation.
                                                              (line   6)
* sp@:                                   Stack pointer manipulation.
                                                              (line   9)
* space:                                 Miscellaneous output.
                                                              (line  12)
* space delimiters:                      core-idef.           (line  50)
* spaces:                                Miscellaneous output.
                                                              (line  15)
* span:                                  Line input and conversion.
                                                              (line  72)
* spawn:                                 Cilk.                (line  34)
* spawn1:                                Cilk.                (line  40)
* spawn2:                                Cilk.                (line  43)
* speed, startup:                        Startup speed.       (line   6)
* split:                                 widget methods.      (line  63)
* stability of Gforth:                   Stability Goals.     (line   6)
* stack depth changes during interpretation: Stack depth changes.
                                                              (line   6)
* stack effect:                          Notation.            (line  16)
* Stack effect design, tutorial:         Designing the stack effect Tutorial.
                                                              (line   6)
* stack effect of DOES>-parts:           User-defined defining words using CREATE.
                                                              (line 112)
* stack effect of included files:        Forth source files.  (line  20)
* stack effects of selectors:            Object-Oriented Programming Style.
                                                              (line   8)
* stack empty:                           core-ambcond.        (line  94)
* stack item types:                      Notation.            (line  78)
* stack manipulation tutorial:           Stack Manipulation Tutorial.
                                                              (line   6)
* stack manipulation words:              Stack Manipulation.  (line   6)
* stack manipulation words, floating-point stack: Floating point stack.
                                                              (line   6)
* stack manipulation words, return stack: Return stack.       (line   6)
* stack manipulations words, data stack: Data stack.          (line   6)
* stack overflow:                        core-ambcond.        (line  41)
* stack pointer manipulation words:      Stack pointer manipulation.
                                                              (line   6)
* stack size default:                    Stack and Dictionary Sizes.
                                                              (line   6)
* stack size, cache-friendly:            Stack and Dictionary Sizes.
                                                              (line  19)
* stack space available:                 core-other.          (line  26)
* stack tutorial:                        Stack Tutorial.      (line   6)
* stack underflow:                       core-ambcond.        (line  94)
* stack-cells:                           Environmental Queries.
                                                              (line  66)
* stack-effect comments, tutorial:       Stack-Effect Comments Tutorial.
                                                              (line   6)
* stacksize:                             Basic multi-tasking. (line  25)
* stacksize4:                            Basic multi-tasking. (line  28)
* staged/-divisor:                       Two-stage integer division.
                                                              (line  91)
* staged/-size:                          Two-stage integer division.
                                                              (line  49)
* Standard conformance of Gforth:        Standard conformance.
                                                              (line   6)
* starting Gforth tutorial:              Starting Gforth Tutorial.
                                                              (line   6)
* startup sequence for image file:       Modifying the Startup Sequence.
                                                              (line   6)
* Startup speed:                         Startup speed.       (line   6)
* state - effect on the text interpreter: How does that work?.
                                                              (line  32)
* STATE values:                          core-idef.           (line 173)
* state-smart words (are a bad idea):    Combined words.      (line  40)
* static:                                Class Declaration.   (line  34)
* status-color:                          Terminal output.     (line  60)
* stderr:                                General files.       (line 100)
* stderr and pipes:                      Gforth in pipes.     (line  44)
* stdin:                                 General files.       (line  94)
* stdout:                                General files.       (line  97)
* stop:                                  Basic multi-tasking. (line  78)
* stop-ns:                               Basic multi-tasking. (line  81)
* str<:                                  String words.        (line  15)
* str=:                                  String words.        (line  13)
* str=?:                                 Regular Expressions. (line 102)
* String input format:                   Literals in source code.
                                                              (line  97)
* string larger than pictured numeric output area (f., fe., fs.): floating-ambcond.
                                                              (line  73)
* string literals:                       String and character literals.
                                                              (line   6)
* string longer than a counted string returned by WORD: core-ambcond.
                                                              (line 178)
* string words with $:                   $tring words.        (line   6)
* string,:                               Counted string words.
                                                              (line  26)
* string-parse:                          The Input Stream.    (line  30)
* string-prefix?:                        String words.        (line  17)
* string-suffix?:                        String words.        (line  20)
* strings - see character strings:       String representations.
                                                              (line   6)
* strings tutorial:                      Characters and Strings Tutorial.
                                                              (line   6)
* struct:                                Structure Glossary.  (line  51)
* struct usage:                          Structure Usage.     (line   6)
* structs tutorial:                      Arrays and Records Tutorial.
                                                              (line   6)
* structure extension:                   Structure Usage.     (line  51)
* structure glossary:                    Structure Glossary.  (line   6)
* structure implementation:              Structure Implementation.
                                                              (line   6)
* structure naming convention:           Structure Naming Convention.
                                                              (line   6)
* structure naming convention <1>:       Structure Naming Convention.
                                                              (line  20)
* structure of Forth programs:           Forth is written in Forth.
                                                              (line   6)
* structure usage:                       Structure Usage.     (line   6)
* structures:                            Structures.          (line   6)
* structures containing arrays:          Structure Usage.     (line  63)
* structures containing structures:      Structure Usage.     (line  43)
* Structures in Forth200x:               Forth200x Structures.
                                                              (line   6)
* structures using address arithmetic:   Why explicit structure support?.
                                                              (line   6)
* sub-list?:                             Locals implementation.
                                                              (line  96)
* substitute:                            Substitute.          (line  29)
* success-color:                         Terminal output.     (line  54)
* superclass binding:                    Class Binding.       (line  27)
* Superinstructions:                     Dynamic Superinstructions.
                                                              (line   6)
* swap:                                  Data stack.          (line  20)
* symmetric division:                    Integer division.    (line  11)
* Synonym:                               Aliases.             (line  17)
* synonyms:                              Aliases.             (line   6)
* syntax tutorial:                       Syntax Tutorial.     (line   6)
* system:                                Passing Commands to the OS.
                                                              (line  13)
* system dictionary space required, in address units: core-other.
                                                              (line  31)
* system documentation:                  Standard conformance.
                                                              (line  45)
* system documentation, block words:     The optional Block word set.
                                                              (line   6)
* system documentation, core words:      The Core Words.      (line   6)
* system documentation, double words:    The optional Double Number word set.
                                                              (line   6)
* system documentation, exception words: The optional Exception word set.
                                                              (line   6)
* system documentation, facility words:  The optional Facility word set.
                                                              (line   6)
* system documentation, file words:      The optional File-Access word set.
                                                              (line   6)
* system documentation, floating-point words: The optional Floating-Point word set.
                                                              (line   6)
* system documentation, locals words:    The optional Locals word set.
                                                              (line   6)
* system documentation, memory-allocation words: The optional Memory-Allocation word set.
                                                              (line   6)
* system documentation, programming-tools words: The optional Programming-Tools word set.
                                                              (line   6)
* system documentation, search-order words: The optional Search-Order word set.
                                                              (line   6)
* system prompt:                         core-idef.           (line 163)
* s\":                                   String and character literals.
                                                              (line  11)
* table:                                 Word Lists.          (line  61)
* TAGS file:                             Emacs Tags.          (line   6)
* target compiler:                       cross.fs.            (line   6)
* target compiler <1>:                   Cross Compiler.      (line   6)
* task:                                  Basic multi-tasking. (line  13)
* task-local data:                       Task-local data.     (line   6)
* terminal buffer, size:                 core-idef.           (line 142)
* terminal input buffer:                 The Text Interpreter.
                                                              (line  20)
* terminal output:                       Terminal output.     (line   6)
* terminal size:                         Terminal output.     (line  17)
* terminology for object-oriented programming: Object-Oriented Terminology.
                                                              (line   6)
* text interpreter:                      Introducing the Text Interpreter.
                                                              (line   6)
* text interpreter <1>:                  Stacks and Postfix notation.
                                                              (line   6)
* text interpreter <2>:                  The Text Interpreter.
                                                              (line   6)
* text interpreter - effect of state:    How does that work?. (line  32)
* text interpreter - input sources:      The Text Interpreter.
                                                              (line 107)
* text interpreter - input sources <1>:  Input Sources.       (line   6)
* text-color::                           widget methods.      (line 134)
* text-emoji-color::                     widget methods.      (line 138)
* text-emoji-fade-color::                widget methods.      (line 148)
* THEN:                                  Arbitrary control structures.
                                                              (line  25)
* third:                                 Data stack.          (line  14)
* this:                                  Objects Glossary.    (line 145)
* this and catch:                        Objects Implementation.
                                                              (line  43)
* this implementation:                   Objects Implementation.
                                                              (line  43)
* this usage:                            Method conveniences. (line  12)
* ThisForth performance:                 Performance.         (line  22)
* threaded code implementation:          Threading.           (line   6)
* threading words:                       Threading Words.     (line   6)
* threading, direct or indirect?:        Direct or Indirect Threaded?.
                                                              (line   6)
* threading-method:                      Threading Words.     (line  69)
* throw:                                 Exception Handling.  (line  10)
* THROW-codes used in the system:        exception-idef.      (line   7)
* thru:                                  Blocks.              (line 187)
* tib:                                   The Text Interpreter.
                                                              (line 129)
* tick (’):                              Execution token.     (line  21)
* TILE performance:                      Performance.         (line  22)
* time&date:                             Keeping track of Time.
                                                              (line  10)
* time-related words:                    Keeping track of Time.
                                                              (line   6)
* TMP, TEMP - environment variable:      Environment variables.
                                                              (line  38)
* TO:                                    Values.              (line  33)
* TO on non-VALUEs:                      core-ambcond.        (line 161)
* TO on non-VALUEs and non-locals:       locals-ambcond.      (line  12)
* to-method::                            User-defined TO and DEFER@.
                                                              (line  21)
* to-table::                             User-defined TO and DEFER@.
                                                              (line  17)
* to-this:                               Objects Glossary.    (line 154)
* tokens for words:                      Tokens for Words.    (line   6)
* TOS definition:                        Stacks and Postfix notation.
                                                              (line  33)
* TOS optimization for primitives:       TOS Optimization.    (line   6)
* touchdown:                             actor methods.       (line  21)
* touchup:                               actor methods.       (line  24)
* toupper:                               Characters.          (line  29)
* translate-dnum:                        Dealing with existing Recognizers.
                                                              (line  97)
* translate-method::                     Dealing with existing Recognizers.
                                                              (line 116)
* translate-nt:                          Dealing with existing Recognizers.
                                                              (line  91)
* translate-num:                         Dealing with existing Recognizers.
                                                              (line  94)
* translate-state:                       Dealing with existing Recognizers.
                                                              (line 121)
* translate::                            Dealing with existing Recognizers.
                                                              (line  87)
* traverse-wordlist:                     Name token.          (line  48)
* trigonometric operations:              Floating Point.      (line 103)
* true:                                  Boolean Flags.       (line  11)
* truncation of floating-point numbers:  floating-idef.       (line  14)
* try:                                   Exception Handling.  (line 129)
* try-recognize:                         Dealing with existing Recognizers.
                                                              (line 100)
* tt:                                    Locating exception source.
                                                              (line   6)
* tuck:                                  Data stack.          (line  18)
* turnkey image files:                   Modifying the Startup Sequence.
                                                              (line  22)
* Tutorial:                              Tutorial.            (line   6)
* type:                                  Displaying characters and strings.
                                                              (line   6)
* types of locals:                       Gforth locals.       (line  34)
* types of stack items:                  Notation.            (line  78)
* types tutorial:                        Types Tutorial.      (line   6)
* typewhite:                             Displaying characters and strings.
                                                              (line  17)
* u*/:                                   Integer division.    (line 100)
* u*/mod:                                Integer division.    (line 115)
* U+DO:                                  Counted Loops.       (line 183)
* u, stack item type:                    Notation.            (line  90)
* U-DO:                                  Counted Loops.       (line 204)
* u-[do:                                 Counted Loops.       (line 196)
* u.:                                    Simple numeric output.
                                                              (line  26)
* u.r:                                   Simple numeric output.
                                                              (line  36)
* u/:                                    Integer division.    (line  51)
* u/-stage1m:                            Two-stage integer division.
                                                              (line  69)
* u/-stage2m:                            Two-stage integer division.
                                                              (line  73)
* u/mod:                                 Integer division.    (line  71)
* u/mod-stage2m:                         Two-stage integer division.
                                                              (line  81)
* u<:                                    Numeric comparison.  (line  33)
* u<=:                                   Numeric comparison.  (line  35)
* u>:                                    Numeric comparison.  (line  37)
* u>=:                                   Numeric comparison.  (line  39)
* uallot:                                Task-local data.     (line  21)
* ud, stack item type:                   Notation.            (line  94)
* ud.:                                   Simple numeric output.
                                                              (line  47)
* ud.r:                                  Simple numeric output.
                                                              (line  56)
* ud/mod:                                Integer division.    (line 121)
* UDefer:                                Task-local data.     (line  29)
* ukeyed:                                actor methods.       (line  27)
* um*:                                   Mixed precision.     (line  10)
* um/mod:                                Integer division.    (line  85)
* umax:                                  Single precision.    (line  37)
* umin:                                  Single precision.    (line  35)
* umod:                                  Integer division.    (line  60)
* umod-stage2m:                          Two-stage integer division.
                                                              (line  77)
* unaligned memory access:               Special Memory Accesses.
                                                              (line   6)
* uncolored-mode:                        Terminal output.     (line  75)
* undefined word:                        core-ambcond.        (line   7)
* undefined word, ', POSTPONE, ['], [COMPILE]: core-ambcond.  (line 166)
* under+:                                Single precision.    (line  18)
* unescape:                              Substitute.          (line  34)
* unexpected end of the input buffer:    core-ambcond.        (line 112)
* unlock:                                Semaphores.          (line  21)
* unloop:                                Counted Loops.       (line 257)
* unmapped block numbers:                file-ambcond.        (line  26)
* UNREACHABLE:                           Where are locals visible by name?.
                                                              (line  49)
* UNTIL:                                 Arbitrary control structures.
                                                              (line  33)
* UNTIL loop:                            Simple Loops.        (line  17)
* unused:                                Dictionary allocation.
                                                              (line  27)
* unused-words:                          Locating uses of a word.
                                                              (line  54)
* unwind-protect:                        Exception Handling.  (line 148)
* up@:                                   Task-local data.     (line  35)
* update:                                Blocks.              (line 168)
* UPDATE, no current block buffer:       block-ambcond.       (line  25)
* updated?:                              Blocks.              (line 171)
* upper and lower case:                  Case insensitivity.  (line   6)
* use:                                   Blocks.              (line 122)
* User:                                  Task-local data.     (line  12)
* user input device, method of selecting: core-idef.          (line  97)
* user output device, method of selecting: core-idef.         (line 102)
* user space:                            Task-local data.     (line   6)
* user variables:                        Task-local data.     (line   6)
* user':                                 Task-local data.     (line  39)
* user-defined defining words:           User-defined Defining Words.
                                                              (line   6)
* Uses of a word:                        Locating uses of a word.
                                                              (line   6)
* utime:                                 Keeping track of Time.
                                                              (line  19)
* UValue:                                Task-local data.     (line  25)
* v*:                                    Floating Point.      (line  95)
* Value:                                 Values.              (line  17)
* value-flavoured locals:                Gforth locals.       (line  42)
* values:                                Values.              (line   6)
* var:                                   Class Declaration.   (line   8)
* var <1>:                               Basic Mini-OOF Usage.
                                                              (line  17)
* Variable:                              Variables.           (line  31)
* variable-flavoured locals:             Gforth locals.       (line  42)
* variables:                             Variables.           (line   6)
* variadic C functions:                  Declaring C Functions.
                                                              (line  56)
* Varue:                                 Varues.              (line  11)
* varue-flavoured locals:                Gforth locals.       (line  42)
* varues:                                Varues.              (line   6)
* versions, invoking other versions of Gforth: Invoking Gforth.
                                                              (line 215)
* vglue:                                 widget methods.      (line  75)
* vglue@:                                widget methods.      (line  84)
* view (called locate in Gforth):        Locating source code definitions.
                                                              (line   6)
* viewing the documentation of a word in Emacs: Emacs and Gforth.
                                                              (line  29)
* viewing the source of a word in Emacs: Emacs Tags.          (line   6)
* virtual function:                      Object-Oriented Terminology.
                                                              (line  20)
* virtual function table:                Objects Implementation.
                                                              (line  10)
* virtual machine:                       Engine.              (line   6)
* virtual machine instructions, implementation: Primitives.   (line   6)
* visibility of locals:                  Where are locals visible by name?.
                                                              (line   6)
* vlist:                                 Word Lists.          (line 128)
* Vocabularies, detailed explanation:    Vocabularies.        (line   6)
* Vocabulary:                            Word Lists.          (line 145)
* vocs:                                  Word Lists.          (line 154)
* vocstack empty, previous:              search-ambcond.      (line  15)
* vocstack full, also:                   search-ambcond.      (line  18)
* vp-bottom:                             widget methods.      (line 182)
* vp-left:                               widget methods.      (line 185)
* vp-needed:                             widget methods.      (line 194)
* vp-reslide:                            widget methods.      (line 191)
* vp-right:                              widget methods.      (line 188)
* vp-top:                                widget methods.      (line 179)
* w:                                     widget methods.      (line  21)
* w!:                                    Special Memory Accesses.
                                                              (line  39)
* w,:                                    Dictionary allocation.
                                                              (line  55)
* w, stack item type:                    Notation.            (line  86)
* w-color:                               widget methods.      (line  54)
* w/o:                                   General files.       (line  13)
* W::                                    Locals definition words.
                                                              (line  34)
* w>s:                                   Special Memory Accesses.
                                                              (line 103)
* w@:                                    Special Memory Accesses.
                                                              (line  36)
* WA::                                   Locals definition words.
                                                              (line  37)
* walign:                                Address arithmetic.  (line 127)
* waligned:                              Address arithmetic.  (line 124)
* WARNING":                              Exception Handling.  (line 254)
* warning-color:                         Terminal output.     (line  48)
* warnings:                              Exception Handling.  (line 257)
* wbe:                                   Special Memory Accesses.
                                                              (line  65)
* wfield::                               Forth200x Structures.
                                                              (line  71)
* where:                                 Locating uses of a word.
                                                              (line   6)
* where to go next:                      Where to go next.    (line   6)
* whereg:                                Locating uses of a word.
                                                              (line  35)
* WHILE:                                 Arbitrary control structures.
                                                              (line  63)
* WHILE loop:                            Simple Loops.        (line   6)
* wid:                                   Word Lists.          (line  18)
* wid, stack item type:                  Notation.            (line 111)
* widget:                                MINOS2 object framework.
                                                              (line  17)
* Win32Forth performance:                Performance.         (line  22)
* wior type description:                 Notation.            (line 113)
* wior values and meaning:               file-idef.           (line  36)
* within:                                Numeric comparison.  (line  41)
* wle:                                   Special Memory Accesses.
                                                              (line  69)
* word:                                  Introducing the Text Interpreter.
                                                              (line  44)
* word <1>:                              The Input Stream.    (line  45)
* WORD buffer size:                      core-idef.           (line 129)
* word glossary entry format:            Notation.            (line   6)
* word list for defining locals:         Locals implementation.
                                                              (line  46)
* word lists:                            Word Lists.          (line   6)
* word lists - example:                  Word list example.   (line   6)
* word lists - why use them?:            Why use word lists?. (line   6)
* word name too long:                    core-ambcond.        (line  10)
* WORD, string overflow:                 core-ambcond.        (line 178)
* wordlist:                              Word Lists.          (line  58)
* wordlist-words:                        Word Lists.          (line 131)
* wordlists:                             Environmental Queries.
                                                              (line  76)
* wordlists tutorial:                    Wordlists and Search Order Tutorial.
                                                              (line   6)
* words:                                 Words.               (line   6)
* words <1>:                             Word Lists.          (line 124)
* words used in your program:            Standard Report.     (line   6)
* words, forgetting:                     Forgetting words.    (line   6)
* wordset:                               Notation.            (line  41)
* wrap-xt:                               Deferred Words.      (line 102)
* write-file:                            General files.       (line  70)
* write-line:                            General files.       (line  72)
* wrol:                                  Bitwise operations.  (line  75)
* wror:                                  Bitwise operations.  (line  79)
* WTF??:                                 Debugging.           (line  59)
* ww:                                    Locating uses of a word.
                                                              (line  12)
* W^:                                    Locals definition words.
                                                              (line  40)
* x:                                     widget methods.      (line  15)
* x!:                                    Special Memory Accesses.
                                                              (line  51)
* x,:                                    Dictionary allocation.
                                                              (line  59)
* x-size:                                Xchars and Unicode.  (line  52)
* x-width:                               Xchars and Unicode.  (line 106)
* x>s:                                   Special Memory Accesses.
                                                              (line 109)
* x@:                                    Special Memory Accesses.
                                                              (line  48)
* xalign:                                Address arithmetic.  (line 139)
* xaligned:                              Address arithmetic.  (line 136)
* xbe:                                   Special Memory Accesses.
                                                              (line  81)
* xc!+:                                  Xchars and Unicode.  (line  75)
* xc!+?:                                 Xchars and Unicode.  (line  67)
* xc,:                                   Xchars and Unicode.  (line 123)
* xc-size:                               Xchars and Unicode.  (line  49)
* xc-width:                              Xchars and Unicode.  (line 116)
* xc@:                                   Xchars and Unicode.  (line  56)
* xc@+:                                  Xchars and Unicode.  (line  59)
* xc@+?:                                 Xchars and Unicode.  (line  63)
* xchar+:                                Xchars and Unicode.  (line  82)
* xchar-:                                Xchars and Unicode.  (line  86)
* XCHAR-ENCODING:                        Environmental Queries.
                                                              (line  83)
* XCHAR-MAXMEM:                          Environmental Queries.
                                                              (line  93)
* xd!:                                   Special Memory Accesses.
                                                              (line  57)
* xd,:                                   Dictionary allocation.
                                                              (line  61)
* xd>s:                                  Special Memory Accesses.
                                                              (line 112)
* xd@:                                   Special Memory Accesses.
                                                              (line  54)
* xdbe:                                  Special Memory Accesses.
                                                              (line  89)
* xdle:                                  Special Memory Accesses.
                                                              (line  93)
* xemit:                                 Displaying characters and strings.
                                                              (line  10)
* xfield::                               Forth200x Structures.
                                                              (line  77)
* xhold:                                 Xchars and Unicode.  (line 119)
* xkey:                                  Xchars and Unicode.  (line 112)
* xkey?:                                 Single-key input.    (line  22)
* xle:                                   Special Memory Accesses.
                                                              (line  85)
* xor:                                   Bitwise operations.  (line  10)
* xt:                                    Introducing the Text Interpreter.
                                                              (line  44)
* xt <1>:                                Execution token.     (line   6)
* xt input format:                       Literals in source code.
                                                              (line 113)
* XT tutorial:                           Execution Tokens Tutorial.
                                                              (line   6)
* xt, stack item type:                   Notation.            (line 109)
* xt-new:                                Objects Glossary.    (line 157)
* xt-see:                                Examining compiled code.
                                                              (line  17)
* xt-see-code:                           Examining compiled code.
                                                              (line  41)
* xt-simple-see:                         Examining compiled code.
                                                              (line  24)
* XT::                                   Locals definition words.
                                                              (line  70)
* xt>name:                               Name token.          (line  42)
* XTA::                                  Locals definition words.
                                                              (line  73)
* xywh:                                  widget methods.      (line  87)
* xywhd:                                 widget methods.      (line  90)
* x\string-:                             Xchars and Unicode.  (line  95)
* y:                                     widget methods.      (line  18)
* zero-length string as a name:          core-ambcond.        (line 112)
* Zsoter’s object-oriented model:        Comparison with other object models.
                                                              (line  34)

