\ automatically generated by makedoc.fs

make-doc set-compsem xt --  ) gforth-experimental
change compilation semantics of the last defined word

make-doc intsem: --  ) gforth-experimental
The current definition's compilation semantics are changed to
perform its execution semantics (the word becomes immediate).
Then its interpretation semantics are changed to perform the
definition starting at the @code{intsem:}.  Note that if you
then call @code{immediate}, the compilation semantics are
changed to perform the word's new interpretation semantics.

make-doc compsem: --  ) gforth-experimental
Changes the compilation semantics of the current definition to
perform the definition starting at the @code{compsem:}.

make-doc unquote addr u -- addr' u'  ) gforth-experimental
remove surrounding quotes

make-doc un-dquote addr u --  ) gforth-experimental
replace double quotes with single quotes

make-doc next-field addr u -- addr' u'  ) gforth-experimental

make-doc next-csv addr u -- addr' u' addr1 u1  ) gforth-experimental

make-doc csv-line addr u xt --  ) gforth-experimental

make-doc csv-read-loop xt --  ) gforth-experimental

make-doc read-csv addr u xt --  ) gforth-experimental
read CVS file @var{addr u} and execute @var{xt} for every item found.
@var{xt} takes @code{( addr u col line -- )}, i.e. the string, the
current column (starting with 0), and the current line (starting with
1).

make-doc .quoted-csv addr u --  ) gforth-experimental
print a quoted CSV entry

make-doc native@ lsid -- addr u  ) gforth-experimental native-fetch
fetch native string from an @var{lsid}

make-doc L" "lsid<">" -- lsid  ) gforth-experimental l-quote
Parse a string and define a new lsid, if the string is uniquely new.
Identical strings result in identical lsids, which allows to refer
to the same lsid from multiple locations using the same string.

make-doc LU" "lsid<">" -- lsid  ) gforth-experimental l-unique-quote
Parse a string and always define a new lsid, even if the string is not
unique.

make-doc .lsids locale --  ) gforth-experimental dot-lsids
print the string for all lsids

make-doc Language "name" --  ) gforth-experimental
define a locale.  Executing that locale makes it the current locale.

make-doc Country <lang> "name" --  ) gforth-experimental
define a variant (typical: country) for the current locale.  Executing
that locale makes it the current locale.  You can create variants of
variants (a country may have variants within, e.g. think of how many
words for rolls/buns there are in many languages).

make-doc locale@ lsid -- addr u  ) gforth-experimental locale-fetch
fetch the localized string in the current language and country

make-doc locale! addr u lsid --  ) gforth-experimental locale-store
Store localized string @var{addr u} for the current locale and country
in @var{lsid}.

make-doc locale-file fid --  ) gforth-experimental locale-file
read lines from @var{fid} into the current locale.

make-doc included-locale addr u --  ) gforth-experimental included-locale
read lines from the file @var{addr u} into the current locale.

make-doc include-locale "name" --  ) gforth-experimental include-locale
read lines from the file @var{"name"} into the current locale.

make-doc define-locale addr u -- xt  ) gforth-experimental
Define a locale named @var{addr u} and return its @var{xt}.

make-doc insert-locale addr u col line --  ) gforth-experimental
insert a locale entry @var{addr u} from a table in column
@var{col} and line @var{line}.  Line 1 is special, it contains
the name of the corresponding locale.

make-doc locale-csv "name" --  ) gforth-experimental locale-csv
import comma-separated value table into locales.  first line contains
locale names, “program” and “default” are special entries; generic
languages must preceed translations for specific countries.  Entries
under “program” (must be leftmost) are used to search for the lsid; if
empty, the line number-1 is the lsid index.

make-doc .locale-csv --  ) gforth-experimental dot-locale-csv
write the locale database in CSV format to the terminal output.

make-doc locale-csv-out "name" --  ) gforth-experimental locale-csv
Create file @var{"name"} and write the locale database out to the file
@var{"name"} in CSV format.

make-doc pthread_cond_signal cond -- r  ) gforth-experimental

make-doc pthread_cond_broadcast cond -- r  ) gforth-experimental

make-doc pthread_cond_wait cond mutex -- r  ) gforth-experimental

make-doc pthread_cond_timedwait cond mutex abstime -- r  ) gforth-experimental

make-doc errno-throw errno --  ) gforth
throws code from a C error code on the stack (if not 0)

make-doc ?errno-throw f --  ) gforth
throw code computed from errno if f!=0

make-doc ?ior x --  ) gforth
use errno to generate throw when failing

make-doc user' "name" -- u  ) gforth-experimental
@i{U} is the offset of the user variable @i{name} in the user
area of each task.

make-doc 's addr1 task -- addr2  ) gforth-experimental
With @i{addr1} being an address in the user data of the current
task, @i{addr2} is the corresponding address in @i{task}'s user
data.

make-doc newtask4 u-data u-return u-fp u-locals -- task  ) gforth-experimental
creates @i{task} with data stack size @i{u-data}, return stack
size @i{u-return}, FP stack size @i{u-fp} and locals stack size
@i{u-locals}.

make-doc newtask stacksize -- task  ) gforth-experimental
creates @i{task}; each stack (data, return, FP, locals) has size
@i{stacksize}.

make-doc task ustacksize "name" --  ) gforth-experimental
creates a task @i{name}; each stack (data, return, FP, locals)
has size @i{ustacksize}.@*
@i{name} execution: ( -- @i{task} )

make-doc (activate) task --  ) gforth-experimental
activates task, the current procedure will be continued there

make-doc activate run-time nest-sys1 task --  ) gforth-experimental
Let @i{task} perform the code behind @code{activate}, and
return to the caller of the word containing @code{activate}.
When the task returns from the code behind @code{activate}, it
terminates itself.

make-doc (pass) x1 .. xn n task --  ) gforth-experimental

make-doc pass x1 .. xn n task --  ) gforth-experimental
Pull @i{x1 .. xn n} from the current task's data stack and push
@i{x1 .. xn} on @i{task}'s data stack.  Let @i{task} perform
the code behind @code{pass}, and return to the caller of the
word containing @code{pass}.  When the task returns from the
code behind @code{pass}, it terminates itself.

make-doc initiate xt task --  ) gforth-experimental
Let @i{task} execute @i{xt}.  Upon return from the @i{xt}, the task
terminates itself (VFX compatible).  Use one-time executable closures
to pass arbitrary paramenters to a task.

make-doc semaphore "name" --  ) gforth-experimental
create a named semaphore @i{name}@*
@i{name} execution: ( -- @i{semaphore} )

make-doc cond "name" --  ) gforth-experimental
create a named condition

make-doc lock semaphore --  ) gforth-experimental
lock the semaphore

make-doc unlock semaphore --  ) gforth-experimental
unlock the semaphore

make-doc critical-section xt semaphore --  ) gforth-experimental
Execute @i{xt} while locking @i{semaphore}.  After leaving
@i{xt}, @i{semaphore} is unlocked even if an exception is
thrown.

make-doc >pagealign-stack n addr -- n'  ) gforth-experimental

make-doc stacksize -- u  ) gforth-experimental
@i{u} is the data stack size of the main task.

make-doc stacksize4 -- u-data u-return u-fp u-locals  ) gforth-experimental
Pushes the data, return, FP, and locals stack sizes of the main task.

make-doc execute-task xt -- task  ) gforth-experimental
Create a new task @var{task} with the same stack sizes as the
main task. Let @i{task} execute @i{xt}.  Upon return from the
@i{xt}, the task terminates itself.

make-doc send-event xt task --  ) gforth-experimental
Task IPC: send @var{xt} to @var{task}.  The xt is executed
there.  Use a one-shot closure to pass parameters with the xt.

make-doc ?events --  ) gforth-experimental question-events
Perform all event sequences in the current task's message
queue, one event sequence at a time.

make-doc stop --  ) gforth-experimental
stops the current task, and waits for events (which may restart it)

make-doc stop-ns timeout --  ) gforth-experimental
Stop with timeout (in nanoseconds), better replacement for ms

make-doc stop-dns dtimeout --  ) gforth-experimental
Stop with dtimeout (in nanoseconds), better replacement for ms

make-doc event-loop --  ) gforth-experimental
Wait for event sequences, and execute any event sequences when
they arrive.  Return to waiting if no event sequences are in
the queue.  This word never returns.

make-doc pause --  ) gforth-experimental
voluntarily switch to the next waiting task (@code{pause} is
the traditional cooperative task switcher; in the pthread
multitasker, you don't need @code{pause} for cooperation, but
you still can use it e.g. when you have to resort to polling
for some reason).  This also checks for events in the queue.

make-doc thread-deadline d --  ) gforth-experimental
wait until absolute time @var{d} in nanoseconds, base is 1970-1-1 0:00
UTC

make-doc restart task --  ) gforth-experimental
Wake a task

make-doc wake task --  ) gforth-experimental

make-doc halt task --  ) gforth-experimental
Stop a task

make-doc sleep task --  ) gforth-experimental

make-doc event-block task --  ) gforth-experimental
send an event and wait for the answer

make-doc kill task --  ) gforth-experimental
Terminate @i{task}.

make-doc UDefer "name" --  ) gforth
@i{Name} is a task-local deferred word.@*
@i{Name} execution: ( ... -- ... )

make-doc method m v "name" -- m' v  ) mini-oof2
Define a selector @var{name}; increments the number of selectors
@var{m} (in bytes).

make-doc var m v size "name" -- m v'  ) mini-oof2
define an instance variable with @var{size} bytes by the name
@var{name}, and increments the amount of storage per instance @var{m}
by @var{size}.

make-doc class class -- class methods vars  ) mini-oof2
start a class definition with superclass @var{class}, putting the size
of the methods table and instance variable space on the stack.

make-doc end-class class methods vars "name" --  ) mini-oof2
finishs a class definition and assigns a name @var{name} to the newly
created class. Inherited methods are copied from the superclass.

make-doc rec-moof2 addr u -- xt translate-moof2 | notfound  ) mini-oof2
Very simplistic dot-parser, transforms @code{.}@var{selector/ivar} to
@code{>o} @var{selector/ivar} @code{o>}.

make-doc gl-init --  ) minos2
if not already opened, open window and initialize OpenGL

make-doc xmeta@ state -- meta  ) minos2
return meta in vt100 form

make-doc +meta addr u -- addr' u'  ) minos2
insert meta information

make-doc close-server server --  ) gforth-experimental
close raw server socket

make-doc get-socket-options socket -- socket  ) gforth-experimental
hook to set socket options im get-socket-options

make-doc new-textbuffer w h mode -- rb fb  ) minos2
create new texture buffer to render into
uses the current active texture

make-doc screen-pwh -- w h  ) minos2
get screen @var{w h} in pixel

make-doc screen-wh -- rw rh  ) minos2
get screen @var{rw rh} in mm

make-doc >bidi addr u --  ) minos2-bidi
Add string @var{addr u} to the buffer for the bidi algorithm

make-doc x2 --  ) bidi-internal
match on RLE

make-doc x3 --  ) bidi-internal
match on LRE

make-doc x4 --  ) bidi-internal
match on RLO

make-doc x5 --  ) bidi-internal
match on LRO

make-doc x5a --  ) bidi-internal
match on RLI

make-doc x5b --  ) bidi-internal
match on LRI

make-doc bidi-algorithm --  ) minos2-bidi
auto-detect paragraph direction and do bidi algorithm

make-doc bidi-algorithm# level --  ) minos2-bidi
use @ivar{level} as main direction and do bidi algorithm

make-doc render-string addr u --  ) minos2
Render a string

make-doc layout-string addr u -- rw rd rh  ) minos2
Layout a string, resulting in width @var{rw}, depth (below baseline)
in @var{rd} and height (above baseline) in @var{rh}

make-doc curpos-string addr u pos -- rcurpos  ) minos2
Translate cursor position pointer @var{pos} into distance @var{rcurpos}
from the start of the string

make-doc color: rgba "name" --  ) minos2
Create a (possibly shared) color index initialized with @var{rgba}

make-doc new-color: rgba "name" --  ) minos2
Create a unique color index initialized with @var{rgba}

make-doc text-color: rgba "name" --  ) minos2
Create a unique text color index initialized with @var{rgba},
the corresponding emoji color is set to white.

make-doc text-emoji-color: rgbatext rgbaemoji "name" --  ) minos2
Create a unique text color index initialized with @var{rgbatext},
the corresponding emoji color is set to @var{rgbaemoji}.

make-doc fade-color: rgba1 rgba2 "name" --  ) minos2
Create a unique pair of text color index initialized with @var{rgba1}
and @var{rgba2}, the corresponding emoji color is set to white. By
slowly shifting the index from one to the next index, the object will
shift its color using a linear interpolation when redrawn.

make-doc text-emoji-fade-color: rgbatext1 ~2 rgbaemoji1 ~2 "name" --  ) minos2
Create a unique pair of text color index initialized with
@var{rgbatext1} and @var{~2}, the corresponding emoji color pair is set
to @var{rgbaemoji1} to @var{~2}. By slowly shifting the index from one
to the next index, the object will shift its color using a linear
interpolation when redrawn.

make-doc re-color rgba "name" --  ) minos2
assign the named color index @var{"name"} in the current color scheme
with the value @var{rgba}.

make-doc re-text-color rgba "name" --  ) minos2
assign the named text color index @var{"name"} in the current color
scheme with the value @var{rgba}.

make-doc re-emoji-color rgbatext rgbaemoji "name" --  ) minos2
assign the named text and emoji color index @var{"name"} in the current
color scheme with the value @var{rgbatext} and @var{rgbaemoji}.

make-doc re-fade-color rgba1 rgba2 "name" --  ) minos2
assign the named color index pair @var{"name"} in the current color
scheme with the value @var{rgba1} and @var{rgba2}.

make-doc re-text-emoji-fade-color rgbatext1 ~2 rgbaemoji1 ~2 "name" --  ) minos2
assign the named color index pair @var{"name"} in the current color
scheme with the value @var{rgbatext1} and @var{~2}
resp. @var{rgbaemoji1} and @var{~2}.

make-doc +range font# end start --  ) minos2
Add a \var{font#} to a range from @var{start} to (excluding}
@var{end} to the list of ranges.

make-doc range@ codepoint -- font#  ) minos2
Get the @var{font#} for a specific @var{codepoint}.
-1 as result means the font is meaningless

make-doc caller-w -- optr  ) minos2
pointer back to the widget embedding the actor

make-doc active-w -- optr  ) minos2
pointer to the active subwidget embedding the actor

make-doc act-name$ -- addr u  ) minos2 act-name-string
Debugging aid: name of the actor

make-doc clicked rx ry bmask n --  ) minos2
processed clicks

make-doc scrolled axis dir --  ) minos2
process scrolling

make-doc touchdown $rxy*n bmask --  ) minos2
raw click down

make-doc touchup $rxy*n bmask --  ) minos2
raw click up

make-doc touchmove $rxy*n bmask --  ) minos2
raw click, move. @var{bmask}=0 is hover

make-doc dndmove rx ry --  ) minos2
drag&drop move, objects can show willingness to accept

make-doc dnddrop rx ry addr u --  ) minos2
drag&drop drop, objects can insert data described by @var{addr u}

make-doc ukeyed addr u --  ) minos2
key event, string of printable unicode characters

make-doc ekeyed ekey --  ) minos2
key event, non-printable key

make-doc ?inside rx ry -- act / 0  ) minos2 query-inside
check if coordinates are inside the widget

make-doc focus --  ) minos2
put widget into focus

make-doc defocus --  ) minos2
put widget out of focus

make-doc entered --  ) minos2
react on cursor entering the widget area

make-doc left --  ) minos2
react on cursor leaving the widget area

make-doc show --  ) minos2
widget is shown

make-doc hide --  ) minos2
widget is hidden

make-doc get -- something  ) minos2
getter for the value behind the widget

make-doc set something --  ) minos2
setter for the value behind the widget

make-doc show-you --  ) minos2
make widget visible

make-doc actor -- class  ) minos2
class for the actions bound to a component.

make-doc parent-w -- optr  ) minos2
pointer to parent widget

make-doc act -- optr  ) minos2
pointer to actor

make-doc name$ -- addr u  ) minos2 name-string
Widget name for debugging and searching

make-doc x -- r  ) minos2
widget x coordinate

make-doc y -- r  ) minos2
widget y coordinate

make-doc w -- r  ) minos2
widget width

make-doc h -- r  ) minos2
widget height above baseline

make-doc d -- r  ) minos2
widget depth below baseline

make-doc gap -- r  ) minos2
gap between lines

make-doc baseline -- r  ) minos2
minimun skip per line

make-doc kerning -- r  ) minos2
add kerning

make-doc raise -- r  ) minos2
raise/lower box

make-doc border -- r  ) minos2
surrounding border, all directions

make-doc borderv -- r  ) minos2
vertical border offset

make-doc bordert -- r  ) minos2
top border offset

make-doc borderl -- r  ) minos2
left border offset

make-doc w-color -- r  ) minos2
widget color index (into color map), if any

make-doc draw-init --  ) minos2
init draw

make-doc draw --  ) minos2
draw widget

make-doc split firstflag rstart1 rx -- o rstart2  ) minos2
split a widget into parts for typesetting paragraphs

make-doc lastfit --  ) minos2
fit last widget element in a box

make-doc hglue -- rtyp rsub radd  ) minos2
calculate horizontal glue

make-doc dglue -- rtyp rsub radd  ) minos2
calculate vertical glue below baseline

make-doc vglue -- rtyp rsub radd  ) minos2
calculate vertical glue above baseline

make-doc hglue@ -- rtyp rsub radd  ) minos2 hglue-fetch
cached variant of @code{hglue}

make-doc dglue@ -- rtyp rsub radd  ) minos2 dglue-fetch
cached variant of @code{dglue}

make-doc vglue@ -- rtyp rsub radd  ) minos2 vglue-fetch
cached variant of @code{vglue}

make-doc xywh -- rx0 ry0 rw rh  ) minos2
widget bounding box, starting at the top left corner

make-doc xywhd -- rx ry rw rh rd  ) minos2
widget bounding box, starting at the left baseline point

make-doc !resize rx ry rw rh rd --  ) minos2 store-resize
resize a widget

make-doc !size --  ) minos2 store-size
let the widget self-determine its size

make-doc dispose-widget --  ) minos2
get rid of a widget

make-doc .widget --  ) minos2 print-widget
debugging: Print informations about the widget

make-doc par-split rw --  ) minos2
split a paragraph by width @var{rw}

make-doc resized --  ) minos2
widget is resized

make-doc widget -- class  ) minos2
class for visual components

make-doc style: addr u --  ) minos2

make-doc thumb: addr u r --  ) minos2

make-doc do-childs-act? xt flag --  ) minos2
loop prevention: checks flag, sets flag, calls do-child-?act, resets flag

make-doc glue+ f: t1 f: s1 f: a1 f: t2 f: s2 f: a2 -- t3 s3 a3  ) minos2
stick two glues together

make-doc glue* f: t1 f: s1 f: a1 f: t2 f: s2 f: a2 -- t3 s3 a3  ) minos2
overlay two glues together

make-doc vp-top o:vp --  ) minos2
scroll viewport to top

make-doc vp-bottom o:vp --  ) minos2
scroll viewport to bottom

make-doc vp-left o:vp --  ) minos2
scroll viewport to left

make-doc vp-right o:vp --  ) minos2
scroll viewport to right

make-doc vp-reslide o:vp --  ) minos2
Adjust the sliders of a viewport after scrolling

make-doc vp-needed xt --  ) minos2
collect needs in viewport's vp-need

make-doc >animate rdelta addr xt --  ) minos2 to-animate
create a new animation, calling @var{xt} with stack effect
@code{( addr r0..1 -- )} repeatedly, until the @var{rdelta} timeout
expired; last call is always with argument @var{1e} for the time.
